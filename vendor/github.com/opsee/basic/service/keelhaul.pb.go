// Code generated by protoc-gen-gogo.
// source: keelhaul.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import opsee1 "github.com/opsee/basic/schema"
import opsee2 "github.com/opsee/basic/schema"
import opsee3 "github.com/opsee/basic/schema"
import _ "github.com/opsee/basic/schema/aws/ec2"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListBastionStatesRequest struct {
	CustomerIds []string `protobuf:"bytes,1,rep,name=customer_ids" json:"customer_ids,omitempty"`
}

func (m *ListBastionStatesRequest) Reset()         { *m = ListBastionStatesRequest{} }
func (m *ListBastionStatesRequest) String() string { return proto.CompactTextString(m) }
func (*ListBastionStatesRequest) ProtoMessage()    {}

type ListBastionStatesResponse struct {
	BastionStates []*opsee1.BastionState `protobuf:"bytes,1,rep,name=bastion_states" json:"bastion_states,omitempty"`
}

func (m *ListBastionStatesResponse) Reset()         { *m = ListBastionStatesResponse{} }
func (m *ListBastionStatesResponse) String() string { return proto.CompactTextString(m) }
func (*ListBastionStatesResponse) ProtoMessage()    {}

func (m *ListBastionStatesResponse) GetBastionStates() []*opsee1.BastionState {
	if m != nil {
		return m.BastionStates
	}
	return nil
}

type ScanVpcsRequest struct {
	User      *opsee2.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	AccessKey string       `protobuf:"bytes,2,opt,name=access_key,proto3" json:"access_key,omitempty"`
	SecretKey string       `protobuf:"bytes,3,opt,name=secret_key,proto3" json:"secret_key,omitempty"`
	Region    string       `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *ScanVpcsRequest) Reset()         { *m = ScanVpcsRequest{} }
func (m *ScanVpcsRequest) String() string { return proto.CompactTextString(m) }
func (*ScanVpcsRequest) ProtoMessage()    {}

func (m *ScanVpcsRequest) GetUser() *opsee2.User {
	if m != nil {
		return m.User
	}
	return nil
}

type ScanVpcsResponse struct {
	Region *opsee3.Region `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
}

func (m *ScanVpcsResponse) Reset()         { *m = ScanVpcsResponse{} }
func (m *ScanVpcsResponse) String() string { return proto.CompactTextString(m) }
func (*ScanVpcsResponse) ProtoMessage()    {}

func (m *ScanVpcsResponse) GetRegion() *opsee3.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type LaunchStackRequest struct {
	User         *opsee2.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	AccessKey    string       `protobuf:"bytes,2,opt,name=access_key,proto3" json:"access_key,omitempty"`
	SecretKey    string       `protobuf:"bytes,3,opt,name=secret_key,proto3" json:"secret_key,omitempty"`
	Region       string       `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcId        string       `protobuf:"bytes,5,opt,name=vpc_id,proto3" json:"vpc_id,omitempty"`
	SubnetId     string       `protobuf:"bytes,6,opt,name=subnet_id,proto3" json:"subnet_id,omitempty"`
	InstanceSize string       `protobuf:"bytes,7,opt,name=instance_size,proto3" json:"instance_size,omitempty"`
}

func (m *LaunchStackRequest) Reset()         { *m = LaunchStackRequest{} }
func (m *LaunchStackRequest) String() string { return proto.CompactTextString(m) }
func (*LaunchStackRequest) ProtoMessage()    {}

func (m *LaunchStackRequest) GetUser() *opsee2.User {
	if m != nil {
		return m.User
	}
	return nil
}

type LaunchStackResponse struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,proto3" json:"stack_id,omitempty"`
}

func (m *LaunchStackResponse) Reset()         { *m = LaunchStackResponse{} }
func (m *LaunchStackResponse) String() string { return proto.CompactTextString(m) }
func (*LaunchStackResponse) ProtoMessage()    {}

type AuthenticateBastionRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *AuthenticateBastionRequest) Reset()         { *m = AuthenticateBastionRequest{} }
func (m *AuthenticateBastionRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateBastionRequest) ProtoMessage()    {}

type AuthenticateBastionResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *AuthenticateBastionResponse) Reset()         { *m = AuthenticateBastionResponse{} }
func (m *AuthenticateBastionResponse) String() string { return proto.CompactTextString(m) }
func (*AuthenticateBastionResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*ListBastionStatesRequest)(nil), "opsee.ListBastionStatesRequest")
	proto.RegisterType((*ListBastionStatesResponse)(nil), "opsee.ListBastionStatesResponse")
	proto.RegisterType((*ScanVpcsRequest)(nil), "opsee.ScanVpcsRequest")
	proto.RegisterType((*ScanVpcsResponse)(nil), "opsee.ScanVpcsResponse")
	proto.RegisterType((*LaunchStackRequest)(nil), "opsee.LaunchStackRequest")
	proto.RegisterType((*LaunchStackResponse)(nil), "opsee.LaunchStackResponse")
	proto.RegisterType((*AuthenticateBastionRequest)(nil), "opsee.AuthenticateBastionRequest")
	proto.RegisterType((*AuthenticateBastionResponse)(nil), "opsee.AuthenticateBastionResponse")
}
func (this *ListBastionStatesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListBastionStatesRequest)
	if !ok {
		that2, ok := that.(ListBastionStatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.CustomerIds) != len(that1.CustomerIds) {
		return false
	}
	for i := range this.CustomerIds {
		if this.CustomerIds[i] != that1.CustomerIds[i] {
			return false
		}
	}
	return true
}
func (this *ListBastionStatesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListBastionStatesResponse)
	if !ok {
		that2, ok := that.(ListBastionStatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.BastionStates) != len(that1.BastionStates) {
		return false
	}
	for i := range this.BastionStates {
		if !this.BastionStates[i].Equal(that1.BastionStates[i]) {
			return false
		}
	}
	return true
}
func (this *ScanVpcsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScanVpcsRequest)
	if !ok {
		that2, ok := that.(ScanVpcsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.AccessKey != that1.AccessKey {
		return false
	}
	if this.SecretKey != that1.SecretKey {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *ScanVpcsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScanVpcsResponse)
	if !ok {
		that2, ok := that.(ScanVpcsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	return true
}
func (this *LaunchStackRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LaunchStackRequest)
	if !ok {
		that2, ok := that.(LaunchStackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.AccessKey != that1.AccessKey {
		return false
	}
	if this.SecretKey != that1.SecretKey {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.SubnetId != that1.SubnetId {
		return false
	}
	if this.InstanceSize != that1.InstanceSize {
		return false
	}
	return true
}
func (this *LaunchStackResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LaunchStackResponse)
	if !ok {
		that2, ok := that.(LaunchStackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StackId != that1.StackId {
		return false
	}
	return true
}
func (this *AuthenticateBastionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateBastionRequest)
	if !ok {
		that2, ok := that.(AuthenticateBastionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *AuthenticateBastionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateBastionResponse)
	if !ok {
		that2, ok := that.(AuthenticateBastionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}

type ListBastionStatesRequestGetter interface {
	GetListBastionStatesRequest() *ListBastionStatesRequest
}

var GraphQLListBastionStatesRequestType *github_com_graphql_go_graphql.Object

type ListBastionStatesResponseGetter interface {
	GetListBastionStatesResponse() *ListBastionStatesResponse
}

var GraphQLListBastionStatesResponseType *github_com_graphql_go_graphql.Object

type ScanVpcsRequestGetter interface {
	GetScanVpcsRequest() *ScanVpcsRequest
}

var GraphQLScanVpcsRequestType *github_com_graphql_go_graphql.Object

type ScanVpcsResponseGetter interface {
	GetScanVpcsResponse() *ScanVpcsResponse
}

var GraphQLScanVpcsResponseType *github_com_graphql_go_graphql.Object

type LaunchStackRequestGetter interface {
	GetLaunchStackRequest() *LaunchStackRequest
}

var GraphQLLaunchStackRequestType *github_com_graphql_go_graphql.Object

type LaunchStackResponseGetter interface {
	GetLaunchStackResponse() *LaunchStackResponse
}

var GraphQLLaunchStackResponseType *github_com_graphql_go_graphql.Object

type AuthenticateBastionRequestGetter interface {
	GetAuthenticateBastionRequest() *AuthenticateBastionRequest
}

var GraphQLAuthenticateBastionRequestType *github_com_graphql_go_graphql.Object

type AuthenticateBastionResponseGetter interface {
	GetAuthenticateBastionResponse() *AuthenticateBastionResponse
}

var GraphQLAuthenticateBastionResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLListBastionStatesRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListBastionStatesRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"customer_ids": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListBastionStatesRequest)
						if ok {
							return obj.CustomerIds, nil
						}
						inter, ok := p.Source.(ListBastionStatesRequestGetter)
						if ok {
							face := inter.GetListBastionStatesRequest()
							if face == nil {
								return nil, nil
							}
							return face.CustomerIds, nil
						}
						return nil, fmt.Errorf("field customer_ids not resolved")
					},
				},
			}
		}),
	})
	GraphQLListBastionStatesResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListBastionStatesResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"bastion_states": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee1.GraphQLBastionStateType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListBastionStatesResponse)
						if ok {
							return obj.BastionStates, nil
						}
						inter, ok := p.Source.(ListBastionStatesResponseGetter)
						if ok {
							face := inter.GetListBastionStatesResponse()
							if face == nil {
								return nil, nil
							}
							return face.BastionStates, nil
						}
						return nil, fmt.Errorf("field bastion_states not resolved")
					},
				},
			}
		}),
	})
	GraphQLScanVpcsRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceScanVpcsRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"access_key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							return obj.AccessKey, nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							return face.AccessKey, nil
						}
						return nil, fmt.Errorf("field access_key not resolved")
					},
				},
				"secret_key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							return obj.SecretKey, nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							return face.SecretKey, nil
						}
						return nil, fmt.Errorf("field secret_key not resolved")
					},
				},
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
			}
		}),
	})
	GraphQLScanVpcsResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceScanVpcsResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"region": &github_com_graphql_go_graphql.Field{
					Type:        opsee3.GraphQLRegionType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsResponse)
						if ok {
							if obj.Region == nil {
								return nil, nil
							}
							return obj.GetRegion(), nil
						}
						inter, ok := p.Source.(ScanVpcsResponseGetter)
						if ok {
							face := inter.GetScanVpcsResponse()
							if face == nil {
								return nil, nil
							}
							if face.Region == nil {
								return nil, nil
							}
							return face.GetRegion(), nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
			}
		}),
	})
	GraphQLLaunchStackRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceLaunchStackRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"access_key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.AccessKey, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.AccessKey, nil
						}
						return nil, fmt.Errorf("field access_key not resolved")
					},
				},
				"secret_key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.SecretKey, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.SecretKey, nil
						}
						return nil, fmt.Errorf("field secret_key not resolved")
					},
				},
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
				"subnet_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.SubnetId, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.SubnetId, nil
						}
						return nil, fmt.Errorf("field subnet_id not resolved")
					},
				},
				"instance_size": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.InstanceSize, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.InstanceSize, nil
						}
						return nil, fmt.Errorf("field instance_size not resolved")
					},
				},
			}
		}),
	})
	GraphQLLaunchStackResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceLaunchStackResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"stack_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackResponse)
						if ok {
							return obj.StackId, nil
						}
						inter, ok := p.Source.(LaunchStackResponseGetter)
						if ok {
							face := inter.GetLaunchStackResponse()
							if face == nil {
								return nil, nil
							}
							return face.StackId, nil
						}
						return nil, fmt.Errorf("field stack_id not resolved")
					},
				},
			}
		}),
	})
	GraphQLAuthenticateBastionRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceAuthenticateBastionRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionRequest)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(AuthenticateBastionRequestGetter)
						if ok {
							face := inter.GetAuthenticateBastionRequest()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"password": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionRequest)
						if ok {
							return obj.Password, nil
						}
						inter, ok := p.Source.(AuthenticateBastionRequestGetter)
						if ok {
							face := inter.GetAuthenticateBastionRequest()
							if face == nil {
								return nil, nil
							}
							return face.Password, nil
						}
						return nil, fmt.Errorf("field password not resolved")
					},
				},
			}
		}),
	})
	GraphQLAuthenticateBastionResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceAuthenticateBastionResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"success": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionResponse)
						if ok {
							return obj.Success, nil
						}
						inter, ok := p.Source.(AuthenticateBastionResponseGetter)
						if ok {
							face := inter.GetAuthenticateBastionResponse()
							if face == nil {
								return nil, nil
							}
							return face.Success, nil
						}
						return nil, fmt.Errorf("field success not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Keelhaul service

type KeelhaulClient interface {
	ListBastionStates(ctx context.Context, in *ListBastionStatesRequest, opts ...grpc.CallOption) (*ListBastionStatesResponse, error)
	ScanVpcs(ctx context.Context, in *ScanVpcsRequest, opts ...grpc.CallOption) (*ScanVpcsResponse, error)
	LaunchStack(ctx context.Context, in *LaunchStackRequest, opts ...grpc.CallOption) (*LaunchStackResponse, error)
	AuthenticateBastion(ctx context.Context, in *AuthenticateBastionRequest, opts ...grpc.CallOption) (*AuthenticateBastionResponse, error)
}

type keelhaulClient struct {
	cc *grpc.ClientConn
}

func NewKeelhaulClient(cc *grpc.ClientConn) KeelhaulClient {
	return &keelhaulClient{cc}
}

func (c *keelhaulClient) ListBastionStates(ctx context.Context, in *ListBastionStatesRequest, opts ...grpc.CallOption) (*ListBastionStatesResponse, error) {
	out := new(ListBastionStatesResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/ListBastionStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) ScanVpcs(ctx context.Context, in *ScanVpcsRequest, opts ...grpc.CallOption) (*ScanVpcsResponse, error) {
	out := new(ScanVpcsResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/ScanVpcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) LaunchStack(ctx context.Context, in *LaunchStackRequest, opts ...grpc.CallOption) (*LaunchStackResponse, error) {
	out := new(LaunchStackResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/LaunchStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) AuthenticateBastion(ctx context.Context, in *AuthenticateBastionRequest, opts ...grpc.CallOption) (*AuthenticateBastionResponse, error) {
	out := new(AuthenticateBastionResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/AuthenticateBastion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Keelhaul service

type KeelhaulServer interface {
	ListBastionStates(context.Context, *ListBastionStatesRequest) (*ListBastionStatesResponse, error)
	ScanVpcs(context.Context, *ScanVpcsRequest) (*ScanVpcsResponse, error)
	LaunchStack(context.Context, *LaunchStackRequest) (*LaunchStackResponse, error)
	AuthenticateBastion(context.Context, *AuthenticateBastionRequest) (*AuthenticateBastionResponse, error)
}

func RegisterKeelhaulServer(s *grpc.Server, srv KeelhaulServer) {
	s.RegisterService(&_Keelhaul_serviceDesc, srv)
}

func _Keelhaul_ListBastionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListBastionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeelhaulServer).ListBastionStates(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Keelhaul_ScanVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ScanVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeelhaulServer).ScanVpcs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Keelhaul_LaunchStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LaunchStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeelhaulServer).LaunchStack(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Keelhaul_AuthenticateBastion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AuthenticateBastionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeelhaulServer).AuthenticateBastion(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Keelhaul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Keelhaul",
	HandlerType: (*KeelhaulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBastionStates",
			Handler:    _Keelhaul_ListBastionStates_Handler,
		},
		{
			MethodName: "ScanVpcs",
			Handler:    _Keelhaul_ScanVpcs_Handler,
		},
		{
			MethodName: "LaunchStack",
			Handler:    _Keelhaul_LaunchStack_Handler,
		},
		{
			MethodName: "AuthenticateBastion",
			Handler:    _Keelhaul_AuthenticateBastion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func NewPopulatedListBastionStatesRequest(r randyKeelhaul, easy bool) *ListBastionStatesRequest {
	this := &ListBastionStatesRequest{}
	v1 := r.Intn(10)
	this.CustomerIds = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.CustomerIds[i] = randStringKeelhaul(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListBastionStatesResponse(r randyKeelhaul, easy bool) *ListBastionStatesResponse {
	this := &ListBastionStatesResponse{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.BastionStates = make([]*opsee1.BastionState, v2)
		for i := 0; i < v2; i++ {
			this.BastionStates[i] = opsee1.NewPopulatedBastionState(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScanVpcsRequest(r randyKeelhaul, easy bool) *ScanVpcsRequest {
	this := &ScanVpcsRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee2.NewPopulatedUser(r, easy)
	}
	this.AccessKey = randStringKeelhaul(r)
	this.SecretKey = randStringKeelhaul(r)
	this.Region = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScanVpcsResponse(r randyKeelhaul, easy bool) *ScanVpcsResponse {
	this := &ScanVpcsResponse{}
	if r.Intn(10) == 0 {
		this.Region = opsee3.NewPopulatedRegion(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLaunchStackRequest(r randyKeelhaul, easy bool) *LaunchStackRequest {
	this := &LaunchStackRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee2.NewPopulatedUser(r, easy)
	}
	this.AccessKey = randStringKeelhaul(r)
	this.SecretKey = randStringKeelhaul(r)
	this.Region = randStringKeelhaul(r)
	this.VpcId = randStringKeelhaul(r)
	this.SubnetId = randStringKeelhaul(r)
	this.InstanceSize = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLaunchStackResponse(r randyKeelhaul, easy bool) *LaunchStackResponse {
	this := &LaunchStackResponse{}
	this.StackId = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticateBastionRequest(r randyKeelhaul, easy bool) *AuthenticateBastionRequest {
	this := &AuthenticateBastionRequest{}
	this.Id = randStringKeelhaul(r)
	this.Password = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticateBastionResponse(r randyKeelhaul, easy bool) *AuthenticateBastionResponse {
	this := &AuthenticateBastionResponse{}
	this.Success = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeelhaul interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeelhaul(r randyKeelhaul) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeelhaul(r randyKeelhaul) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneKeelhaul(r)
	}
	return string(tmps)
}
func randUnrecognizedKeelhaul(r randyKeelhaul, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldKeelhaul(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldKeelhaul(data []byte, r randyKeelhaul, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateKeelhaul(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateKeelhaul(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateKeelhaul(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
