// Code generated by protoc-gen-gogo.
// source: spanx.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import opsee_aws_credentials "github.com/opsee/basic/schema/aws/credentials"
import opsee2 "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PutRoleRequest struct {
	User        *opsee2.User                 `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Credentials *opsee_aws_credentials.Value `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *PutRoleRequest) Reset()         { *m = PutRoleRequest{} }
func (m *PutRoleRequest) String() string { return proto.CompactTextString(m) }
func (*PutRoleRequest) ProtoMessage()    {}

func (m *PutRoleRequest) GetUser() *opsee2.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PutRoleRequest) GetCredentials() *opsee_aws_credentials.Value {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type PutRoleResponse struct {
	Credentials *opsee_aws_credentials.Value `protobuf:"bytes,1,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *PutRoleResponse) Reset()         { *m = PutRoleResponse{} }
func (m *PutRoleResponse) String() string { return proto.CompactTextString(m) }
func (*PutRoleResponse) ProtoMessage()    {}

func (m *PutRoleResponse) GetCredentials() *opsee_aws_credentials.Value {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type GetCredentialsRequest struct {
	User *opsee2.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetCredentialsRequest) Reset()         { *m = GetCredentialsRequest{} }
func (m *GetCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialsRequest) ProtoMessage()    {}

func (m *GetCredentialsRequest) GetUser() *opsee2.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetCredentialsResponse struct {
	Credentials *opsee_aws_credentials.Value `protobuf:"bytes,1,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *GetCredentialsResponse) Reset()         { *m = GetCredentialsResponse{} }
func (m *GetCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialsResponse) ProtoMessage()    {}

func (m *GetCredentialsResponse) GetCredentials() *opsee_aws_credentials.Value {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func init() {
	proto.RegisterType((*PutRoleRequest)(nil), "opsee.PutRoleRequest")
	proto.RegisterType((*PutRoleResponse)(nil), "opsee.PutRoleResponse")
	proto.RegisterType((*GetCredentialsRequest)(nil), "opsee.GetCredentialsRequest")
	proto.RegisterType((*GetCredentialsResponse)(nil), "opsee.GetCredentialsResponse")
}
func (this *PutRoleRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PutRoleRequest)
	if !ok {
		that2, ok := that.(PutRoleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	return true
}
func (this *PutRoleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PutRoleResponse)
	if !ok {
		that2, ok := that.(PutRoleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	return true
}
func (this *GetCredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCredentialsRequest)
	if !ok {
		that2, ok := that.(GetCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *GetCredentialsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCredentialsResponse)
	if !ok {
		that2, ok := that.(GetCredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	return true
}

type PutRoleRequestGetter interface {
	GetPutRoleRequest() *PutRoleRequest
}

var GraphQLPutRoleRequestType *github_com_graphql_go_graphql.Object

type PutRoleResponseGetter interface {
	GetPutRoleResponse() *PutRoleResponse
}

var GraphQLPutRoleResponseType *github_com_graphql_go_graphql.Object

type GetCredentialsRequestGetter interface {
	GetGetCredentialsRequest() *GetCredentialsRequest
}

var GraphQLGetCredentialsRequestType *github_com_graphql_go_graphql.Object

type GetCredentialsResponseGetter interface {
	GetGetCredentialsResponse() *GetCredentialsResponse
}

var GraphQLGetCredentialsResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLPutRoleRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "servicePutRoleRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PutRoleRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(PutRoleRequestGetter)
						if ok {
							face := inter.GetPutRoleRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"credentials": &github_com_graphql_go_graphql.Field{
					Type:        opsee_aws_credentials.GraphQLValueType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PutRoleRequest)
						if ok {
							if obj.Credentials == nil {
								return nil, nil
							}
							return obj.GetCredentials(), nil
						}
						inter, ok := p.Source.(PutRoleRequestGetter)
						if ok {
							face := inter.GetPutRoleRequest()
							if face == nil {
								return nil, nil
							}
							if face.Credentials == nil {
								return nil, nil
							}
							return face.GetCredentials(), nil
						}
						return nil, fmt.Errorf("field credentials not resolved")
					},
				},
			}
		}),
	})
	GraphQLPutRoleResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "servicePutRoleResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"credentials": &github_com_graphql_go_graphql.Field{
					Type:        opsee_aws_credentials.GraphQLValueType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PutRoleResponse)
						if ok {
							if obj.Credentials == nil {
								return nil, nil
							}
							return obj.GetCredentials(), nil
						}
						inter, ok := p.Source.(PutRoleResponseGetter)
						if ok {
							face := inter.GetPutRoleResponse()
							if face == nil {
								return nil, nil
							}
							if face.Credentials == nil {
								return nil, nil
							}
							return face.GetCredentials(), nil
						}
						return nil, fmt.Errorf("field credentials not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetCredentialsRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCredentialsRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCredentialsRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(GetCredentialsRequestGetter)
						if ok {
							face := inter.GetGetCredentialsRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetCredentialsResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCredentialsResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"credentials": &github_com_graphql_go_graphql.Field{
					Type:        opsee_aws_credentials.GraphQLValueType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCredentialsResponse)
						if ok {
							if obj.Credentials == nil {
								return nil, nil
							}
							return obj.GetCredentials(), nil
						}
						inter, ok := p.Source.(GetCredentialsResponseGetter)
						if ok {
							face := inter.GetGetCredentialsResponse()
							if face == nil {
								return nil, nil
							}
							if face.Credentials == nil {
								return nil, nil
							}
							return face.GetCredentials(), nil
						}
						return nil, fmt.Errorf("field credentials not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Spanx service

type SpanxClient interface {
	PutRole(ctx context.Context, in *PutRoleRequest, opts ...grpc.CallOption) (*PutRoleResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
}

type spanxClient struct {
	cc *grpc.ClientConn
}

func NewSpanxClient(cc *grpc.ClientConn) SpanxClient {
	return &spanxClient{cc}
}

func (c *spanxClient) PutRole(ctx context.Context, in *PutRoleRequest, opts ...grpc.CallOption) (*PutRoleResponse, error) {
	out := new(PutRoleResponse)
	err := grpc.Invoke(ctx, "/opsee.Spanx/PutRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spanxClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := grpc.Invoke(ctx, "/opsee.Spanx/GetCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spanx service

type SpanxServer interface {
	PutRole(context.Context, *PutRoleRequest) (*PutRoleResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
}

func RegisterSpanxServer(s *grpc.Server, srv SpanxServer) {
	s.RegisterService(&_Spanx_serviceDesc, srv)
}

func _Spanx_PutRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpanxServer).PutRole(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spanx_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpanxServer).GetCredentials(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Spanx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Spanx",
	HandlerType: (*SpanxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRole",
			Handler:    _Spanx_PutRole_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _Spanx_GetCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func NewPopulatedPutRoleRequest(r randySpanx, easy bool) *PutRoleRequest {
	this := &PutRoleRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee2.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Credentials = opsee_aws_credentials.NewPopulatedValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPutRoleResponse(r randySpanx, easy bool) *PutRoleResponse {
	this := &PutRoleResponse{}
	if r.Intn(10) != 0 {
		this.Credentials = opsee_aws_credentials.NewPopulatedValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCredentialsRequest(r randySpanx, easy bool) *GetCredentialsRequest {
	this := &GetCredentialsRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee2.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCredentialsResponse(r randySpanx, easy bool) *GetCredentialsResponse {
	this := &GetCredentialsResponse{}
	if r.Intn(10) != 0 {
		this.Credentials = opsee_aws_credentials.NewPopulatedValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySpanx interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSpanx(r randySpanx) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSpanx(r randySpanx) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneSpanx(r)
	}
	return string(tmps)
}
func randUnrecognizedSpanx(r randySpanx, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldSpanx(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldSpanx(data []byte, r randySpanx, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateSpanx(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateSpanx(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateSpanx(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
