// Code generated by protoc-gen-gogo.
// source: spanx.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"
import opsee_aws_credentials "github.com/opsee/basic/schema/aws/credentials"
import opsee1 "github.com/opsee/basic/schema"
import opsee "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnhancedCombatModeRequest struct {
	User *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *EnhancedCombatModeRequest) Reset()                    { *m = EnhancedCombatModeRequest{} }
func (m *EnhancedCombatModeRequest) String() string            { return proto.CompactTextString(m) }
func (*EnhancedCombatModeRequest) ProtoMessage()               {}
func (*EnhancedCombatModeRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{0} }

func (m *EnhancedCombatModeRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type EnhancedCombatModeResponse struct {
	StackUrl string `protobuf:"bytes,1,opt,name=stack_url,json=stackUrl,proto3" json:"stack_url,omitempty"`
}

func (m *EnhancedCombatModeResponse) Reset()                    { *m = EnhancedCombatModeResponse{} }
func (m *EnhancedCombatModeResponse) String() string            { return proto.CompactTextString(m) }
func (*EnhancedCombatModeResponse) ProtoMessage()               {}
func (*EnhancedCombatModeResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{1} }

type GetRoleStackRequest struct {
	User *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetRoleStackRequest) Reset()                    { *m = GetRoleStackRequest{} }
func (m *GetRoleStackRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoleStackRequest) ProtoMessage()               {}
func (*GetRoleStackRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{2} }

func (m *GetRoleStackRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetRoleStackResponse struct {
	RoleStack *opsee.RoleStack `protobuf:"bytes,1,opt,name=role_stack,json=roleStack" json:"role_stack,omitempty"`
}

func (m *GetRoleStackResponse) Reset()                    { *m = GetRoleStackResponse{} }
func (m *GetRoleStackResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRoleStackResponse) ProtoMessage()               {}
func (*GetRoleStackResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{3} }

func (m *GetRoleStackResponse) GetRoleStack() *opsee.RoleStack {
	if m != nil {
		return m.RoleStack
	}
	return nil
}

type GetCredentialsRequest struct {
	User *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetCredentialsRequest) Reset()                    { *m = GetCredentialsRequest{} }
func (m *GetCredentialsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCredentialsRequest) ProtoMessage()               {}
func (*GetCredentialsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{4} }

func (m *GetCredentialsRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetCredentialsResponse struct {
	Credentials *opsee_aws_credentials.Value `protobuf:"bytes,1,opt,name=credentials" json:"credentials,omitempty"`
	Expires     *opsee_types.Timestamp       `protobuf:"bytes,2,opt,name=Expires,json=expires" json:"Expires,omitempty"`
}

func (m *GetCredentialsResponse) Reset()                    { *m = GetCredentialsResponse{} }
func (m *GetCredentialsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCredentialsResponse) ProtoMessage()               {}
func (*GetCredentialsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpanx, []int{5} }

func (m *GetCredentialsResponse) GetCredentials() *opsee_aws_credentials.Value {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *GetCredentialsResponse) GetExpires() *opsee_types.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func init() {
	proto.RegisterType((*EnhancedCombatModeRequest)(nil), "opsee.EnhancedCombatModeRequest")
	proto.RegisterType((*EnhancedCombatModeResponse)(nil), "opsee.EnhancedCombatModeResponse")
	proto.RegisterType((*GetRoleStackRequest)(nil), "opsee.GetRoleStackRequest")
	proto.RegisterType((*GetRoleStackResponse)(nil), "opsee.GetRoleStackResponse")
	proto.RegisterType((*GetCredentialsRequest)(nil), "opsee.GetCredentialsRequest")
	proto.RegisterType((*GetCredentialsResponse)(nil), "opsee.GetCredentialsResponse")
}
func (this *EnhancedCombatModeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnhancedCombatModeRequest)
	if !ok {
		that2, ok := that.(EnhancedCombatModeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *EnhancedCombatModeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnhancedCombatModeResponse)
	if !ok {
		that2, ok := that.(EnhancedCombatModeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StackUrl != that1.StackUrl {
		return false
	}
	return true
}
func (this *GetRoleStackRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetRoleStackRequest)
	if !ok {
		that2, ok := that.(GetRoleStackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *GetRoleStackResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetRoleStackResponse)
	if !ok {
		that2, ok := that.(GetRoleStackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RoleStack.Equal(that1.RoleStack) {
		return false
	}
	return true
}
func (this *GetCredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCredentialsRequest)
	if !ok {
		that2, ok := that.(GetCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *GetCredentialsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCredentialsResponse)
	if !ok {
		that2, ok := that.(GetCredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	if !this.Expires.Equal(that1.Expires) {
		return false
	}
	return true
}

type EnhancedCombatModeRequestGetter interface {
	GetEnhancedCombatModeRequest() *EnhancedCombatModeRequest
}

var GraphQLEnhancedCombatModeRequestType *github_com_graphql_go_graphql.Object

type EnhancedCombatModeResponseGetter interface {
	GetEnhancedCombatModeResponse() *EnhancedCombatModeResponse
}

var GraphQLEnhancedCombatModeResponseType *github_com_graphql_go_graphql.Object

type GetRoleStackRequestGetter interface {
	GetGetRoleStackRequest() *GetRoleStackRequest
}

var GraphQLGetRoleStackRequestType *github_com_graphql_go_graphql.Object

type GetRoleStackResponseGetter interface {
	GetGetRoleStackResponse() *GetRoleStackResponse
}

var GraphQLGetRoleStackResponseType *github_com_graphql_go_graphql.Object

type GetCredentialsRequestGetter interface {
	GetGetCredentialsRequest() *GetCredentialsRequest
}

var GraphQLGetCredentialsRequestType *github_com_graphql_go_graphql.Object

type GetCredentialsResponseGetter interface {
	GetGetCredentialsResponse() *GetCredentialsResponse
}

var GraphQLGetCredentialsResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLEnhancedCombatModeRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceEnhancedCombatModeRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EnhancedCombatModeRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(EnhancedCombatModeRequestGetter)
						if ok {
							face := inter.GetEnhancedCombatModeRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLEnhancedCombatModeResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceEnhancedCombatModeResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"stack_url": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EnhancedCombatModeResponse)
						if ok {
							return obj.StackUrl, nil
						}
						inter, ok := p.Source.(EnhancedCombatModeResponseGetter)
						if ok {
							face := inter.GetEnhancedCombatModeResponse()
							if face == nil {
								return nil, nil
							}
							return face.StackUrl, nil
						}
						return nil, fmt.Errorf("field stack_url not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetRoleStackRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetRoleStackRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetRoleStackRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(GetRoleStackRequestGetter)
						if ok {
							face := inter.GetGetRoleStackRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetRoleStackResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetRoleStackResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"role_stack": &github_com_graphql_go_graphql.Field{
					Type:        opsee.GraphQLRoleStackType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetRoleStackResponse)
						if ok {
							if obj.RoleStack == nil {
								return nil, nil
							}
							return obj.GetRoleStack(), nil
						}
						inter, ok := p.Source.(GetRoleStackResponseGetter)
						if ok {
							face := inter.GetGetRoleStackResponse()
							if face == nil {
								return nil, nil
							}
							if face.RoleStack == nil {
								return nil, nil
							}
							return face.GetRoleStack(), nil
						}
						return nil, fmt.Errorf("field role_stack not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetCredentialsRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCredentialsRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCredentialsRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(GetCredentialsRequestGetter)
						if ok {
							face := inter.GetGetCredentialsRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetCredentialsResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCredentialsResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"credentials": &github_com_graphql_go_graphql.Field{
					Type:        opsee_aws_credentials.GraphQLValueType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCredentialsResponse)
						if ok {
							if obj.Credentials == nil {
								return nil, nil
							}
							return obj.GetCredentials(), nil
						}
						inter, ok := p.Source.(GetCredentialsResponseGetter)
						if ok {
							face := inter.GetGetCredentialsResponse()
							if face == nil {
								return nil, nil
							}
							if face.Credentials == nil {
								return nil, nil
							}
							return face.GetCredentials(), nil
						}
						return nil, fmt.Errorf("field credentials not resolved")
					},
				},
				"Expires": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCredentialsResponse)
						if ok {
							if obj.Expires == nil {
								return nil, nil
							}
							return obj.GetExpires(), nil
						}
						inter, ok := p.Source.(GetCredentialsResponseGetter)
						if ok {
							face := inter.GetGetCredentialsResponse()
							if face == nil {
								return nil, nil
							}
							if face.Expires == nil {
								return nil, nil
							}
							return face.GetExpires(), nil
						}
						return nil, fmt.Errorf("field Expires not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Spanx service

type SpanxClient interface {
	EnhancedCombatMode(ctx context.Context, in *EnhancedCombatModeRequest, opts ...grpc.CallOption) (*EnhancedCombatModeResponse, error)
	GetRoleStack(ctx context.Context, in *GetRoleStackRequest, opts ...grpc.CallOption) (*GetRoleStackResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
}

type spanxClient struct {
	cc *grpc.ClientConn
}

func NewSpanxClient(cc *grpc.ClientConn) SpanxClient {
	return &spanxClient{cc}
}

func (c *spanxClient) EnhancedCombatMode(ctx context.Context, in *EnhancedCombatModeRequest, opts ...grpc.CallOption) (*EnhancedCombatModeResponse, error) {
	out := new(EnhancedCombatModeResponse)
	err := grpc.Invoke(ctx, "/opsee.Spanx/EnhancedCombatMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spanxClient) GetRoleStack(ctx context.Context, in *GetRoleStackRequest, opts ...grpc.CallOption) (*GetRoleStackResponse, error) {
	out := new(GetRoleStackResponse)
	err := grpc.Invoke(ctx, "/opsee.Spanx/GetRoleStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spanxClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := grpc.Invoke(ctx, "/opsee.Spanx/GetCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spanx service

type SpanxServer interface {
	EnhancedCombatMode(context.Context, *EnhancedCombatModeRequest) (*EnhancedCombatModeResponse, error)
	GetRoleStack(context.Context, *GetRoleStackRequest) (*GetRoleStackResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
}

func RegisterSpanxServer(s *grpc.Server, srv SpanxServer) {
	s.RegisterService(&_Spanx_serviceDesc, srv)
}

func _Spanx_EnhancedCombatMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnhancedCombatModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpanxServer).EnhancedCombatMode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spanx_GetRoleStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRoleStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpanxServer).GetRoleStack(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spanx_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpanxServer).GetCredentials(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Spanx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Spanx",
	HandlerType: (*SpanxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnhancedCombatMode",
			Handler:    _Spanx_EnhancedCombatMode_Handler,
		},
		{
			MethodName: "GetRoleStack",
			Handler:    _Spanx_GetRoleStack_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _Spanx_GetCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *EnhancedCombatModeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnhancedCombatModeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *EnhancedCombatModeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnhancedCombatModeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StackUrl) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(len(m.StackUrl)))
		i += copy(data[i:], m.StackUrl)
	}
	return i, nil
}

func (m *GetRoleStackRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetRoleStackRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(m.User.Size()))
		n2, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetRoleStackResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetRoleStackResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoleStack != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(m.RoleStack.Size()))
		n3, err := m.RoleStack.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetCredentialsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetCredentialsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(m.User.Size()))
		n4, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetCredentialsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetCredentialsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Credentials != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSpanx(data, i, uint64(m.Credentials.Size()))
		n5, err := m.Credentials.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Expires != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSpanx(data, i, uint64(m.Expires.Size()))
		n6, err := m.Expires.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeFixed64Spanx(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Spanx(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpanx(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEnhancedCombatModeRequest(r randySpanx, easy bool) *EnhancedCombatModeRequest {
	this := &EnhancedCombatModeRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEnhancedCombatModeResponse(r randySpanx, easy bool) *EnhancedCombatModeResponse {
	this := &EnhancedCombatModeResponse{}
	this.StackUrl = randStringSpanx(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRoleStackRequest(r randySpanx, easy bool) *GetRoleStackRequest {
	this := &GetRoleStackRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRoleStackResponse(r randySpanx, easy bool) *GetRoleStackResponse {
	this := &GetRoleStackResponse{}
	if r.Intn(10) != 0 {
		this.RoleStack = opsee.NewPopulatedRoleStack(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCredentialsRequest(r randySpanx, easy bool) *GetCredentialsRequest {
	this := &GetCredentialsRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCredentialsResponse(r randySpanx, easy bool) *GetCredentialsResponse {
	this := &GetCredentialsResponse{}
	if r.Intn(10) != 0 {
		this.Credentials = opsee_aws_credentials.NewPopulatedValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Expires = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySpanx interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSpanx(r randySpanx) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSpanx(r randySpanx) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneSpanx(r)
	}
	return string(tmps)
}
func randUnrecognizedSpanx(r randySpanx, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldSpanx(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldSpanx(data []byte, r randySpanx, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateSpanx(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateSpanx(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateSpanx(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateSpanx(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *EnhancedCombatModeRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func (m *EnhancedCombatModeResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.StackUrl)
	if l > 0 {
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func (m *GetRoleStackRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func (m *GetRoleStackResponse) Size() (n int) {
	var l int
	_ = l
	if m.RoleStack != nil {
		l = m.RoleStack.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func (m *GetCredentialsRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func (m *GetCredentialsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovSpanx(uint64(l))
	}
	return n
}

func sovSpanx(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpanx(x uint64) (n int) {
	return sovSpanx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnhancedCombatModeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedCombatModeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedCombatModeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedCombatModeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedCombatModeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedCombatModeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleStackRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleStackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleStackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleStackResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleStackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleStackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleStack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleStack == nil {
				m.RoleStack = &opsee.RoleStack{}
			}
			if err := m.RoleStack.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &opsee_aws_credentials.Value{}
			}
			if err := m.Credentials.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &opsee_types.Timestamp{}
			}
			if err := m.Expires.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanx(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpanx(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpanx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpanx
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpanx
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpanx(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpanx = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpanx   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSpanx = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xc9, 0x8a, 0xa5, 0x74, 0x82, 0x10, 0x32, 0xb0, 0x5a, 0xb2, 0xcb, 0xee, 0x12, 0x09,
	0x69, 0x4f, 0xc9, 0xaa, 0x48, 0x88, 0x22, 0xc4, 0x81, 0xaa, 0xaa, 0x38, 0x20, 0xa4, 0x94, 0x72,
	0x80, 0x43, 0xe5, 0xa4, 0x03, 0x8d, 0x48, 0xe2, 0x60, 0x3b, 0x50, 0x6e, 0x9c, 0x79, 0x0c, 0x4e,
	0x3c, 0x02, 0x47, 0x8e, 0x1c, 0x79, 0x04, 0xe0, 0x29, 0x38, 0xe2, 0xda, 0x2e, 0x4d, 0xe9, 0x1f,
	0xf5, 0x30, 0x92, 0x3d, 0x33, 0xbf, 0x6f, 0x6c, 0x7f, 0x06, 0x57, 0x94, 0xb4, 0x98, 0x04, 0x25,
	0x67, 0x92, 0x91, 0x5d, 0x56, 0x0a, 0x44, 0xef, 0xec, 0x75, 0x2a, 0xc7, 0x55, 0x1c, 0x24, 0x2c,
	0x0f, 0x75, 0x26, 0xd4, 0xe5, 0xb8, 0x7a, 0x65, 0xb6, 0x7a, 0x67, 0x96, 0x06, 0xf4, 0xee, 0x6f,
	0x45, 0xc8, 0x0f, 0x25, 0x8a, 0x50, 0xa6, 0x39, 0x0a, 0x49, 0xf3, 0xd2, 0xb2, 0xed, 0x25, 0x36,
	0xa6, 0x22, 0x4d, 0x42, 0x91, 0x8c, 0x31, 0xa7, 0x21, 0x7d, 0x2f, 0xc2, 0x84, 0xe3, 0x08, 0x0b,
	0x99, 0xd2, 0x4c, 0x18, 0x11, 0x8b, 0x9e, 0x6e, 0x46, 0x2b, 0x81, 0xdc, 0x76, 0xba, 0x6a, 0x62,
	0xf2, 0xc6, 0x6c, 0xfc, 0x07, 0x70, 0xa3, 0x5b, 0x8c, 0x69, 0x91, 0xe0, 0xa8, 0xc3, 0xf2, 0x98,
	0xca, 0x27, 0x6c, 0x84, 0x11, 0xbe, 0xad, 0xd4, 0xb9, 0xc8, 0x31, 0x9c, 0x9f, 0x72, 0xfb, 0xce,
	0x89, 0x73, 0xea, 0xb6, 0xdc, 0xc0, 0x5c, 0x73, 0xa0, 0x52, 0x91, 0x2e, 0xf8, 0x6d, 0xf0, 0x56,
	0xd1, 0xa2, 0x64, 0x85, 0x40, 0x72, 0x00, 0x4d, 0x3d, 0x6a, 0x58, 0xf1, 0x4c, 0x6b, 0x34, 0xa3,
	0x8b, 0x3a, 0x31, 0xe0, 0x99, 0x7f, 0x17, 0xae, 0xf6, 0x50, 0x46, 0x2c, 0xc3, 0xfe, 0x34, 0xb5,
	0xf5, 0xc8, 0x1e, 0x5c, 0x5b, 0xe4, 0xec, 0xb0, 0x10, 0x80, 0xab, 0xe4, 0x50, 0x0f, 0xb0, 0xf8,
	0x15, 0x8b, 0xcf, 0xbb, 0x9b, 0x7c, 0xb6, 0xf4, 0xef, 0xc1, 0x75, 0x25, 0xd4, 0x99, 0x3f, 0xe7,
	0xd6, 0x47, 0xf8, 0xe4, 0xc0, 0xde, 0xff, 0xa8, 0x3d, 0xc5, 0x43, 0x70, 0x6b, 0x06, 0x59, 0x89,
	0x43, 0x2b, 0xa1, 0xec, 0x0b, 0x6a, 0xd5, 0xe0, 0x39, 0xcd, 0x2a, 0x8c, 0xea, 0x00, 0x39, 0x83,
	0x46, 0x77, 0x52, 0xa6, 0x1c, 0xc5, 0xfe, 0x8e, 0x66, 0xf7, 0x2c, 0x6b, 0xac, 0x7e, 0x36, 0xfb,
	0x2f, 0x51, 0x03, 0x4d, 0x5b, 0xeb, 0xe3, 0x0e, 0xec, 0xf6, 0xa7, 0xff, 0x96, 0xbc, 0x04, 0xb2,
	0x6c, 0x06, 0x39, 0xb1, 0x02, 0x6b, 0x5d, 0xf6, 0x6e, 0x6d, 0xe8, 0x30, 0xd7, 0xf2, 0xcf, 0x91,
	0xc7, 0x70, 0xa9, 0xfe, 0xec, 0xc4, 0xb3, 0xd0, 0x0a, 0x0f, 0xbd, 0x83, 0x95, 0xb5, 0x7f, 0x52,
	0x4f, 0xe1, 0xf2, 0xe2, 0xeb, 0x91, 0xc3, 0x39, 0xb0, 0xec, 0x87, 0x77, 0x73, 0x4d, 0x75, 0x26,
	0xf8, 0xe8, 0xf6, 0x9f, 0x5f, 0x47, 0xce, 0x97, 0xdf, 0x47, 0xce, 0x57, 0x15, 0xdf, 0x55, 0xfc,
	0x50, 0xf1, 0x53, 0xc5, 0xb7, 0xcf, 0xc7, 0xce, 0x8b, 0x86, 0xb2, 0xec, 0x5d, 0x9a, 0x60, 0x7c,
	0x41, 0xff, 0xf8, 0x3b, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x9c, 0x59, 0xa1, 0xe7, 0x03,
	0x00, 0x00,
}
