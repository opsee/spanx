// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package elb is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	AppCookieStickinessPolicy
	BackendServerDescription
	HealthCheck
	Instance
	LBCookieStickinessPolicy
	Listener
	ListenerDescription
	LoadBalancerDescription
	Policies
	SourceSecurityGroup
*/
package elb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AppCookieStickinessPolicy struct {
	CookieName       *string `protobuf:"bytes,2,opt,name=CookieName" json:"CookieName,omitempty"`
	PolicyName       *string `protobuf:"bytes,3,opt,name=PolicyName" json:"PolicyName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppCookieStickinessPolicy) Reset()         { *m = AppCookieStickinessPolicy{} }
func (m *AppCookieStickinessPolicy) String() string { return proto.CompactTextString(m) }
func (*AppCookieStickinessPolicy) ProtoMessage()    {}

func (m *AppCookieStickinessPolicy) GetCookieName() string {
	if m != nil && m.CookieName != nil {
		return *m.CookieName
	}
	return ""
}

func (m *AppCookieStickinessPolicy) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

type BackendServerDescription struct {
	InstancePort     *int64   `protobuf:"zigzag64,2,opt,name=InstancePort" json:"InstancePort,omitempty"`
	PolicyNames      []string `protobuf:"bytes,3,rep,name=PolicyNames" json:"PolicyNames,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BackendServerDescription) Reset()         { *m = BackendServerDescription{} }
func (m *BackendServerDescription) String() string { return proto.CompactTextString(m) }
func (*BackendServerDescription) ProtoMessage()    {}

func (m *BackendServerDescription) GetInstancePort() int64 {
	if m != nil && m.InstancePort != nil {
		return *m.InstancePort
	}
	return 0
}

func (m *BackendServerDescription) GetPolicyNames() []string {
	if m != nil {
		return m.PolicyNames
	}
	return nil
}

type HealthCheck struct {
	HealthyThreshold   *int64  `protobuf:"zigzag64,2,opt,name=HealthyThreshold" json:"HealthyThreshold,omitempty"`
	Interval           *int64  `protobuf:"zigzag64,3,opt,name=Interval" json:"Interval,omitempty"`
	Target             *string `protobuf:"bytes,4,opt,name=Target" json:"Target,omitempty"`
	Timeout            *int64  `protobuf:"zigzag64,5,opt,name=Timeout" json:"Timeout,omitempty"`
	UnhealthyThreshold *int64  `protobuf:"zigzag64,6,opt,name=UnhealthyThreshold" json:"UnhealthyThreshold,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}

func (m *HealthCheck) GetHealthyThreshold() int64 {
	if m != nil && m.HealthyThreshold != nil {
		return *m.HealthyThreshold
	}
	return 0
}

func (m *HealthCheck) GetInterval() int64 {
	if m != nil && m.Interval != nil {
		return *m.Interval
	}
	return 0
}

func (m *HealthCheck) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func (m *HealthCheck) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *HealthCheck) GetUnhealthyThreshold() int64 {
	if m != nil && m.UnhealthyThreshold != nil {
		return *m.UnhealthyThreshold
	}
	return 0
}

type Instance struct {
	InstanceId       *string `protobuf:"bytes,2,opt,name=InstanceId" json:"InstanceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}

func (m *Instance) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

type LBCookieStickinessPolicy struct {
	CookieExpirationPeriod *int64  `protobuf:"zigzag64,2,opt,name=CookieExpirationPeriod" json:"CookieExpirationPeriod,omitempty"`
	PolicyName             *string `protobuf:"bytes,3,opt,name=PolicyName" json:"PolicyName,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *LBCookieStickinessPolicy) Reset()         { *m = LBCookieStickinessPolicy{} }
func (m *LBCookieStickinessPolicy) String() string { return proto.CompactTextString(m) }
func (*LBCookieStickinessPolicy) ProtoMessage()    {}

func (m *LBCookieStickinessPolicy) GetCookieExpirationPeriod() int64 {
	if m != nil && m.CookieExpirationPeriod != nil {
		return *m.CookieExpirationPeriod
	}
	return 0
}

func (m *LBCookieStickinessPolicy) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

type Listener struct {
	InstancePort     *int64  `protobuf:"zigzag64,2,opt,name=InstancePort" json:"InstancePort,omitempty"`
	InstanceProtocol *string `protobuf:"bytes,3,opt,name=InstanceProtocol" json:"InstanceProtocol,omitempty"`
	LoadBalancerPort *int64  `protobuf:"zigzag64,4,opt,name=LoadBalancerPort" json:"LoadBalancerPort,omitempty"`
	Protocol         *string `protobuf:"bytes,5,opt,name=Protocol" json:"Protocol,omitempty"`
	SSLCertificateId *string `protobuf:"bytes,6,opt,name=SSLCertificateId" json:"SSLCertificateId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Listener) Reset()         { *m = Listener{} }
func (m *Listener) String() string { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()    {}

func (m *Listener) GetInstancePort() int64 {
	if m != nil && m.InstancePort != nil {
		return *m.InstancePort
	}
	return 0
}

func (m *Listener) GetInstanceProtocol() string {
	if m != nil && m.InstanceProtocol != nil {
		return *m.InstanceProtocol
	}
	return ""
}

func (m *Listener) GetLoadBalancerPort() int64 {
	if m != nil && m.LoadBalancerPort != nil {
		return *m.LoadBalancerPort
	}
	return 0
}

func (m *Listener) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func (m *Listener) GetSSLCertificateId() string {
	if m != nil && m.SSLCertificateId != nil {
		return *m.SSLCertificateId
	}
	return ""
}

type ListenerDescription struct {
	Listener         *Listener `protobuf:"bytes,2,opt,name=Listener" json:"Listener,omitempty"`
	PolicyNames      []string  `protobuf:"bytes,3,rep,name=PolicyNames" json:"PolicyNames,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListenerDescription) Reset()         { *m = ListenerDescription{} }
func (m *ListenerDescription) String() string { return proto.CompactTextString(m) }
func (*ListenerDescription) ProtoMessage()    {}

func (m *ListenerDescription) GetListener() *Listener {
	if m != nil {
		return m.Listener
	}
	return nil
}

func (m *ListenerDescription) GetPolicyNames() []string {
	if m != nil {
		return m.PolicyNames
	}
	return nil
}

type LoadBalancerDescription struct {
	AvailabilityZones         []string                    `protobuf:"bytes,2,rep,name=AvailabilityZones" json:"AvailabilityZones,omitempty"`
	BackendServerDescriptions []*BackendServerDescription `protobuf:"bytes,3,rep,name=BackendServerDescriptions" json:"BackendServerDescriptions,omitempty"`
	CanonicalHostedZoneName   *string                     `protobuf:"bytes,4,opt,name=CanonicalHostedZoneName" json:"CanonicalHostedZoneName,omitempty"`
	CanonicalHostedZoneNameID *string                     `protobuf:"bytes,5,opt,name=CanonicalHostedZoneNameID" json:"CanonicalHostedZoneNameID,omitempty"`
	CreatedTime               *int64                      `protobuf:"fixed64,6,opt,name=CreatedTime" json:"CreatedTime,omitempty"`
	DNSName                   *string                     `protobuf:"bytes,7,opt,name=DNSName" json:"DNSName,omitempty"`
	HealthCheck               *HealthCheck                `protobuf:"bytes,8,opt,name=HealthCheck" json:"HealthCheck,omitempty"`
	Instances                 []*Instance                 `protobuf:"bytes,9,rep,name=Instances" json:"Instances,omitempty"`
	ListenerDescriptions      []*ListenerDescription      `protobuf:"bytes,10,rep,name=ListenerDescriptions" json:"ListenerDescriptions,omitempty"`
	LoadBalancerName          *string                     `protobuf:"bytes,11,opt,name=LoadBalancerName" json:"LoadBalancerName,omitempty"`
	Policies                  *Policies                   `protobuf:"bytes,12,opt,name=Policies" json:"Policies,omitempty"`
	Scheme                    *string                     `protobuf:"bytes,13,opt,name=Scheme" json:"Scheme,omitempty"`
	SecurityGroups            []string                    `protobuf:"bytes,14,rep,name=SecurityGroups" json:"SecurityGroups,omitempty"`
	SourceSecurityGroup       *SourceSecurityGroup        `protobuf:"bytes,15,opt,name=SourceSecurityGroup" json:"SourceSecurityGroup,omitempty"`
	Subnets                   []string                    `protobuf:"bytes,16,rep,name=Subnets" json:"Subnets,omitempty"`
	VPCId                     *string                     `protobuf:"bytes,17,opt,name=VPCId" json:"VPCId,omitempty"`
	XXX_unrecognized          []byte                      `json:"-"`
}

func (m *LoadBalancerDescription) Reset()         { *m = LoadBalancerDescription{} }
func (m *LoadBalancerDescription) String() string { return proto.CompactTextString(m) }
func (*LoadBalancerDescription) ProtoMessage()    {}

func (m *LoadBalancerDescription) GetAvailabilityZones() []string {
	if m != nil {
		return m.AvailabilityZones
	}
	return nil
}

func (m *LoadBalancerDescription) GetBackendServerDescriptions() []*BackendServerDescription {
	if m != nil {
		return m.BackendServerDescriptions
	}
	return nil
}

func (m *LoadBalancerDescription) GetCanonicalHostedZoneName() string {
	if m != nil && m.CanonicalHostedZoneName != nil {
		return *m.CanonicalHostedZoneName
	}
	return ""
}

func (m *LoadBalancerDescription) GetCanonicalHostedZoneNameID() string {
	if m != nil && m.CanonicalHostedZoneNameID != nil {
		return *m.CanonicalHostedZoneNameID
	}
	return ""
}

func (m *LoadBalancerDescription) GetCreatedTime() int64 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *LoadBalancerDescription) GetDNSName() string {
	if m != nil && m.DNSName != nil {
		return *m.DNSName
	}
	return ""
}

func (m *LoadBalancerDescription) GetHealthCheck() *HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *LoadBalancerDescription) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *LoadBalancerDescription) GetListenerDescriptions() []*ListenerDescription {
	if m != nil {
		return m.ListenerDescriptions
	}
	return nil
}

func (m *LoadBalancerDescription) GetLoadBalancerName() string {
	if m != nil && m.LoadBalancerName != nil {
		return *m.LoadBalancerName
	}
	return ""
}

func (m *LoadBalancerDescription) GetPolicies() *Policies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *LoadBalancerDescription) GetScheme() string {
	if m != nil && m.Scheme != nil {
		return *m.Scheme
	}
	return ""
}

func (m *LoadBalancerDescription) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *LoadBalancerDescription) GetSourceSecurityGroup() *SourceSecurityGroup {
	if m != nil {
		return m.SourceSecurityGroup
	}
	return nil
}

func (m *LoadBalancerDescription) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *LoadBalancerDescription) GetVPCId() string {
	if m != nil && m.VPCId != nil {
		return *m.VPCId
	}
	return ""
}

type Policies struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicy `protobuf:"bytes,2,rep,name=AppCookieStickinessPolicies" json:"AppCookieStickinessPolicies,omitempty"`
	LBCookieStickinessPolicies  []*LBCookieStickinessPolicy  `protobuf:"bytes,3,rep,name=LBCookieStickinessPolicies" json:"LBCookieStickinessPolicies,omitempty"`
	OtherPolicies               []string                     `protobuf:"bytes,4,rep,name=OtherPolicies" json:"OtherPolicies,omitempty"`
	XXX_unrecognized            []byte                       `json:"-"`
}

func (m *Policies) Reset()         { *m = Policies{} }
func (m *Policies) String() string { return proto.CompactTextString(m) }
func (*Policies) ProtoMessage()    {}

func (m *Policies) GetAppCookieStickinessPolicies() []*AppCookieStickinessPolicy {
	if m != nil {
		return m.AppCookieStickinessPolicies
	}
	return nil
}

func (m *Policies) GetLBCookieStickinessPolicies() []*LBCookieStickinessPolicy {
	if m != nil {
		return m.LBCookieStickinessPolicies
	}
	return nil
}

func (m *Policies) GetOtherPolicies() []string {
	if m != nil {
		return m.OtherPolicies
	}
	return nil
}

type SourceSecurityGroup struct {
	GroupName        *string `protobuf:"bytes,2,opt,name=GroupName" json:"GroupName,omitempty"`
	OwnerAlias       *string `protobuf:"bytes,3,opt,name=OwnerAlias" json:"OwnerAlias,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SourceSecurityGroup) Reset()         { *m = SourceSecurityGroup{} }
func (m *SourceSecurityGroup) String() string { return proto.CompactTextString(m) }
func (*SourceSecurityGroup) ProtoMessage()    {}

func (m *SourceSecurityGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *SourceSecurityGroup) GetOwnerAlias() string {
	if m != nil && m.OwnerAlias != nil {
		return *m.OwnerAlias
	}
	return ""
}

func init() {
	proto.RegisterType((*AppCookieStickinessPolicy)(nil), "opsee.aws.elb.AppCookieStickinessPolicy")
	proto.RegisterType((*BackendServerDescription)(nil), "opsee.aws.elb.BackendServerDescription")
	proto.RegisterType((*HealthCheck)(nil), "opsee.aws.elb.HealthCheck")
	proto.RegisterType((*Instance)(nil), "opsee.aws.elb.Instance")
	proto.RegisterType((*LBCookieStickinessPolicy)(nil), "opsee.aws.elb.LBCookieStickinessPolicy")
	proto.RegisterType((*Listener)(nil), "opsee.aws.elb.Listener")
	proto.RegisterType((*ListenerDescription)(nil), "opsee.aws.elb.ListenerDescription")
	proto.RegisterType((*LoadBalancerDescription)(nil), "opsee.aws.elb.LoadBalancerDescription")
	proto.RegisterType((*Policies)(nil), "opsee.aws.elb.Policies")
	proto.RegisterType((*SourceSecurityGroup)(nil), "opsee.aws.elb.SourceSecurityGroup")
}
func (this *AppCookieStickinessPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppCookieStickinessPolicy)
	if !ok {
		that2, ok := that.(AppCookieStickinessPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CookieName != nil && that1.CookieName != nil {
		if *this.CookieName != *that1.CookieName {
			return false
		}
	} else if this.CookieName != nil {
		return false
	} else if that1.CookieName != nil {
		return false
	}
	if this.PolicyName != nil && that1.PolicyName != nil {
		if *this.PolicyName != *that1.PolicyName {
			return false
		}
	} else if this.PolicyName != nil {
		return false
	} else if that1.PolicyName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BackendServerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BackendServerDescription)
	if !ok {
		that2, ok := that.(BackendServerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstancePort != nil && that1.InstancePort != nil {
		if *this.InstancePort != *that1.InstancePort {
			return false
		}
	} else if this.InstancePort != nil {
		return false
	} else if that1.InstancePort != nil {
		return false
	}
	if len(this.PolicyNames) != len(that1.PolicyNames) {
		return false
	}
	for i := range this.PolicyNames {
		if this.PolicyNames[i] != that1.PolicyNames[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheck) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.HealthyThreshold != nil && that1.HealthyThreshold != nil {
		if *this.HealthyThreshold != *that1.HealthyThreshold {
			return false
		}
	} else if this.HealthyThreshold != nil {
		return false
	} else if that1.HealthyThreshold != nil {
		return false
	}
	if this.Interval != nil && that1.Interval != nil {
		if *this.Interval != *that1.Interval {
			return false
		}
	} else if this.Interval != nil {
		return false
	} else if that1.Interval != nil {
		return false
	}
	if this.Target != nil && that1.Target != nil {
		if *this.Target != *that1.Target {
			return false
		}
	} else if this.Target != nil {
		return false
	} else if that1.Target != nil {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.UnhealthyThreshold != nil && that1.UnhealthyThreshold != nil {
		if *this.UnhealthyThreshold != *that1.UnhealthyThreshold {
			return false
		}
	} else if this.UnhealthyThreshold != nil {
		return false
	} else if that1.UnhealthyThreshold != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Instance)
	if !ok {
		that2, ok := that.(Instance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstanceId != nil && that1.InstanceId != nil {
		if *this.InstanceId != *that1.InstanceId {
			return false
		}
	} else if this.InstanceId != nil {
		return false
	} else if that1.InstanceId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LBCookieStickinessPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LBCookieStickinessPolicy)
	if !ok {
		that2, ok := that.(LBCookieStickinessPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CookieExpirationPeriod != nil && that1.CookieExpirationPeriod != nil {
		if *this.CookieExpirationPeriod != *that1.CookieExpirationPeriod {
			return false
		}
	} else if this.CookieExpirationPeriod != nil {
		return false
	} else if that1.CookieExpirationPeriod != nil {
		return false
	}
	if this.PolicyName != nil && that1.PolicyName != nil {
		if *this.PolicyName != *that1.PolicyName {
			return false
		}
	} else if this.PolicyName != nil {
		return false
	} else if that1.PolicyName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Listener) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Listener)
	if !ok {
		that2, ok := that.(Listener)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstancePort != nil && that1.InstancePort != nil {
		if *this.InstancePort != *that1.InstancePort {
			return false
		}
	} else if this.InstancePort != nil {
		return false
	} else if that1.InstancePort != nil {
		return false
	}
	if this.InstanceProtocol != nil && that1.InstanceProtocol != nil {
		if *this.InstanceProtocol != *that1.InstanceProtocol {
			return false
		}
	} else if this.InstanceProtocol != nil {
		return false
	} else if that1.InstanceProtocol != nil {
		return false
	}
	if this.LoadBalancerPort != nil && that1.LoadBalancerPort != nil {
		if *this.LoadBalancerPort != *that1.LoadBalancerPort {
			return false
		}
	} else if this.LoadBalancerPort != nil {
		return false
	} else if that1.LoadBalancerPort != nil {
		return false
	}
	if this.Protocol != nil && that1.Protocol != nil {
		if *this.Protocol != *that1.Protocol {
			return false
		}
	} else if this.Protocol != nil {
		return false
	} else if that1.Protocol != nil {
		return false
	}
	if this.SSLCertificateId != nil && that1.SSLCertificateId != nil {
		if *this.SSLCertificateId != *that1.SSLCertificateId {
			return false
		}
	} else if this.SSLCertificateId != nil {
		return false
	} else if that1.SSLCertificateId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListenerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListenerDescription)
	if !ok {
		that2, ok := that.(ListenerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Listener.Equal(that1.Listener) {
		return false
	}
	if len(this.PolicyNames) != len(that1.PolicyNames) {
		return false
	}
	for i := range this.PolicyNames {
		if this.PolicyNames[i] != that1.PolicyNames[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoadBalancerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadBalancerDescription)
	if !ok {
		that2, ok := that.(LoadBalancerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AvailabilityZones) != len(that1.AvailabilityZones) {
		return false
	}
	for i := range this.AvailabilityZones {
		if this.AvailabilityZones[i] != that1.AvailabilityZones[i] {
			return false
		}
	}
	if len(this.BackendServerDescriptions) != len(that1.BackendServerDescriptions) {
		return false
	}
	for i := range this.BackendServerDescriptions {
		if !this.BackendServerDescriptions[i].Equal(that1.BackendServerDescriptions[i]) {
			return false
		}
	}
	if this.CanonicalHostedZoneName != nil && that1.CanonicalHostedZoneName != nil {
		if *this.CanonicalHostedZoneName != *that1.CanonicalHostedZoneName {
			return false
		}
	} else if this.CanonicalHostedZoneName != nil {
		return false
	} else if that1.CanonicalHostedZoneName != nil {
		return false
	}
	if this.CanonicalHostedZoneNameID != nil && that1.CanonicalHostedZoneNameID != nil {
		if *this.CanonicalHostedZoneNameID != *that1.CanonicalHostedZoneNameID {
			return false
		}
	} else if this.CanonicalHostedZoneNameID != nil {
		return false
	} else if that1.CanonicalHostedZoneNameID != nil {
		return false
	}
	if this.CreatedTime != nil && that1.CreatedTime != nil {
		if *this.CreatedTime != *that1.CreatedTime {
			return false
		}
	} else if this.CreatedTime != nil {
		return false
	} else if that1.CreatedTime != nil {
		return false
	}
	if this.DNSName != nil && that1.DNSName != nil {
		if *this.DNSName != *that1.DNSName {
			return false
		}
	} else if this.DNSName != nil {
		return false
	} else if that1.DNSName != nil {
		return false
	}
	if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if len(this.Instances) != len(that1.Instances) {
		return false
	}
	for i := range this.Instances {
		if !this.Instances[i].Equal(that1.Instances[i]) {
			return false
		}
	}
	if len(this.ListenerDescriptions) != len(that1.ListenerDescriptions) {
		return false
	}
	for i := range this.ListenerDescriptions {
		if !this.ListenerDescriptions[i].Equal(that1.ListenerDescriptions[i]) {
			return false
		}
	}
	if this.LoadBalancerName != nil && that1.LoadBalancerName != nil {
		if *this.LoadBalancerName != *that1.LoadBalancerName {
			return false
		}
	} else if this.LoadBalancerName != nil {
		return false
	} else if that1.LoadBalancerName != nil {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if this.Scheme != nil && that1.Scheme != nil {
		if *this.Scheme != *that1.Scheme {
			return false
		}
	} else if this.Scheme != nil {
		return false
	} else if that1.Scheme != nil {
		return false
	}
	if len(this.SecurityGroups) != len(that1.SecurityGroups) {
		return false
	}
	for i := range this.SecurityGroups {
		if this.SecurityGroups[i] != that1.SecurityGroups[i] {
			return false
		}
	}
	if !this.SourceSecurityGroup.Equal(that1.SourceSecurityGroup) {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if this.Subnets[i] != that1.Subnets[i] {
			return false
		}
	}
	if this.VPCId != nil && that1.VPCId != nil {
		if *this.VPCId != *that1.VPCId {
			return false
		}
	} else if this.VPCId != nil {
		return false
	} else if that1.VPCId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Policies) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Policies)
	if !ok {
		that2, ok := that.(Policies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AppCookieStickinessPolicies) != len(that1.AppCookieStickinessPolicies) {
		return false
	}
	for i := range this.AppCookieStickinessPolicies {
		if !this.AppCookieStickinessPolicies[i].Equal(that1.AppCookieStickinessPolicies[i]) {
			return false
		}
	}
	if len(this.LBCookieStickinessPolicies) != len(that1.LBCookieStickinessPolicies) {
		return false
	}
	for i := range this.LBCookieStickinessPolicies {
		if !this.LBCookieStickinessPolicies[i].Equal(that1.LBCookieStickinessPolicies[i]) {
			return false
		}
	}
	if len(this.OtherPolicies) != len(that1.OtherPolicies) {
		return false
	}
	for i := range this.OtherPolicies {
		if this.OtherPolicies[i] != that1.OtherPolicies[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SourceSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SourceSecurityGroup)
	if !ok {
		that2, ok := that.(SourceSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if this.OwnerAlias != nil && that1.OwnerAlias != nil {
		if *this.OwnerAlias != *that1.OwnerAlias {
			return false
		}
	} else if this.OwnerAlias != nil {
		return false
	} else if that1.OwnerAlias != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AppCookieStickinessPolicyGetter interface {
	GetAppCookieStickinessPolicy() *AppCookieStickinessPolicy
}

var GraphQLAppCookieStickinessPolicyType *github_com_graphql_go_graphql.Object

type BackendServerDescriptionGetter interface {
	GetBackendServerDescription() *BackendServerDescription
}

var GraphQLBackendServerDescriptionType *github_com_graphql_go_graphql.Object

type HealthCheckGetter interface {
	GetHealthCheck() *HealthCheck
}

var GraphQLHealthCheckType *github_com_graphql_go_graphql.Object

type InstanceGetter interface {
	GetInstance() *Instance
}

var GraphQLInstanceType *github_com_graphql_go_graphql.Object

type LBCookieStickinessPolicyGetter interface {
	GetLBCookieStickinessPolicy() *LBCookieStickinessPolicy
}

var GraphQLLBCookieStickinessPolicyType *github_com_graphql_go_graphql.Object

type ListenerGetter interface {
	GetListener() *Listener
}

var GraphQLListenerType *github_com_graphql_go_graphql.Object

type ListenerDescriptionGetter interface {
	GetListenerDescription() *ListenerDescription
}

var GraphQLListenerDescriptionType *github_com_graphql_go_graphql.Object

type LoadBalancerDescriptionGetter interface {
	GetLoadBalancerDescription() *LoadBalancerDescription
}

var GraphQLLoadBalancerDescriptionType *github_com_graphql_go_graphql.Object

type PoliciesGetter interface {
	GetPolicies() *Policies
}

var GraphQLPoliciesType *github_com_graphql_go_graphql.Object

type SourceSecurityGroupGetter interface {
	GetSourceSecurityGroup() *SourceSecurityGroup
}

var GraphQLSourceSecurityGroupType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLAppCookieStickinessPolicyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbAppCookieStickinessPolicy",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CookieName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AppCookieStickinessPolicy)
						if ok {
							if obj.CookieName == nil {
								return nil, nil
							}
							return obj.GetCookieName(), nil
						}
						inter, ok := p.Source.(AppCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetAppCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.CookieName == nil {
								return nil, nil
							}
							return face.GetCookieName(), nil
						}
						return nil, fmt.Errorf("field CookieName not resolved")
					},
				},
				"PolicyName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AppCookieStickinessPolicy)
						if ok {
							if obj.PolicyName == nil {
								return nil, nil
							}
							return obj.GetPolicyName(), nil
						}
						inter, ok := p.Source.(AppCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetAppCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.PolicyName == nil {
								return nil, nil
							}
							return face.GetPolicyName(), nil
						}
						return nil, fmt.Errorf("field PolicyName not resolved")
					},
				},
			}
		}),
	})
	GraphQLBackendServerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbBackendServerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstancePort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BackendServerDescription)
						if ok {
							if obj.InstancePort == nil {
								return nil, nil
							}
							return obj.GetInstancePort(), nil
						}
						inter, ok := p.Source.(BackendServerDescriptionGetter)
						if ok {
							face := inter.GetBackendServerDescription()
							if face == nil {
								return nil, nil
							}
							if face.InstancePort == nil {
								return nil, nil
							}
							return face.GetInstancePort(), nil
						}
						return nil, fmt.Errorf("field InstancePort not resolved")
					},
				},
				"PolicyNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BackendServerDescription)
						if ok {
							return obj.PolicyNames, nil
						}
						inter, ok := p.Source.(BackendServerDescriptionGetter)
						if ok {
							face := inter.GetBackendServerDescription()
							if face == nil {
								return nil, nil
							}
							return face.PolicyNames, nil
						}
						return nil, fmt.Errorf("field PolicyNames not resolved")
					},
				},
			}
		}),
	})
	GraphQLHealthCheckType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbHealthCheck",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"HealthyThreshold": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.HealthyThreshold == nil {
								return nil, nil
							}
							return obj.GetHealthyThreshold(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.HealthyThreshold == nil {
								return nil, nil
							}
							return face.GetHealthyThreshold(), nil
						}
						return nil, fmt.Errorf("field HealthyThreshold not resolved")
					},
				},
				"Interval": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Interval == nil {
								return nil, nil
							}
							return obj.GetInterval(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Interval == nil {
								return nil, nil
							}
							return face.GetInterval(), nil
						}
						return nil, fmt.Errorf("field Interval not resolved")
					},
				},
				"Target": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field Target not resolved")
					},
				},
				"Timeout": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Timeout == nil {
								return nil, nil
							}
							return obj.GetTimeout(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Timeout == nil {
								return nil, nil
							}
							return face.GetTimeout(), nil
						}
						return nil, fmt.Errorf("field Timeout not resolved")
					},
				},
				"UnhealthyThreshold": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.UnhealthyThreshold == nil {
								return nil, nil
							}
							return obj.GetUnhealthyThreshold(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.UnhealthyThreshold == nil {
								return nil, nil
							}
							return face.GetUnhealthyThreshold(), nil
						}
						return nil, fmt.Errorf("field UnhealthyThreshold not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceId == nil {
								return nil, nil
							}
							return obj.GetInstanceId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceId == nil {
								return nil, nil
							}
							return face.GetInstanceId(), nil
						}
						return nil, fmt.Errorf("field InstanceId not resolved")
					},
				},
			}
		}),
	})
	GraphQLLBCookieStickinessPolicyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbLBCookieStickinessPolicy",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CookieExpirationPeriod": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LBCookieStickinessPolicy)
						if ok {
							if obj.CookieExpirationPeriod == nil {
								return nil, nil
							}
							return obj.GetCookieExpirationPeriod(), nil
						}
						inter, ok := p.Source.(LBCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetLBCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.CookieExpirationPeriod == nil {
								return nil, nil
							}
							return face.GetCookieExpirationPeriod(), nil
						}
						return nil, fmt.Errorf("field CookieExpirationPeriod not resolved")
					},
				},
				"PolicyName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LBCookieStickinessPolicy)
						if ok {
							if obj.PolicyName == nil {
								return nil, nil
							}
							return obj.GetPolicyName(), nil
						}
						inter, ok := p.Source.(LBCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetLBCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.PolicyName == nil {
								return nil, nil
							}
							return face.GetPolicyName(), nil
						}
						return nil, fmt.Errorf("field PolicyName not resolved")
					},
				},
			}
		}),
	})
	GraphQLListenerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbListener",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstancePort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.InstancePort == nil {
								return nil, nil
							}
							return obj.GetInstancePort(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.InstancePort == nil {
								return nil, nil
							}
							return face.GetInstancePort(), nil
						}
						return nil, fmt.Errorf("field InstancePort not resolved")
					},
				},
				"InstanceProtocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.InstanceProtocol == nil {
								return nil, nil
							}
							return obj.GetInstanceProtocol(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.InstanceProtocol == nil {
								return nil, nil
							}
							return face.GetInstanceProtocol(), nil
						}
						return nil, fmt.Errorf("field InstanceProtocol not resolved")
					},
				},
				"LoadBalancerPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.LoadBalancerPort == nil {
								return nil, nil
							}
							return obj.GetLoadBalancerPort(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.LoadBalancerPort == nil {
								return nil, nil
							}
							return face.GetLoadBalancerPort(), nil
						}
						return nil, fmt.Errorf("field LoadBalancerPort not resolved")
					},
				},
				"Protocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.Protocol == nil {
								return nil, nil
							}
							return obj.GetProtocol(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.Protocol == nil {
								return nil, nil
							}
							return face.GetProtocol(), nil
						}
						return nil, fmt.Errorf("field Protocol not resolved")
					},
				},
				"SSLCertificateId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.SSLCertificateId == nil {
								return nil, nil
							}
							return obj.GetSSLCertificateId(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.SSLCertificateId == nil {
								return nil, nil
							}
							return face.GetSSLCertificateId(), nil
						}
						return nil, fmt.Errorf("field SSLCertificateId not resolved")
					},
				},
			}
		}),
	})
	GraphQLListenerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbListenerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Listener": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLListenerType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListenerDescription)
						if ok {
							if obj.Listener == nil {
								return nil, nil
							}
							return obj.GetListener(), nil
						}
						inter, ok := p.Source.(ListenerDescriptionGetter)
						if ok {
							face := inter.GetListenerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Listener == nil {
								return nil, nil
							}
							return face.GetListener(), nil
						}
						return nil, fmt.Errorf("field Listener not resolved")
					},
				},
				"PolicyNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListenerDescription)
						if ok {
							return obj.PolicyNames, nil
						}
						inter, ok := p.Source.(ListenerDescriptionGetter)
						if ok {
							face := inter.GetListenerDescription()
							if face == nil {
								return nil, nil
							}
							return face.PolicyNames, nil
						}
						return nil, fmt.Errorf("field PolicyNames not resolved")
					},
				},
			}
		}),
	})
	GraphQLLoadBalancerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbLoadBalancerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AvailabilityZones": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.AvailabilityZones, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.AvailabilityZones, nil
						}
						return nil, fmt.Errorf("field AvailabilityZones not resolved")
					},
				},
				"BackendServerDescriptions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLBackendServerDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.BackendServerDescriptions, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.BackendServerDescriptions, nil
						}
						return nil, fmt.Errorf("field BackendServerDescriptions not resolved")
					},
				},
				"CanonicalHostedZoneName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CanonicalHostedZoneName == nil {
								return nil, nil
							}
							return obj.GetCanonicalHostedZoneName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CanonicalHostedZoneName == nil {
								return nil, nil
							}
							return face.GetCanonicalHostedZoneName(), nil
						}
						return nil, fmt.Errorf("field CanonicalHostedZoneName not resolved")
					},
				},
				"CanonicalHostedZoneNameID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CanonicalHostedZoneNameID == nil {
								return nil, nil
							}
							return obj.GetCanonicalHostedZoneNameID(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CanonicalHostedZoneNameID == nil {
								return nil, nil
							}
							return face.GetCanonicalHostedZoneNameID(), nil
						}
						return nil, fmt.Errorf("field CanonicalHostedZoneNameID not resolved")
					},
				},
				"CreatedTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CreatedTime == nil {
								return nil, nil
							}
							return obj.GetCreatedTime(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CreatedTime == nil {
								return nil, nil
							}
							return face.GetCreatedTime(), nil
						}
						return nil, fmt.Errorf("field CreatedTime not resolved")
					},
				},
				"DNSName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.DNSName == nil {
								return nil, nil
							}
							return obj.GetDNSName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.DNSName == nil {
								return nil, nil
							}
							return face.GetDNSName(), nil
						}
						return nil, fmt.Errorf("field DNSName not resolved")
					},
				},
				"HealthCheck": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHealthCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.HealthCheck == nil {
								return nil, nil
							}
							return obj.GetHealthCheck(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.HealthCheck == nil {
								return nil, nil
							}
							return face.GetHealthCheck(), nil
						}
						return nil, fmt.Errorf("field HealthCheck not resolved")
					},
				},
				"Instances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstanceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.Instances, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.Instances, nil
						}
						return nil, fmt.Errorf("field Instances not resolved")
					},
				},
				"ListenerDescriptions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLListenerDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.ListenerDescriptions, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.ListenerDescriptions, nil
						}
						return nil, fmt.Errorf("field ListenerDescriptions not resolved")
					},
				},
				"LoadBalancerName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.LoadBalancerName == nil {
								return nil, nil
							}
							return obj.GetLoadBalancerName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.LoadBalancerName == nil {
								return nil, nil
							}
							return face.GetLoadBalancerName(), nil
						}
						return nil, fmt.Errorf("field LoadBalancerName not resolved")
					},
				},
				"Policies": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLPoliciesType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.Policies == nil {
								return nil, nil
							}
							return obj.GetPolicies(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Policies == nil {
								return nil, nil
							}
							return face.GetPolicies(), nil
						}
						return nil, fmt.Errorf("field Policies not resolved")
					},
				},
				"Scheme": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.Scheme == nil {
								return nil, nil
							}
							return obj.GetScheme(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Scheme == nil {
								return nil, nil
							}
							return face.GetScheme(), nil
						}
						return nil, fmt.Errorf("field Scheme not resolved")
					},
				},
				"SecurityGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.SecurityGroups, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.SecurityGroups, nil
						}
						return nil, fmt.Errorf("field SecurityGroups not resolved")
					},
				},
				"SourceSecurityGroup": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLSourceSecurityGroupType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.SourceSecurityGroup == nil {
								return nil, nil
							}
							return obj.GetSourceSecurityGroup(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.SourceSecurityGroup == nil {
								return nil, nil
							}
							return face.GetSourceSecurityGroup(), nil
						}
						return nil, fmt.Errorf("field SourceSecurityGroup not resolved")
					},
				},
				"Subnets": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.Subnets, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.Subnets, nil
						}
						return nil, fmt.Errorf("field Subnets not resolved")
					},
				},
				"VPCId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.VPCId == nil {
								return nil, nil
							}
							return obj.GetVPCId(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.VPCId == nil {
								return nil, nil
							}
							return face.GetVPCId(), nil
						}
						return nil, fmt.Errorf("field VPCId not resolved")
					},
				},
			}
		}),
	})
	GraphQLPoliciesType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbPolicies",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AppCookieStickinessPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAppCookieStickinessPolicyType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.AppCookieStickinessPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.AppCookieStickinessPolicies, nil
						}
						return nil, fmt.Errorf("field AppCookieStickinessPolicies not resolved")
					},
				},
				"LBCookieStickinessPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLLBCookieStickinessPolicyType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.LBCookieStickinessPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.LBCookieStickinessPolicies, nil
						}
						return nil, fmt.Errorf("field LBCookieStickinessPolicies not resolved")
					},
				},
				"OtherPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.OtherPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.OtherPolicies, nil
						}
						return nil, fmt.Errorf("field OtherPolicies not resolved")
					},
				},
			}
		}),
	})
	GraphQLSourceSecurityGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbSourceSecurityGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SourceSecurityGroup)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(SourceSecurityGroupGetter)
						if ok {
							face := inter.GetSourceSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
				"OwnerAlias": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SourceSecurityGroup)
						if ok {
							if obj.OwnerAlias == nil {
								return nil, nil
							}
							return obj.GetOwnerAlias(), nil
						}
						inter, ok := p.Source.(SourceSecurityGroupGetter)
						if ok {
							face := inter.GetSourceSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.OwnerAlias == nil {
								return nil, nil
							}
							return face.GetOwnerAlias(), nil
						}
						return nil, fmt.Errorf("field OwnerAlias not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedAppCookieStickinessPolicy(r randyTypes, easy bool) *AppCookieStickinessPolicy {
	this := &AppCookieStickinessPolicy{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.CookieName = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.PolicyName = &v2
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedBackendServerDescription(r randyTypes, easy bool) *BackendServerDescription {
	this := &BackendServerDescription{}
	if r.Intn(10) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.InstancePort = &v3
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.PolicyNames = make([]string, v4)
		for i := 0; i < v4; i++ {
			this.PolicyNames[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedHealthCheck(r randyTypes, easy bool) *HealthCheck {
	this := &HealthCheck{}
	if r.Intn(10) != 0 {
		v5 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.HealthyThreshold = &v5
	}
	if r.Intn(10) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Interval = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.Target = &v7
	}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.Timeout = &v8
	}
	if r.Intn(10) != 0 {
		v9 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.UnhealthyThreshold = &v9
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedInstance(r randyTypes, easy bool) *Instance {
	this := &Instance{}
	if r.Intn(10) != 0 {
		v10 := randStringTypes(r)
		this.InstanceId = &v10
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedLBCookieStickinessPolicy(r randyTypes, easy bool) *LBCookieStickinessPolicy {
	this := &LBCookieStickinessPolicy{}
	if r.Intn(10) != 0 {
		v11 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.CookieExpirationPeriod = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.PolicyName = &v12
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListener(r randyTypes, easy bool) *Listener {
	this := &Listener{}
	if r.Intn(10) != 0 {
		v13 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		this.InstancePort = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringTypes(r)
		this.InstanceProtocol = &v14
	}
	if r.Intn(10) != 0 {
		v15 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.LoadBalancerPort = &v15
	}
	if r.Intn(10) != 0 {
		v16 := randStringTypes(r)
		this.Protocol = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringTypes(r)
		this.SSLCertificateId = &v17
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedListenerDescription(r randyTypes, easy bool) *ListenerDescription {
	this := &ListenerDescription{}
	if r.Intn(10) != 0 {
		this.Listener = NewPopulatedListener(r, easy)
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.PolicyNames = make([]string, v18)
		for i := 0; i < v18; i++ {
			this.PolicyNames[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedLoadBalancerDescription(r randyTypes, easy bool) *LoadBalancerDescription {
	this := &LoadBalancerDescription{}
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.AvailabilityZones = make([]string, v19)
		for i := 0; i < v19; i++ {
			this.AvailabilityZones[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.BackendServerDescriptions = make([]*BackendServerDescription, v20)
		for i := 0; i < v20; i++ {
			this.BackendServerDescriptions[i] = NewPopulatedBackendServerDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v21 := randStringTypes(r)
		this.CanonicalHostedZoneName = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringTypes(r)
		this.CanonicalHostedZoneNameID = &v22
	}
	if r.Intn(10) != 0 {
		v23 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.CreatedTime = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.DNSName = &v24
	}
	if r.Intn(10) != 0 {
		this.HealthCheck = NewPopulatedHealthCheck(r, easy)
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(5)
		this.Instances = make([]*Instance, v25)
		for i := 0; i < v25; i++ {
			this.Instances[i] = NewPopulatedInstance(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.ListenerDescriptions = make([]*ListenerDescription, v26)
		for i := 0; i < v26; i++ {
			this.ListenerDescriptions[i] = NewPopulatedListenerDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.LoadBalancerName = &v27
	}
	if r.Intn(10) != 0 {
		this.Policies = NewPopulatedPolicies(r, easy)
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.Scheme = &v28
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.SecurityGroups = make([]string, v29)
		for i := 0; i < v29; i++ {
			this.SecurityGroups[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		this.SourceSecurityGroup = NewPopulatedSourceSecurityGroup(r, easy)
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(10)
		this.Subnets = make([]string, v30)
		for i := 0; i < v30; i++ {
			this.Subnets[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.VPCId = &v31
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 18)
	}
	return this
}

func NewPopulatedPolicies(r randyTypes, easy bool) *Policies {
	this := &Policies{}
	if r.Intn(10) != 0 {
		v32 := r.Intn(5)
		this.AppCookieStickinessPolicies = make([]*AppCookieStickinessPolicy, v32)
		for i := 0; i < v32; i++ {
			this.AppCookieStickinessPolicies[i] = NewPopulatedAppCookieStickinessPolicy(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(5)
		this.LBCookieStickinessPolicies = make([]*LBCookieStickinessPolicy, v33)
		for i := 0; i < v33; i++ {
			this.LBCookieStickinessPolicies[i] = NewPopulatedLBCookieStickinessPolicy(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(10)
		this.OtherPolicies = make([]string, v34)
		for i := 0; i < v34; i++ {
			this.OtherPolicies[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedSourceSecurityGroup(r randyTypes, easy bool) *SourceSecurityGroup {
	this := &SourceSecurityGroup{}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.GroupName = &v35
	}
	if r.Intn(10) != 0 {
		v36 := randStringTypes(r)
		this.OwnerAlias = &v36
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v37 := r.Intn(100)
	tmps := make([]rune, v37)
	for i := 0; i < v37; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v38 := r.Int63()
		if r.Intn(2) == 0 {
			v38 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v38))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
