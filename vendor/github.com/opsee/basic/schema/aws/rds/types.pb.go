// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package rds is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	AvailabilityZone
	DBInstance
	DBInstanceStatusInfo
	DBParameterGroupStatus
	DBSecurityGroupMembership
	DBSubnetGroup
	Endpoint
	OptionGroupMembership
	PendingModifiedValues
	Subnet
	VpcSecurityGroupMembership
*/
package rds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AvailabilityZone struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AvailabilityZone) Reset()         { *m = AvailabilityZone{} }
func (m *AvailabilityZone) String() string { return proto.CompactTextString(m) }
func (*AvailabilityZone) ProtoMessage()    {}

func (m *AvailabilityZone) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type DBInstance struct {
	AllocatedStorage                      *int64                        `protobuf:"zigzag64,2,opt,name=AllocatedStorage" json:"AllocatedStorage,omitempty"`
	AutoMinorVersionUpgrade               *bool                         `protobuf:"varint,3,opt,name=AutoMinorVersionUpgrade" json:"AutoMinorVersionUpgrade,omitempty"`
	AvailabilityZone                      *string                       `protobuf:"bytes,4,opt,name=AvailabilityZone" json:"AvailabilityZone,omitempty"`
	BackupRetentionPeriod                 *int64                        `protobuf:"zigzag64,5,opt,name=BackupRetentionPeriod" json:"BackupRetentionPeriod,omitempty"`
	CACertificateIdentifier               *string                       `protobuf:"bytes,6,opt,name=CACertificateIdentifier" json:"CACertificateIdentifier,omitempty"`
	CharacterSetName                      *string                       `protobuf:"bytes,7,opt,name=CharacterSetName" json:"CharacterSetName,omitempty"`
	CopyTagsToSnapshot                    *bool                         `protobuf:"varint,8,opt,name=CopyTagsToSnapshot" json:"CopyTagsToSnapshot,omitempty"`
	DBClusterIdentifier                   *string                       `protobuf:"bytes,9,opt,name=DBClusterIdentifier" json:"DBClusterIdentifier,omitempty"`
	DBInstanceClass                       *string                       `protobuf:"bytes,10,opt,name=DBInstanceClass" json:"DBInstanceClass,omitempty"`
	DBInstanceIdentifier                  *string                       `protobuf:"bytes,11,opt,name=DBInstanceIdentifier" json:"DBInstanceIdentifier,omitempty"`
	DBInstanceStatus                      *string                       `protobuf:"bytes,12,opt,name=DBInstanceStatus" json:"DBInstanceStatus,omitempty"`
	DBName                                *string                       `protobuf:"bytes,13,opt,name=DBName" json:"DBName,omitempty"`
	DBParameterGroups                     []*DBParameterGroupStatus     `protobuf:"bytes,14,rep,name=DBParameterGroups" json:"DBParameterGroups,omitempty"`
	DBSecurityGroups                      []*DBSecurityGroupMembership  `protobuf:"bytes,15,rep,name=DBSecurityGroups" json:"DBSecurityGroups,omitempty"`
	DBSubnetGroup                         *DBSubnetGroup                `protobuf:"bytes,16,opt,name=DBSubnetGroup" json:"DBSubnetGroup,omitempty"`
	DbInstancePort                        *int64                        `protobuf:"zigzag64,17,opt,name=DbInstancePort" json:"DbInstancePort,omitempty"`
	DbiResourceId                         *string                       `protobuf:"bytes,18,opt,name=DbiResourceId" json:"DbiResourceId,omitempty"`
	Endpoint                              *Endpoint                     `protobuf:"bytes,19,opt,name=Endpoint" json:"Endpoint,omitempty"`
	Engine                                *string                       `protobuf:"bytes,20,opt,name=Engine" json:"Engine,omitempty"`
	EngineVersion                         *string                       `protobuf:"bytes,21,opt,name=EngineVersion" json:"EngineVersion,omitempty"`
	EnhancedMonitoringResourceArn         *string                       `protobuf:"bytes,22,opt,name=EnhancedMonitoringResourceArn" json:"EnhancedMonitoringResourceArn,omitempty"`
	InstanceCreateTime                    *int64                        `protobuf:"fixed64,23,opt,name=InstanceCreateTime" json:"InstanceCreateTime,omitempty"`
	Iops                                  *int64                        `protobuf:"zigzag64,24,opt,name=Iops" json:"Iops,omitempty"`
	KmsKeyId                              *string                       `protobuf:"bytes,25,opt,name=KmsKeyId" json:"KmsKeyId,omitempty"`
	LatestRestorableTime                  *int64                        `protobuf:"fixed64,26,opt,name=LatestRestorableTime" json:"LatestRestorableTime,omitempty"`
	LicenseModel                          *string                       `protobuf:"bytes,27,opt,name=LicenseModel" json:"LicenseModel,omitempty"`
	MasterUsername                        *string                       `protobuf:"bytes,28,opt,name=MasterUsername" json:"MasterUsername,omitempty"`
	MonitoringInterval                    *int64                        `protobuf:"zigzag64,29,opt,name=MonitoringInterval" json:"MonitoringInterval,omitempty"`
	MonitoringRoleArn                     *string                       `protobuf:"bytes,30,opt,name=MonitoringRoleArn" json:"MonitoringRoleArn,omitempty"`
	MultiAZ                               *bool                         `protobuf:"varint,31,opt,name=MultiAZ" json:"MultiAZ,omitempty"`
	OptionGroupMemberships                []*OptionGroupMembership      `protobuf:"bytes,32,rep,name=OptionGroupMemberships" json:"OptionGroupMemberships,omitempty"`
	PendingModifiedValues                 *PendingModifiedValues        `protobuf:"bytes,33,opt,name=PendingModifiedValues" json:"PendingModifiedValues,omitempty"`
	PreferredBackupWindow                 *string                       `protobuf:"bytes,34,opt,name=PreferredBackupWindow" json:"PreferredBackupWindow,omitempty"`
	PreferredMaintenanceWindow            *string                       `protobuf:"bytes,35,opt,name=PreferredMaintenanceWindow" json:"PreferredMaintenanceWindow,omitempty"`
	PubliclyAccessible                    *bool                         `protobuf:"varint,36,opt,name=PubliclyAccessible" json:"PubliclyAccessible,omitempty"`
	ReadReplicaDBInstanceIdentifiers      []string                      `protobuf:"bytes,37,rep,name=ReadReplicaDBInstanceIdentifiers" json:"ReadReplicaDBInstanceIdentifiers,omitempty"`
	ReadReplicaSourceDBInstanceIdentifier *string                       `protobuf:"bytes,38,opt,name=ReadReplicaSourceDBInstanceIdentifier" json:"ReadReplicaSourceDBInstanceIdentifier,omitempty"`
	SecondaryAvailabilityZone             *string                       `protobuf:"bytes,39,opt,name=SecondaryAvailabilityZone" json:"SecondaryAvailabilityZone,omitempty"`
	StatusInfos                           []*DBInstanceStatusInfo       `protobuf:"bytes,40,rep,name=StatusInfos" json:"StatusInfos,omitempty"`
	StorageEncrypted                      *bool                         `protobuf:"varint,41,opt,name=StorageEncrypted" json:"StorageEncrypted,omitempty"`
	StorageType                           *string                       `protobuf:"bytes,42,opt,name=StorageType" json:"StorageType,omitempty"`
	TdeCredentialArn                      *string                       `protobuf:"bytes,43,opt,name=TdeCredentialArn" json:"TdeCredentialArn,omitempty"`
	VpcSecurityGroups                     []*VpcSecurityGroupMembership `protobuf:"bytes,44,rep,name=VpcSecurityGroups" json:"VpcSecurityGroups,omitempty"`
	XXX_unrecognized                      []byte                        `json:"-"`
}

func (m *DBInstance) Reset()         { *m = DBInstance{} }
func (m *DBInstance) String() string { return proto.CompactTextString(m) }
func (*DBInstance) ProtoMessage()    {}

func (m *DBInstance) GetAllocatedStorage() int64 {
	if m != nil && m.AllocatedStorage != nil {
		return *m.AllocatedStorage
	}
	return 0
}

func (m *DBInstance) GetAutoMinorVersionUpgrade() bool {
	if m != nil && m.AutoMinorVersionUpgrade != nil {
		return *m.AutoMinorVersionUpgrade
	}
	return false
}

func (m *DBInstance) GetAvailabilityZone() string {
	if m != nil && m.AvailabilityZone != nil {
		return *m.AvailabilityZone
	}
	return ""
}

func (m *DBInstance) GetBackupRetentionPeriod() int64 {
	if m != nil && m.BackupRetentionPeriod != nil {
		return *m.BackupRetentionPeriod
	}
	return 0
}

func (m *DBInstance) GetCACertificateIdentifier() string {
	if m != nil && m.CACertificateIdentifier != nil {
		return *m.CACertificateIdentifier
	}
	return ""
}

func (m *DBInstance) GetCharacterSetName() string {
	if m != nil && m.CharacterSetName != nil {
		return *m.CharacterSetName
	}
	return ""
}

func (m *DBInstance) GetCopyTagsToSnapshot() bool {
	if m != nil && m.CopyTagsToSnapshot != nil {
		return *m.CopyTagsToSnapshot
	}
	return false
}

func (m *DBInstance) GetDBClusterIdentifier() string {
	if m != nil && m.DBClusterIdentifier != nil {
		return *m.DBClusterIdentifier
	}
	return ""
}

func (m *DBInstance) GetDBInstanceClass() string {
	if m != nil && m.DBInstanceClass != nil {
		return *m.DBInstanceClass
	}
	return ""
}

func (m *DBInstance) GetDBInstanceIdentifier() string {
	if m != nil && m.DBInstanceIdentifier != nil {
		return *m.DBInstanceIdentifier
	}
	return ""
}

func (m *DBInstance) GetDBInstanceStatus() string {
	if m != nil && m.DBInstanceStatus != nil {
		return *m.DBInstanceStatus
	}
	return ""
}

func (m *DBInstance) GetDBName() string {
	if m != nil && m.DBName != nil {
		return *m.DBName
	}
	return ""
}

func (m *DBInstance) GetDBParameterGroups() []*DBParameterGroupStatus {
	if m != nil {
		return m.DBParameterGroups
	}
	return nil
}

func (m *DBInstance) GetDBSecurityGroups() []*DBSecurityGroupMembership {
	if m != nil {
		return m.DBSecurityGroups
	}
	return nil
}

func (m *DBInstance) GetDBSubnetGroup() *DBSubnetGroup {
	if m != nil {
		return m.DBSubnetGroup
	}
	return nil
}

func (m *DBInstance) GetDbInstancePort() int64 {
	if m != nil && m.DbInstancePort != nil {
		return *m.DbInstancePort
	}
	return 0
}

func (m *DBInstance) GetDbiResourceId() string {
	if m != nil && m.DbiResourceId != nil {
		return *m.DbiResourceId
	}
	return ""
}

func (m *DBInstance) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *DBInstance) GetEngine() string {
	if m != nil && m.Engine != nil {
		return *m.Engine
	}
	return ""
}

func (m *DBInstance) GetEngineVersion() string {
	if m != nil && m.EngineVersion != nil {
		return *m.EngineVersion
	}
	return ""
}

func (m *DBInstance) GetEnhancedMonitoringResourceArn() string {
	if m != nil && m.EnhancedMonitoringResourceArn != nil {
		return *m.EnhancedMonitoringResourceArn
	}
	return ""
}

func (m *DBInstance) GetInstanceCreateTime() int64 {
	if m != nil && m.InstanceCreateTime != nil {
		return *m.InstanceCreateTime
	}
	return 0
}

func (m *DBInstance) GetIops() int64 {
	if m != nil && m.Iops != nil {
		return *m.Iops
	}
	return 0
}

func (m *DBInstance) GetKmsKeyId() string {
	if m != nil && m.KmsKeyId != nil {
		return *m.KmsKeyId
	}
	return ""
}

func (m *DBInstance) GetLatestRestorableTime() int64 {
	if m != nil && m.LatestRestorableTime != nil {
		return *m.LatestRestorableTime
	}
	return 0
}

func (m *DBInstance) GetLicenseModel() string {
	if m != nil && m.LicenseModel != nil {
		return *m.LicenseModel
	}
	return ""
}

func (m *DBInstance) GetMasterUsername() string {
	if m != nil && m.MasterUsername != nil {
		return *m.MasterUsername
	}
	return ""
}

func (m *DBInstance) GetMonitoringInterval() int64 {
	if m != nil && m.MonitoringInterval != nil {
		return *m.MonitoringInterval
	}
	return 0
}

func (m *DBInstance) GetMonitoringRoleArn() string {
	if m != nil && m.MonitoringRoleArn != nil {
		return *m.MonitoringRoleArn
	}
	return ""
}

func (m *DBInstance) GetMultiAZ() bool {
	if m != nil && m.MultiAZ != nil {
		return *m.MultiAZ
	}
	return false
}

func (m *DBInstance) GetOptionGroupMemberships() []*OptionGroupMembership {
	if m != nil {
		return m.OptionGroupMemberships
	}
	return nil
}

func (m *DBInstance) GetPendingModifiedValues() *PendingModifiedValues {
	if m != nil {
		return m.PendingModifiedValues
	}
	return nil
}

func (m *DBInstance) GetPreferredBackupWindow() string {
	if m != nil && m.PreferredBackupWindow != nil {
		return *m.PreferredBackupWindow
	}
	return ""
}

func (m *DBInstance) GetPreferredMaintenanceWindow() string {
	if m != nil && m.PreferredMaintenanceWindow != nil {
		return *m.PreferredMaintenanceWindow
	}
	return ""
}

func (m *DBInstance) GetPubliclyAccessible() bool {
	if m != nil && m.PubliclyAccessible != nil {
		return *m.PubliclyAccessible
	}
	return false
}

func (m *DBInstance) GetReadReplicaDBInstanceIdentifiers() []string {
	if m != nil {
		return m.ReadReplicaDBInstanceIdentifiers
	}
	return nil
}

func (m *DBInstance) GetReadReplicaSourceDBInstanceIdentifier() string {
	if m != nil && m.ReadReplicaSourceDBInstanceIdentifier != nil {
		return *m.ReadReplicaSourceDBInstanceIdentifier
	}
	return ""
}

func (m *DBInstance) GetSecondaryAvailabilityZone() string {
	if m != nil && m.SecondaryAvailabilityZone != nil {
		return *m.SecondaryAvailabilityZone
	}
	return ""
}

func (m *DBInstance) GetStatusInfos() []*DBInstanceStatusInfo {
	if m != nil {
		return m.StatusInfos
	}
	return nil
}

func (m *DBInstance) GetStorageEncrypted() bool {
	if m != nil && m.StorageEncrypted != nil {
		return *m.StorageEncrypted
	}
	return false
}

func (m *DBInstance) GetStorageType() string {
	if m != nil && m.StorageType != nil {
		return *m.StorageType
	}
	return ""
}

func (m *DBInstance) GetTdeCredentialArn() string {
	if m != nil && m.TdeCredentialArn != nil {
		return *m.TdeCredentialArn
	}
	return ""
}

func (m *DBInstance) GetVpcSecurityGroups() []*VpcSecurityGroupMembership {
	if m != nil {
		return m.VpcSecurityGroups
	}
	return nil
}

type DBInstanceStatusInfo struct {
	Message          *string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	Normal           *bool   `protobuf:"varint,3,opt,name=Normal" json:"Normal,omitempty"`
	Status           *string `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
	StatusType       *string `protobuf:"bytes,5,opt,name=StatusType" json:"StatusType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBInstanceStatusInfo) Reset()         { *m = DBInstanceStatusInfo{} }
func (m *DBInstanceStatusInfo) String() string { return proto.CompactTextString(m) }
func (*DBInstanceStatusInfo) ProtoMessage()    {}

func (m *DBInstanceStatusInfo) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *DBInstanceStatusInfo) GetNormal() bool {
	if m != nil && m.Normal != nil {
		return *m.Normal
	}
	return false
}

func (m *DBInstanceStatusInfo) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *DBInstanceStatusInfo) GetStatusType() string {
	if m != nil && m.StatusType != nil {
		return *m.StatusType
	}
	return ""
}

type DBParameterGroupStatus struct {
	DBParameterGroupName *string `protobuf:"bytes,2,opt,name=DBParameterGroupName" json:"DBParameterGroupName,omitempty"`
	ParameterApplyStatus *string `protobuf:"bytes,3,opt,name=ParameterApplyStatus" json:"ParameterApplyStatus,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *DBParameterGroupStatus) Reset()         { *m = DBParameterGroupStatus{} }
func (m *DBParameterGroupStatus) String() string { return proto.CompactTextString(m) }
func (*DBParameterGroupStatus) ProtoMessage()    {}

func (m *DBParameterGroupStatus) GetDBParameterGroupName() string {
	if m != nil && m.DBParameterGroupName != nil {
		return *m.DBParameterGroupName
	}
	return ""
}

func (m *DBParameterGroupStatus) GetParameterApplyStatus() string {
	if m != nil && m.ParameterApplyStatus != nil {
		return *m.ParameterApplyStatus
	}
	return ""
}

type DBSecurityGroupMembership struct {
	DBSecurityGroupName *string `protobuf:"bytes,2,opt,name=DBSecurityGroupName" json:"DBSecurityGroupName,omitempty"`
	Status              *string `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *DBSecurityGroupMembership) Reset()         { *m = DBSecurityGroupMembership{} }
func (m *DBSecurityGroupMembership) String() string { return proto.CompactTextString(m) }
func (*DBSecurityGroupMembership) ProtoMessage()    {}

func (m *DBSecurityGroupMembership) GetDBSecurityGroupName() string {
	if m != nil && m.DBSecurityGroupName != nil {
		return *m.DBSecurityGroupName
	}
	return ""
}

func (m *DBSecurityGroupMembership) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

type DBSubnetGroup struct {
	DBSubnetGroupDescription *string   `protobuf:"bytes,2,opt,name=DBSubnetGroupDescription" json:"DBSubnetGroupDescription,omitempty"`
	DBSubnetGroupName        *string   `protobuf:"bytes,3,opt,name=DBSubnetGroupName" json:"DBSubnetGroupName,omitempty"`
	SubnetGroupStatus        *string   `protobuf:"bytes,4,opt,name=SubnetGroupStatus" json:"SubnetGroupStatus,omitempty"`
	Subnets                  []*Subnet `protobuf:"bytes,5,rep,name=Subnets" json:"Subnets,omitempty"`
	VpcId                    *string   `protobuf:"bytes,6,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized         []byte    `json:"-"`
}

func (m *DBSubnetGroup) Reset()         { *m = DBSubnetGroup{} }
func (m *DBSubnetGroup) String() string { return proto.CompactTextString(m) }
func (*DBSubnetGroup) ProtoMessage()    {}

func (m *DBSubnetGroup) GetDBSubnetGroupDescription() string {
	if m != nil && m.DBSubnetGroupDescription != nil {
		return *m.DBSubnetGroupDescription
	}
	return ""
}

func (m *DBSubnetGroup) GetDBSubnetGroupName() string {
	if m != nil && m.DBSubnetGroupName != nil {
		return *m.DBSubnetGroupName
	}
	return ""
}

func (m *DBSubnetGroup) GetSubnetGroupStatus() string {
	if m != nil && m.SubnetGroupStatus != nil {
		return *m.SubnetGroupStatus
	}
	return ""
}

func (m *DBSubnetGroup) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *DBSubnetGroup) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

type Endpoint struct {
	Address          *string `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	HostedZoneId     *string `protobuf:"bytes,3,opt,name=HostedZoneId" json:"HostedZoneId,omitempty"`
	Port             *int64  `protobuf:"zigzag64,4,opt,name=Port" json:"Port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}

func (m *Endpoint) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Endpoint) GetHostedZoneId() string {
	if m != nil && m.HostedZoneId != nil {
		return *m.HostedZoneId
	}
	return ""
}

func (m *Endpoint) GetPort() int64 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type OptionGroupMembership struct {
	OptionGroupName  *string `protobuf:"bytes,2,opt,name=OptionGroupName" json:"OptionGroupName,omitempty"`
	Status           *string `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OptionGroupMembership) Reset()         { *m = OptionGroupMembership{} }
func (m *OptionGroupMembership) String() string { return proto.CompactTextString(m) }
func (*OptionGroupMembership) ProtoMessage()    {}

func (m *OptionGroupMembership) GetOptionGroupName() string {
	if m != nil && m.OptionGroupName != nil {
		return *m.OptionGroupName
	}
	return ""
}

func (m *OptionGroupMembership) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

type PendingModifiedValues struct {
	AllocatedStorage        *int64  `protobuf:"zigzag64,2,opt,name=AllocatedStorage" json:"AllocatedStorage,omitempty"`
	BackupRetentionPeriod   *int64  `protobuf:"zigzag64,3,opt,name=BackupRetentionPeriod" json:"BackupRetentionPeriod,omitempty"`
	CACertificateIdentifier *string `protobuf:"bytes,4,opt,name=CACertificateIdentifier" json:"CACertificateIdentifier,omitempty"`
	DBInstanceClass         *string `protobuf:"bytes,5,opt,name=DBInstanceClass" json:"DBInstanceClass,omitempty"`
	DBInstanceIdentifier    *string `protobuf:"bytes,6,opt,name=DBInstanceIdentifier" json:"DBInstanceIdentifier,omitempty"`
	EngineVersion           *string `protobuf:"bytes,7,opt,name=EngineVersion" json:"EngineVersion,omitempty"`
	Iops                    *int64  `protobuf:"zigzag64,8,opt,name=Iops" json:"Iops,omitempty"`
	MasterUserPassword      *string `protobuf:"bytes,9,opt,name=MasterUserPassword" json:"MasterUserPassword,omitempty"`
	MultiAZ                 *bool   `protobuf:"varint,10,opt,name=MultiAZ" json:"MultiAZ,omitempty"`
	Port                    *int64  `protobuf:"zigzag64,11,opt,name=Port" json:"Port,omitempty"`
	StorageType             *string `protobuf:"bytes,12,opt,name=StorageType" json:"StorageType,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *PendingModifiedValues) Reset()         { *m = PendingModifiedValues{} }
func (m *PendingModifiedValues) String() string { return proto.CompactTextString(m) }
func (*PendingModifiedValues) ProtoMessage()    {}

func (m *PendingModifiedValues) GetAllocatedStorage() int64 {
	if m != nil && m.AllocatedStorage != nil {
		return *m.AllocatedStorage
	}
	return 0
}

func (m *PendingModifiedValues) GetBackupRetentionPeriod() int64 {
	if m != nil && m.BackupRetentionPeriod != nil {
		return *m.BackupRetentionPeriod
	}
	return 0
}

func (m *PendingModifiedValues) GetCACertificateIdentifier() string {
	if m != nil && m.CACertificateIdentifier != nil {
		return *m.CACertificateIdentifier
	}
	return ""
}

func (m *PendingModifiedValues) GetDBInstanceClass() string {
	if m != nil && m.DBInstanceClass != nil {
		return *m.DBInstanceClass
	}
	return ""
}

func (m *PendingModifiedValues) GetDBInstanceIdentifier() string {
	if m != nil && m.DBInstanceIdentifier != nil {
		return *m.DBInstanceIdentifier
	}
	return ""
}

func (m *PendingModifiedValues) GetEngineVersion() string {
	if m != nil && m.EngineVersion != nil {
		return *m.EngineVersion
	}
	return ""
}

func (m *PendingModifiedValues) GetIops() int64 {
	if m != nil && m.Iops != nil {
		return *m.Iops
	}
	return 0
}

func (m *PendingModifiedValues) GetMasterUserPassword() string {
	if m != nil && m.MasterUserPassword != nil {
		return *m.MasterUserPassword
	}
	return ""
}

func (m *PendingModifiedValues) GetMultiAZ() bool {
	if m != nil && m.MultiAZ != nil {
		return *m.MultiAZ
	}
	return false
}

func (m *PendingModifiedValues) GetPort() int64 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *PendingModifiedValues) GetStorageType() string {
	if m != nil && m.StorageType != nil {
		return *m.StorageType
	}
	return ""
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `protobuf:"bytes,2,opt,name=SubnetAvailabilityZone" json:"SubnetAvailabilityZone,omitempty"`
	SubnetIdentifier       *string           `protobuf:"bytes,3,opt,name=SubnetIdentifier" json:"SubnetIdentifier,omitempty"`
	SubnetStatus           *string           `protobuf:"bytes,4,opt,name=SubnetStatus" json:"SubnetStatus,omitempty"`
	XXX_unrecognized       []byte            `json:"-"`
}

func (m *Subnet) Reset()         { *m = Subnet{} }
func (m *Subnet) String() string { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()    {}

func (m *Subnet) GetSubnetAvailabilityZone() *AvailabilityZone {
	if m != nil {
		return m.SubnetAvailabilityZone
	}
	return nil
}

func (m *Subnet) GetSubnetIdentifier() string {
	if m != nil && m.SubnetIdentifier != nil {
		return *m.SubnetIdentifier
	}
	return ""
}

func (m *Subnet) GetSubnetStatus() string {
	if m != nil && m.SubnetStatus != nil {
		return *m.SubnetStatus
	}
	return ""
}

type VpcSecurityGroupMembership struct {
	Status             *string `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
	VpcSecurityGroupId *string `protobuf:"bytes,3,opt,name=VpcSecurityGroupId" json:"VpcSecurityGroupId,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *VpcSecurityGroupMembership) Reset()         { *m = VpcSecurityGroupMembership{} }
func (m *VpcSecurityGroupMembership) String() string { return proto.CompactTextString(m) }
func (*VpcSecurityGroupMembership) ProtoMessage()    {}

func (m *VpcSecurityGroupMembership) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *VpcSecurityGroupMembership) GetVpcSecurityGroupId() string {
	if m != nil && m.VpcSecurityGroupId != nil {
		return *m.VpcSecurityGroupId
	}
	return ""
}

func init() {
	proto.RegisterType((*AvailabilityZone)(nil), "opsee.aws.rds.AvailabilityZone")
	proto.RegisterType((*DBInstance)(nil), "opsee.aws.rds.DBInstance")
	proto.RegisterType((*DBInstanceStatusInfo)(nil), "opsee.aws.rds.DBInstanceStatusInfo")
	proto.RegisterType((*DBParameterGroupStatus)(nil), "opsee.aws.rds.DBParameterGroupStatus")
	proto.RegisterType((*DBSecurityGroupMembership)(nil), "opsee.aws.rds.DBSecurityGroupMembership")
	proto.RegisterType((*DBSubnetGroup)(nil), "opsee.aws.rds.DBSubnetGroup")
	proto.RegisterType((*Endpoint)(nil), "opsee.aws.rds.Endpoint")
	proto.RegisterType((*OptionGroupMembership)(nil), "opsee.aws.rds.OptionGroupMembership")
	proto.RegisterType((*PendingModifiedValues)(nil), "opsee.aws.rds.PendingModifiedValues")
	proto.RegisterType((*Subnet)(nil), "opsee.aws.rds.Subnet")
	proto.RegisterType((*VpcSecurityGroupMembership)(nil), "opsee.aws.rds.VpcSecurityGroupMembership")
}
func (this *AvailabilityZone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AvailabilityZone)
	if !ok {
		that2, ok := that.(AvailabilityZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DBInstance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DBInstance)
	if !ok {
		that2, ok := that.(DBInstance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AllocatedStorage != nil && that1.AllocatedStorage != nil {
		if *this.AllocatedStorage != *that1.AllocatedStorage {
			return false
		}
	} else if this.AllocatedStorage != nil {
		return false
	} else if that1.AllocatedStorage != nil {
		return false
	}
	if this.AutoMinorVersionUpgrade != nil && that1.AutoMinorVersionUpgrade != nil {
		if *this.AutoMinorVersionUpgrade != *that1.AutoMinorVersionUpgrade {
			return false
		}
	} else if this.AutoMinorVersionUpgrade != nil {
		return false
	} else if that1.AutoMinorVersionUpgrade != nil {
		return false
	}
	if this.AvailabilityZone != nil && that1.AvailabilityZone != nil {
		if *this.AvailabilityZone != *that1.AvailabilityZone {
			return false
		}
	} else if this.AvailabilityZone != nil {
		return false
	} else if that1.AvailabilityZone != nil {
		return false
	}
	if this.BackupRetentionPeriod != nil && that1.BackupRetentionPeriod != nil {
		if *this.BackupRetentionPeriod != *that1.BackupRetentionPeriod {
			return false
		}
	} else if this.BackupRetentionPeriod != nil {
		return false
	} else if that1.BackupRetentionPeriod != nil {
		return false
	}
	if this.CACertificateIdentifier != nil && that1.CACertificateIdentifier != nil {
		if *this.CACertificateIdentifier != *that1.CACertificateIdentifier {
			return false
		}
	} else if this.CACertificateIdentifier != nil {
		return false
	} else if that1.CACertificateIdentifier != nil {
		return false
	}
	if this.CharacterSetName != nil && that1.CharacterSetName != nil {
		if *this.CharacterSetName != *that1.CharacterSetName {
			return false
		}
	} else if this.CharacterSetName != nil {
		return false
	} else if that1.CharacterSetName != nil {
		return false
	}
	if this.CopyTagsToSnapshot != nil && that1.CopyTagsToSnapshot != nil {
		if *this.CopyTagsToSnapshot != *that1.CopyTagsToSnapshot {
			return false
		}
	} else if this.CopyTagsToSnapshot != nil {
		return false
	} else if that1.CopyTagsToSnapshot != nil {
		return false
	}
	if this.DBClusterIdentifier != nil && that1.DBClusterIdentifier != nil {
		if *this.DBClusterIdentifier != *that1.DBClusterIdentifier {
			return false
		}
	} else if this.DBClusterIdentifier != nil {
		return false
	} else if that1.DBClusterIdentifier != nil {
		return false
	}
	if this.DBInstanceClass != nil && that1.DBInstanceClass != nil {
		if *this.DBInstanceClass != *that1.DBInstanceClass {
			return false
		}
	} else if this.DBInstanceClass != nil {
		return false
	} else if that1.DBInstanceClass != nil {
		return false
	}
	if this.DBInstanceIdentifier != nil && that1.DBInstanceIdentifier != nil {
		if *this.DBInstanceIdentifier != *that1.DBInstanceIdentifier {
			return false
		}
	} else if this.DBInstanceIdentifier != nil {
		return false
	} else if that1.DBInstanceIdentifier != nil {
		return false
	}
	if this.DBInstanceStatus != nil && that1.DBInstanceStatus != nil {
		if *this.DBInstanceStatus != *that1.DBInstanceStatus {
			return false
		}
	} else if this.DBInstanceStatus != nil {
		return false
	} else if that1.DBInstanceStatus != nil {
		return false
	}
	if this.DBName != nil && that1.DBName != nil {
		if *this.DBName != *that1.DBName {
			return false
		}
	} else if this.DBName != nil {
		return false
	} else if that1.DBName != nil {
		return false
	}
	if len(this.DBParameterGroups) != len(that1.DBParameterGroups) {
		return false
	}
	for i := range this.DBParameterGroups {
		if !this.DBParameterGroups[i].Equal(that1.DBParameterGroups[i]) {
			return false
		}
	}
	if len(this.DBSecurityGroups) != len(that1.DBSecurityGroups) {
		return false
	}
	for i := range this.DBSecurityGroups {
		if !this.DBSecurityGroups[i].Equal(that1.DBSecurityGroups[i]) {
			return false
		}
	}
	if !this.DBSubnetGroup.Equal(that1.DBSubnetGroup) {
		return false
	}
	if this.DbInstancePort != nil && that1.DbInstancePort != nil {
		if *this.DbInstancePort != *that1.DbInstancePort {
			return false
		}
	} else if this.DbInstancePort != nil {
		return false
	} else if that1.DbInstancePort != nil {
		return false
	}
	if this.DbiResourceId != nil && that1.DbiResourceId != nil {
		if *this.DbiResourceId != *that1.DbiResourceId {
			return false
		}
	} else if this.DbiResourceId != nil {
		return false
	} else if that1.DbiResourceId != nil {
		return false
	}
	if !this.Endpoint.Equal(that1.Endpoint) {
		return false
	}
	if this.Engine != nil && that1.Engine != nil {
		if *this.Engine != *that1.Engine {
			return false
		}
	} else if this.Engine != nil {
		return false
	} else if that1.Engine != nil {
		return false
	}
	if this.EngineVersion != nil && that1.EngineVersion != nil {
		if *this.EngineVersion != *that1.EngineVersion {
			return false
		}
	} else if this.EngineVersion != nil {
		return false
	} else if that1.EngineVersion != nil {
		return false
	}
	if this.EnhancedMonitoringResourceArn != nil && that1.EnhancedMonitoringResourceArn != nil {
		if *this.EnhancedMonitoringResourceArn != *that1.EnhancedMonitoringResourceArn {
			return false
		}
	} else if this.EnhancedMonitoringResourceArn != nil {
		return false
	} else if that1.EnhancedMonitoringResourceArn != nil {
		return false
	}
	if this.InstanceCreateTime != nil && that1.InstanceCreateTime != nil {
		if *this.InstanceCreateTime != *that1.InstanceCreateTime {
			return false
		}
	} else if this.InstanceCreateTime != nil {
		return false
	} else if that1.InstanceCreateTime != nil {
		return false
	}
	if this.Iops != nil && that1.Iops != nil {
		if *this.Iops != *that1.Iops {
			return false
		}
	} else if this.Iops != nil {
		return false
	} else if that1.Iops != nil {
		return false
	}
	if this.KmsKeyId != nil && that1.KmsKeyId != nil {
		if *this.KmsKeyId != *that1.KmsKeyId {
			return false
		}
	} else if this.KmsKeyId != nil {
		return false
	} else if that1.KmsKeyId != nil {
		return false
	}
	if this.LatestRestorableTime != nil && that1.LatestRestorableTime != nil {
		if *this.LatestRestorableTime != *that1.LatestRestorableTime {
			return false
		}
	} else if this.LatestRestorableTime != nil {
		return false
	} else if that1.LatestRestorableTime != nil {
		return false
	}
	if this.LicenseModel != nil && that1.LicenseModel != nil {
		if *this.LicenseModel != *that1.LicenseModel {
			return false
		}
	} else if this.LicenseModel != nil {
		return false
	} else if that1.LicenseModel != nil {
		return false
	}
	if this.MasterUsername != nil && that1.MasterUsername != nil {
		if *this.MasterUsername != *that1.MasterUsername {
			return false
		}
	} else if this.MasterUsername != nil {
		return false
	} else if that1.MasterUsername != nil {
		return false
	}
	if this.MonitoringInterval != nil && that1.MonitoringInterval != nil {
		if *this.MonitoringInterval != *that1.MonitoringInterval {
			return false
		}
	} else if this.MonitoringInterval != nil {
		return false
	} else if that1.MonitoringInterval != nil {
		return false
	}
	if this.MonitoringRoleArn != nil && that1.MonitoringRoleArn != nil {
		if *this.MonitoringRoleArn != *that1.MonitoringRoleArn {
			return false
		}
	} else if this.MonitoringRoleArn != nil {
		return false
	} else if that1.MonitoringRoleArn != nil {
		return false
	}
	if this.MultiAZ != nil && that1.MultiAZ != nil {
		if *this.MultiAZ != *that1.MultiAZ {
			return false
		}
	} else if this.MultiAZ != nil {
		return false
	} else if that1.MultiAZ != nil {
		return false
	}
	if len(this.OptionGroupMemberships) != len(that1.OptionGroupMemberships) {
		return false
	}
	for i := range this.OptionGroupMemberships {
		if !this.OptionGroupMemberships[i].Equal(that1.OptionGroupMemberships[i]) {
			return false
		}
	}
	if !this.PendingModifiedValues.Equal(that1.PendingModifiedValues) {
		return false
	}
	if this.PreferredBackupWindow != nil && that1.PreferredBackupWindow != nil {
		if *this.PreferredBackupWindow != *that1.PreferredBackupWindow {
			return false
		}
	} else if this.PreferredBackupWindow != nil {
		return false
	} else if that1.PreferredBackupWindow != nil {
		return false
	}
	if this.PreferredMaintenanceWindow != nil && that1.PreferredMaintenanceWindow != nil {
		if *this.PreferredMaintenanceWindow != *that1.PreferredMaintenanceWindow {
			return false
		}
	} else if this.PreferredMaintenanceWindow != nil {
		return false
	} else if that1.PreferredMaintenanceWindow != nil {
		return false
	}
	if this.PubliclyAccessible != nil && that1.PubliclyAccessible != nil {
		if *this.PubliclyAccessible != *that1.PubliclyAccessible {
			return false
		}
	} else if this.PubliclyAccessible != nil {
		return false
	} else if that1.PubliclyAccessible != nil {
		return false
	}
	if len(this.ReadReplicaDBInstanceIdentifiers) != len(that1.ReadReplicaDBInstanceIdentifiers) {
		return false
	}
	for i := range this.ReadReplicaDBInstanceIdentifiers {
		if this.ReadReplicaDBInstanceIdentifiers[i] != that1.ReadReplicaDBInstanceIdentifiers[i] {
			return false
		}
	}
	if this.ReadReplicaSourceDBInstanceIdentifier != nil && that1.ReadReplicaSourceDBInstanceIdentifier != nil {
		if *this.ReadReplicaSourceDBInstanceIdentifier != *that1.ReadReplicaSourceDBInstanceIdentifier {
			return false
		}
	} else if this.ReadReplicaSourceDBInstanceIdentifier != nil {
		return false
	} else if that1.ReadReplicaSourceDBInstanceIdentifier != nil {
		return false
	}
	if this.SecondaryAvailabilityZone != nil && that1.SecondaryAvailabilityZone != nil {
		if *this.SecondaryAvailabilityZone != *that1.SecondaryAvailabilityZone {
			return false
		}
	} else if this.SecondaryAvailabilityZone != nil {
		return false
	} else if that1.SecondaryAvailabilityZone != nil {
		return false
	}
	if len(this.StatusInfos) != len(that1.StatusInfos) {
		return false
	}
	for i := range this.StatusInfos {
		if !this.StatusInfos[i].Equal(that1.StatusInfos[i]) {
			return false
		}
	}
	if this.StorageEncrypted != nil && that1.StorageEncrypted != nil {
		if *this.StorageEncrypted != *that1.StorageEncrypted {
			return false
		}
	} else if this.StorageEncrypted != nil {
		return false
	} else if that1.StorageEncrypted != nil {
		return false
	}
	if this.StorageType != nil && that1.StorageType != nil {
		if *this.StorageType != *that1.StorageType {
			return false
		}
	} else if this.StorageType != nil {
		return false
	} else if that1.StorageType != nil {
		return false
	}
	if this.TdeCredentialArn != nil && that1.TdeCredentialArn != nil {
		if *this.TdeCredentialArn != *that1.TdeCredentialArn {
			return false
		}
	} else if this.TdeCredentialArn != nil {
		return false
	} else if that1.TdeCredentialArn != nil {
		return false
	}
	if len(this.VpcSecurityGroups) != len(that1.VpcSecurityGroups) {
		return false
	}
	for i := range this.VpcSecurityGroups {
		if !this.VpcSecurityGroups[i].Equal(that1.VpcSecurityGroups[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DBInstanceStatusInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DBInstanceStatusInfo)
	if !ok {
		that2, ok := that.(DBInstanceStatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if this.Normal != nil && that1.Normal != nil {
		if *this.Normal != *that1.Normal {
			return false
		}
	} else if this.Normal != nil {
		return false
	} else if that1.Normal != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.StatusType != nil && that1.StatusType != nil {
		if *this.StatusType != *that1.StatusType {
			return false
		}
	} else if this.StatusType != nil {
		return false
	} else if that1.StatusType != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DBParameterGroupStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DBParameterGroupStatus)
	if !ok {
		that2, ok := that.(DBParameterGroupStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DBParameterGroupName != nil && that1.DBParameterGroupName != nil {
		if *this.DBParameterGroupName != *that1.DBParameterGroupName {
			return false
		}
	} else if this.DBParameterGroupName != nil {
		return false
	} else if that1.DBParameterGroupName != nil {
		return false
	}
	if this.ParameterApplyStatus != nil && that1.ParameterApplyStatus != nil {
		if *this.ParameterApplyStatus != *that1.ParameterApplyStatus {
			return false
		}
	} else if this.ParameterApplyStatus != nil {
		return false
	} else if that1.ParameterApplyStatus != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DBSecurityGroupMembership) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DBSecurityGroupMembership)
	if !ok {
		that2, ok := that.(DBSecurityGroupMembership)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DBSecurityGroupName != nil && that1.DBSecurityGroupName != nil {
		if *this.DBSecurityGroupName != *that1.DBSecurityGroupName {
			return false
		}
	} else if this.DBSecurityGroupName != nil {
		return false
	} else if that1.DBSecurityGroupName != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DBSubnetGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DBSubnetGroup)
	if !ok {
		that2, ok := that.(DBSubnetGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DBSubnetGroupDescription != nil && that1.DBSubnetGroupDescription != nil {
		if *this.DBSubnetGroupDescription != *that1.DBSubnetGroupDescription {
			return false
		}
	} else if this.DBSubnetGroupDescription != nil {
		return false
	} else if that1.DBSubnetGroupDescription != nil {
		return false
	}
	if this.DBSubnetGroupName != nil && that1.DBSubnetGroupName != nil {
		if *this.DBSubnetGroupName != *that1.DBSubnetGroupName {
			return false
		}
	} else if this.DBSubnetGroupName != nil {
		return false
	} else if that1.DBSubnetGroupName != nil {
		return false
	}
	if this.SubnetGroupStatus != nil && that1.SubnetGroupStatus != nil {
		if *this.SubnetGroupStatus != *that1.SubnetGroupStatus {
			return false
		}
	} else if this.SubnetGroupStatus != nil {
		return false
	} else if that1.SubnetGroupStatus != nil {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Address != nil && that1.Address != nil {
		if *this.Address != *that1.Address {
			return false
		}
	} else if this.Address != nil {
		return false
	} else if that1.Address != nil {
		return false
	}
	if this.HostedZoneId != nil && that1.HostedZoneId != nil {
		if *this.HostedZoneId != *that1.HostedZoneId {
			return false
		}
	} else if this.HostedZoneId != nil {
		return false
	} else if that1.HostedZoneId != nil {
		return false
	}
	if this.Port != nil && that1.Port != nil {
		if *this.Port != *that1.Port {
			return false
		}
	} else if this.Port != nil {
		return false
	} else if that1.Port != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OptionGroupMembership) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OptionGroupMembership)
	if !ok {
		that2, ok := that.(OptionGroupMembership)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OptionGroupName != nil && that1.OptionGroupName != nil {
		if *this.OptionGroupName != *that1.OptionGroupName {
			return false
		}
	} else if this.OptionGroupName != nil {
		return false
	} else if that1.OptionGroupName != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PendingModifiedValues) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PendingModifiedValues)
	if !ok {
		that2, ok := that.(PendingModifiedValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AllocatedStorage != nil && that1.AllocatedStorage != nil {
		if *this.AllocatedStorage != *that1.AllocatedStorage {
			return false
		}
	} else if this.AllocatedStorage != nil {
		return false
	} else if that1.AllocatedStorage != nil {
		return false
	}
	if this.BackupRetentionPeriod != nil && that1.BackupRetentionPeriod != nil {
		if *this.BackupRetentionPeriod != *that1.BackupRetentionPeriod {
			return false
		}
	} else if this.BackupRetentionPeriod != nil {
		return false
	} else if that1.BackupRetentionPeriod != nil {
		return false
	}
	if this.CACertificateIdentifier != nil && that1.CACertificateIdentifier != nil {
		if *this.CACertificateIdentifier != *that1.CACertificateIdentifier {
			return false
		}
	} else if this.CACertificateIdentifier != nil {
		return false
	} else if that1.CACertificateIdentifier != nil {
		return false
	}
	if this.DBInstanceClass != nil && that1.DBInstanceClass != nil {
		if *this.DBInstanceClass != *that1.DBInstanceClass {
			return false
		}
	} else if this.DBInstanceClass != nil {
		return false
	} else if that1.DBInstanceClass != nil {
		return false
	}
	if this.DBInstanceIdentifier != nil && that1.DBInstanceIdentifier != nil {
		if *this.DBInstanceIdentifier != *that1.DBInstanceIdentifier {
			return false
		}
	} else if this.DBInstanceIdentifier != nil {
		return false
	} else if that1.DBInstanceIdentifier != nil {
		return false
	}
	if this.EngineVersion != nil && that1.EngineVersion != nil {
		if *this.EngineVersion != *that1.EngineVersion {
			return false
		}
	} else if this.EngineVersion != nil {
		return false
	} else if that1.EngineVersion != nil {
		return false
	}
	if this.Iops != nil && that1.Iops != nil {
		if *this.Iops != *that1.Iops {
			return false
		}
	} else if this.Iops != nil {
		return false
	} else if that1.Iops != nil {
		return false
	}
	if this.MasterUserPassword != nil && that1.MasterUserPassword != nil {
		if *this.MasterUserPassword != *that1.MasterUserPassword {
			return false
		}
	} else if this.MasterUserPassword != nil {
		return false
	} else if that1.MasterUserPassword != nil {
		return false
	}
	if this.MultiAZ != nil && that1.MultiAZ != nil {
		if *this.MultiAZ != *that1.MultiAZ {
			return false
		}
	} else if this.MultiAZ != nil {
		return false
	} else if that1.MultiAZ != nil {
		return false
	}
	if this.Port != nil && that1.Port != nil {
		if *this.Port != *that1.Port {
			return false
		}
	} else if this.Port != nil {
		return false
	} else if that1.Port != nil {
		return false
	}
	if this.StorageType != nil && that1.StorageType != nil {
		if *this.StorageType != *that1.StorageType {
			return false
		}
	} else if this.StorageType != nil {
		return false
	} else if that1.StorageType != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subnet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subnet)
	if !ok {
		that2, ok := that.(Subnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SubnetAvailabilityZone.Equal(that1.SubnetAvailabilityZone) {
		return false
	}
	if this.SubnetIdentifier != nil && that1.SubnetIdentifier != nil {
		if *this.SubnetIdentifier != *that1.SubnetIdentifier {
			return false
		}
	} else if this.SubnetIdentifier != nil {
		return false
	} else if that1.SubnetIdentifier != nil {
		return false
	}
	if this.SubnetStatus != nil && that1.SubnetStatus != nil {
		if *this.SubnetStatus != *that1.SubnetStatus {
			return false
		}
	} else if this.SubnetStatus != nil {
		return false
	} else if that1.SubnetStatus != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VpcSecurityGroupMembership) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VpcSecurityGroupMembership)
	if !ok {
		that2, ok := that.(VpcSecurityGroupMembership)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.VpcSecurityGroupId != nil && that1.VpcSecurityGroupId != nil {
		if *this.VpcSecurityGroupId != *that1.VpcSecurityGroupId {
			return false
		}
	} else if this.VpcSecurityGroupId != nil {
		return false
	} else if that1.VpcSecurityGroupId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AvailabilityZoneGetter interface {
	GetAvailabilityZone() *AvailabilityZone
}

var GraphQLAvailabilityZoneType *github_com_graphql_go_graphql.Object

type DBInstanceGetter interface {
	GetDBInstance() *DBInstance
}

var GraphQLDBInstanceType *github_com_graphql_go_graphql.Object

type DBInstanceStatusInfoGetter interface {
	GetDBInstanceStatusInfo() *DBInstanceStatusInfo
}

var GraphQLDBInstanceStatusInfoType *github_com_graphql_go_graphql.Object

type DBParameterGroupStatusGetter interface {
	GetDBParameterGroupStatus() *DBParameterGroupStatus
}

var GraphQLDBParameterGroupStatusType *github_com_graphql_go_graphql.Object

type DBSecurityGroupMembershipGetter interface {
	GetDBSecurityGroupMembership() *DBSecurityGroupMembership
}

var GraphQLDBSecurityGroupMembershipType *github_com_graphql_go_graphql.Object

type DBSubnetGroupGetter interface {
	GetDBSubnetGroup() *DBSubnetGroup
}

var GraphQLDBSubnetGroupType *github_com_graphql_go_graphql.Object

type EndpointGetter interface {
	GetEndpoint() *Endpoint
}

var GraphQLEndpointType *github_com_graphql_go_graphql.Object

type OptionGroupMembershipGetter interface {
	GetOptionGroupMembership() *OptionGroupMembership
}

var GraphQLOptionGroupMembershipType *github_com_graphql_go_graphql.Object

type PendingModifiedValuesGetter interface {
	GetPendingModifiedValues() *PendingModifiedValues
}

var GraphQLPendingModifiedValuesType *github_com_graphql_go_graphql.Object

type SubnetGetter interface {
	GetSubnet() *Subnet
}

var GraphQLSubnetType *github_com_graphql_go_graphql.Object

type VpcSecurityGroupMembershipGetter interface {
	GetVpcSecurityGroupMembership() *VpcSecurityGroupMembership
}

var GraphQLVpcSecurityGroupMembershipType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLAvailabilityZoneType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsAvailabilityZone",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AvailabilityZone)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(AvailabilityZoneGetter)
						if ok {
							face := inter.GetAvailabilityZone()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
			}
		}),
	})
	GraphQLDBInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsDBInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AllocatedStorage": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.AllocatedStorage == nil {
								return nil, nil
							}
							return obj.GetAllocatedStorage(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.AllocatedStorage == nil {
								return nil, nil
							}
							return face.GetAllocatedStorage(), nil
						}
						return nil, fmt.Errorf("field AllocatedStorage not resolved")
					},
				},
				"AutoMinorVersionUpgrade": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.AutoMinorVersionUpgrade == nil {
								return nil, nil
							}
							return obj.GetAutoMinorVersionUpgrade(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.AutoMinorVersionUpgrade == nil {
								return nil, nil
							}
							return face.GetAutoMinorVersionUpgrade(), nil
						}
						return nil, fmt.Errorf("field AutoMinorVersionUpgrade not resolved")
					},
				},
				"AvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.AvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetAvailabilityZone(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.AvailabilityZone == nil {
								return nil, nil
							}
							return face.GetAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field AvailabilityZone not resolved")
					},
				},
				"BackupRetentionPeriod": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.BackupRetentionPeriod == nil {
								return nil, nil
							}
							return obj.GetBackupRetentionPeriod(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.BackupRetentionPeriod == nil {
								return nil, nil
							}
							return face.GetBackupRetentionPeriod(), nil
						}
						return nil, fmt.Errorf("field BackupRetentionPeriod not resolved")
					},
				},
				"CACertificateIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.CACertificateIdentifier == nil {
								return nil, nil
							}
							return obj.GetCACertificateIdentifier(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.CACertificateIdentifier == nil {
								return nil, nil
							}
							return face.GetCACertificateIdentifier(), nil
						}
						return nil, fmt.Errorf("field CACertificateIdentifier not resolved")
					},
				},
				"CharacterSetName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.CharacterSetName == nil {
								return nil, nil
							}
							return obj.GetCharacterSetName(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.CharacterSetName == nil {
								return nil, nil
							}
							return face.GetCharacterSetName(), nil
						}
						return nil, fmt.Errorf("field CharacterSetName not resolved")
					},
				},
				"CopyTagsToSnapshot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.CopyTagsToSnapshot == nil {
								return nil, nil
							}
							return obj.GetCopyTagsToSnapshot(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.CopyTagsToSnapshot == nil {
								return nil, nil
							}
							return face.GetCopyTagsToSnapshot(), nil
						}
						return nil, fmt.Errorf("field CopyTagsToSnapshot not resolved")
					},
				},
				"DBClusterIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBClusterIdentifier == nil {
								return nil, nil
							}
							return obj.GetDBClusterIdentifier(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBClusterIdentifier == nil {
								return nil, nil
							}
							return face.GetDBClusterIdentifier(), nil
						}
						return nil, fmt.Errorf("field DBClusterIdentifier not resolved")
					},
				},
				"DBInstanceClass": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBInstanceClass == nil {
								return nil, nil
							}
							return obj.GetDBInstanceClass(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBInstanceClass == nil {
								return nil, nil
							}
							return face.GetDBInstanceClass(), nil
						}
						return nil, fmt.Errorf("field DBInstanceClass not resolved")
					},
				},
				"DBInstanceIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBInstanceIdentifier == nil {
								return nil, nil
							}
							return obj.GetDBInstanceIdentifier(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBInstanceIdentifier == nil {
								return nil, nil
							}
							return face.GetDBInstanceIdentifier(), nil
						}
						return nil, fmt.Errorf("field DBInstanceIdentifier not resolved")
					},
				},
				"DBInstanceStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBInstanceStatus == nil {
								return nil, nil
							}
							return obj.GetDBInstanceStatus(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBInstanceStatus == nil {
								return nil, nil
							}
							return face.GetDBInstanceStatus(), nil
						}
						return nil, fmt.Errorf("field DBInstanceStatus not resolved")
					},
				},
				"DBName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBName == nil {
								return nil, nil
							}
							return obj.GetDBName(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBName == nil {
								return nil, nil
							}
							return face.GetDBName(), nil
						}
						return nil, fmt.Errorf("field DBName not resolved")
					},
				},
				"DBParameterGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDBParameterGroupStatusType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.DBParameterGroups, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.DBParameterGroups, nil
						}
						return nil, fmt.Errorf("field DBParameterGroups not resolved")
					},
				},
				"DBSecurityGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDBSecurityGroupMembershipType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.DBSecurityGroups, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.DBSecurityGroups, nil
						}
						return nil, fmt.Errorf("field DBSecurityGroups not resolved")
					},
				},
				"DBSubnetGroup": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLDBSubnetGroupType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DBSubnetGroup == nil {
								return nil, nil
							}
							return obj.GetDBSubnetGroup(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DBSubnetGroup == nil {
								return nil, nil
							}
							return face.GetDBSubnetGroup(), nil
						}
						return nil, fmt.Errorf("field DBSubnetGroup not resolved")
					},
				},
				"DbInstancePort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DbInstancePort == nil {
								return nil, nil
							}
							return obj.GetDbInstancePort(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DbInstancePort == nil {
								return nil, nil
							}
							return face.GetDbInstancePort(), nil
						}
						return nil, fmt.Errorf("field DbInstancePort not resolved")
					},
				},
				"DbiResourceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.DbiResourceId == nil {
								return nil, nil
							}
							return obj.GetDbiResourceId(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.DbiResourceId == nil {
								return nil, nil
							}
							return face.GetDbiResourceId(), nil
						}
						return nil, fmt.Errorf("field DbiResourceId not resolved")
					},
				},
				"Endpoint": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEndpointType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.Endpoint == nil {
								return nil, nil
							}
							return obj.GetEndpoint(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.Endpoint == nil {
								return nil, nil
							}
							return face.GetEndpoint(), nil
						}
						return nil, fmt.Errorf("field Endpoint not resolved")
					},
				},
				"Engine": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.Engine == nil {
								return nil, nil
							}
							return obj.GetEngine(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.Engine == nil {
								return nil, nil
							}
							return face.GetEngine(), nil
						}
						return nil, fmt.Errorf("field Engine not resolved")
					},
				},
				"EngineVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.EngineVersion == nil {
								return nil, nil
							}
							return obj.GetEngineVersion(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.EngineVersion == nil {
								return nil, nil
							}
							return face.GetEngineVersion(), nil
						}
						return nil, fmt.Errorf("field EngineVersion not resolved")
					},
				},
				"EnhancedMonitoringResourceArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.EnhancedMonitoringResourceArn == nil {
								return nil, nil
							}
							return obj.GetEnhancedMonitoringResourceArn(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.EnhancedMonitoringResourceArn == nil {
								return nil, nil
							}
							return face.GetEnhancedMonitoringResourceArn(), nil
						}
						return nil, fmt.Errorf("field EnhancedMonitoringResourceArn not resolved")
					},
				},
				"InstanceCreateTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.InstanceCreateTime == nil {
								return nil, nil
							}
							return obj.GetInstanceCreateTime(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceCreateTime == nil {
								return nil, nil
							}
							return face.GetInstanceCreateTime(), nil
						}
						return nil, fmt.Errorf("field InstanceCreateTime not resolved")
					},
				},
				"Iops": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.Iops == nil {
								return nil, nil
							}
							return obj.GetIops(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.Iops == nil {
								return nil, nil
							}
							return face.GetIops(), nil
						}
						return nil, fmt.Errorf("field Iops not resolved")
					},
				},
				"KmsKeyId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.KmsKeyId == nil {
								return nil, nil
							}
							return obj.GetKmsKeyId(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.KmsKeyId == nil {
								return nil, nil
							}
							return face.GetKmsKeyId(), nil
						}
						return nil, fmt.Errorf("field KmsKeyId not resolved")
					},
				},
				"LatestRestorableTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.LatestRestorableTime == nil {
								return nil, nil
							}
							return obj.GetLatestRestorableTime(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.LatestRestorableTime == nil {
								return nil, nil
							}
							return face.GetLatestRestorableTime(), nil
						}
						return nil, fmt.Errorf("field LatestRestorableTime not resolved")
					},
				},
				"LicenseModel": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.LicenseModel == nil {
								return nil, nil
							}
							return obj.GetLicenseModel(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.LicenseModel == nil {
								return nil, nil
							}
							return face.GetLicenseModel(), nil
						}
						return nil, fmt.Errorf("field LicenseModel not resolved")
					},
				},
				"MasterUsername": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.MasterUsername == nil {
								return nil, nil
							}
							return obj.GetMasterUsername(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.MasterUsername == nil {
								return nil, nil
							}
							return face.GetMasterUsername(), nil
						}
						return nil, fmt.Errorf("field MasterUsername not resolved")
					},
				},
				"MonitoringInterval": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.MonitoringInterval == nil {
								return nil, nil
							}
							return obj.GetMonitoringInterval(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.MonitoringInterval == nil {
								return nil, nil
							}
							return face.GetMonitoringInterval(), nil
						}
						return nil, fmt.Errorf("field MonitoringInterval not resolved")
					},
				},
				"MonitoringRoleArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.MonitoringRoleArn == nil {
								return nil, nil
							}
							return obj.GetMonitoringRoleArn(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.MonitoringRoleArn == nil {
								return nil, nil
							}
							return face.GetMonitoringRoleArn(), nil
						}
						return nil, fmt.Errorf("field MonitoringRoleArn not resolved")
					},
				},
				"MultiAZ": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.MultiAZ == nil {
								return nil, nil
							}
							return obj.GetMultiAZ(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.MultiAZ == nil {
								return nil, nil
							}
							return face.GetMultiAZ(), nil
						}
						return nil, fmt.Errorf("field MultiAZ not resolved")
					},
				},
				"OptionGroupMemberships": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLOptionGroupMembershipType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.OptionGroupMemberships, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.OptionGroupMemberships, nil
						}
						return nil, fmt.Errorf("field OptionGroupMemberships not resolved")
					},
				},
				"PendingModifiedValues": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLPendingModifiedValuesType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.PendingModifiedValues == nil {
								return nil, nil
							}
							return obj.GetPendingModifiedValues(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.PendingModifiedValues == nil {
								return nil, nil
							}
							return face.GetPendingModifiedValues(), nil
						}
						return nil, fmt.Errorf("field PendingModifiedValues not resolved")
					},
				},
				"PreferredBackupWindow": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.PreferredBackupWindow == nil {
								return nil, nil
							}
							return obj.GetPreferredBackupWindow(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.PreferredBackupWindow == nil {
								return nil, nil
							}
							return face.GetPreferredBackupWindow(), nil
						}
						return nil, fmt.Errorf("field PreferredBackupWindow not resolved")
					},
				},
				"PreferredMaintenanceWindow": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.PreferredMaintenanceWindow == nil {
								return nil, nil
							}
							return obj.GetPreferredMaintenanceWindow(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.PreferredMaintenanceWindow == nil {
								return nil, nil
							}
							return face.GetPreferredMaintenanceWindow(), nil
						}
						return nil, fmt.Errorf("field PreferredMaintenanceWindow not resolved")
					},
				},
				"PubliclyAccessible": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.PubliclyAccessible == nil {
								return nil, nil
							}
							return obj.GetPubliclyAccessible(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.PubliclyAccessible == nil {
								return nil, nil
							}
							return face.GetPubliclyAccessible(), nil
						}
						return nil, fmt.Errorf("field PubliclyAccessible not resolved")
					},
				},
				"ReadReplicaDBInstanceIdentifiers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.ReadReplicaDBInstanceIdentifiers, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.ReadReplicaDBInstanceIdentifiers, nil
						}
						return nil, fmt.Errorf("field ReadReplicaDBInstanceIdentifiers not resolved")
					},
				},
				"ReadReplicaSourceDBInstanceIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.ReadReplicaSourceDBInstanceIdentifier == nil {
								return nil, nil
							}
							return obj.GetReadReplicaSourceDBInstanceIdentifier(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.ReadReplicaSourceDBInstanceIdentifier == nil {
								return nil, nil
							}
							return face.GetReadReplicaSourceDBInstanceIdentifier(), nil
						}
						return nil, fmt.Errorf("field ReadReplicaSourceDBInstanceIdentifier not resolved")
					},
				},
				"SecondaryAvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.SecondaryAvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetSecondaryAvailabilityZone(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.SecondaryAvailabilityZone == nil {
								return nil, nil
							}
							return face.GetSecondaryAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field SecondaryAvailabilityZone not resolved")
					},
				},
				"StatusInfos": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDBInstanceStatusInfoType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.StatusInfos, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.StatusInfos, nil
						}
						return nil, fmt.Errorf("field StatusInfos not resolved")
					},
				},
				"StorageEncrypted": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.StorageEncrypted == nil {
								return nil, nil
							}
							return obj.GetStorageEncrypted(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.StorageEncrypted == nil {
								return nil, nil
							}
							return face.GetStorageEncrypted(), nil
						}
						return nil, fmt.Errorf("field StorageEncrypted not resolved")
					},
				},
				"StorageType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.StorageType == nil {
								return nil, nil
							}
							return obj.GetStorageType(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.StorageType == nil {
								return nil, nil
							}
							return face.GetStorageType(), nil
						}
						return nil, fmt.Errorf("field StorageType not resolved")
					},
				},
				"TdeCredentialArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							if obj.TdeCredentialArn == nil {
								return nil, nil
							}
							return obj.GetTdeCredentialArn(), nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							if face.TdeCredentialArn == nil {
								return nil, nil
							}
							return face.GetTdeCredentialArn(), nil
						}
						return nil, fmt.Errorf("field TdeCredentialArn not resolved")
					},
				},
				"VpcSecurityGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLVpcSecurityGroupMembershipType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstance)
						if ok {
							return obj.VpcSecurityGroups, nil
						}
						inter, ok := p.Source.(DBInstanceGetter)
						if ok {
							face := inter.GetDBInstance()
							if face == nil {
								return nil, nil
							}
							return face.VpcSecurityGroups, nil
						}
						return nil, fmt.Errorf("field VpcSecurityGroups not resolved")
					},
				},
			}
		}),
	})
	GraphQLDBInstanceStatusInfoType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsDBInstanceStatusInfo",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Message": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstanceStatusInfo)
						if ok {
							if obj.Message == nil {
								return nil, nil
							}
							return obj.GetMessage(), nil
						}
						inter, ok := p.Source.(DBInstanceStatusInfoGetter)
						if ok {
							face := inter.GetDBInstanceStatusInfo()
							if face == nil {
								return nil, nil
							}
							if face.Message == nil {
								return nil, nil
							}
							return face.GetMessage(), nil
						}
						return nil, fmt.Errorf("field Message not resolved")
					},
				},
				"Normal": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstanceStatusInfo)
						if ok {
							if obj.Normal == nil {
								return nil, nil
							}
							return obj.GetNormal(), nil
						}
						inter, ok := p.Source.(DBInstanceStatusInfoGetter)
						if ok {
							face := inter.GetDBInstanceStatusInfo()
							if face == nil {
								return nil, nil
							}
							if face.Normal == nil {
								return nil, nil
							}
							return face.GetNormal(), nil
						}
						return nil, fmt.Errorf("field Normal not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstanceStatusInfo)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(DBInstanceStatusInfoGetter)
						if ok {
							face := inter.GetDBInstanceStatusInfo()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"StatusType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBInstanceStatusInfo)
						if ok {
							if obj.StatusType == nil {
								return nil, nil
							}
							return obj.GetStatusType(), nil
						}
						inter, ok := p.Source.(DBInstanceStatusInfoGetter)
						if ok {
							face := inter.GetDBInstanceStatusInfo()
							if face == nil {
								return nil, nil
							}
							if face.StatusType == nil {
								return nil, nil
							}
							return face.GetStatusType(), nil
						}
						return nil, fmt.Errorf("field StatusType not resolved")
					},
				},
			}
		}),
	})
	GraphQLDBParameterGroupStatusType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsDBParameterGroupStatus",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DBParameterGroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBParameterGroupStatus)
						if ok {
							if obj.DBParameterGroupName == nil {
								return nil, nil
							}
							return obj.GetDBParameterGroupName(), nil
						}
						inter, ok := p.Source.(DBParameterGroupStatusGetter)
						if ok {
							face := inter.GetDBParameterGroupStatus()
							if face == nil {
								return nil, nil
							}
							if face.DBParameterGroupName == nil {
								return nil, nil
							}
							return face.GetDBParameterGroupName(), nil
						}
						return nil, fmt.Errorf("field DBParameterGroupName not resolved")
					},
				},
				"ParameterApplyStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBParameterGroupStatus)
						if ok {
							if obj.ParameterApplyStatus == nil {
								return nil, nil
							}
							return obj.GetParameterApplyStatus(), nil
						}
						inter, ok := p.Source.(DBParameterGroupStatusGetter)
						if ok {
							face := inter.GetDBParameterGroupStatus()
							if face == nil {
								return nil, nil
							}
							if face.ParameterApplyStatus == nil {
								return nil, nil
							}
							return face.GetParameterApplyStatus(), nil
						}
						return nil, fmt.Errorf("field ParameterApplyStatus not resolved")
					},
				},
			}
		}),
	})
	GraphQLDBSecurityGroupMembershipType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsDBSecurityGroupMembership",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DBSecurityGroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSecurityGroupMembership)
						if ok {
							if obj.DBSecurityGroupName == nil {
								return nil, nil
							}
							return obj.GetDBSecurityGroupName(), nil
						}
						inter, ok := p.Source.(DBSecurityGroupMembershipGetter)
						if ok {
							face := inter.GetDBSecurityGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.DBSecurityGroupName == nil {
								return nil, nil
							}
							return face.GetDBSecurityGroupName(), nil
						}
						return nil, fmt.Errorf("field DBSecurityGroupName not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSecurityGroupMembership)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(DBSecurityGroupMembershipGetter)
						if ok {
							face := inter.GetDBSecurityGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
			}
		}),
	})
	GraphQLDBSubnetGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsDBSubnetGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DBSubnetGroupDescription": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSubnetGroup)
						if ok {
							if obj.DBSubnetGroupDescription == nil {
								return nil, nil
							}
							return obj.GetDBSubnetGroupDescription(), nil
						}
						inter, ok := p.Source.(DBSubnetGroupGetter)
						if ok {
							face := inter.GetDBSubnetGroup()
							if face == nil {
								return nil, nil
							}
							if face.DBSubnetGroupDescription == nil {
								return nil, nil
							}
							return face.GetDBSubnetGroupDescription(), nil
						}
						return nil, fmt.Errorf("field DBSubnetGroupDescription not resolved")
					},
				},
				"DBSubnetGroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSubnetGroup)
						if ok {
							if obj.DBSubnetGroupName == nil {
								return nil, nil
							}
							return obj.GetDBSubnetGroupName(), nil
						}
						inter, ok := p.Source.(DBSubnetGroupGetter)
						if ok {
							face := inter.GetDBSubnetGroup()
							if face == nil {
								return nil, nil
							}
							if face.DBSubnetGroupName == nil {
								return nil, nil
							}
							return face.GetDBSubnetGroupName(), nil
						}
						return nil, fmt.Errorf("field DBSubnetGroupName not resolved")
					},
				},
				"SubnetGroupStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSubnetGroup)
						if ok {
							if obj.SubnetGroupStatus == nil {
								return nil, nil
							}
							return obj.GetSubnetGroupStatus(), nil
						}
						inter, ok := p.Source.(DBSubnetGroupGetter)
						if ok {
							face := inter.GetDBSubnetGroup()
							if face == nil {
								return nil, nil
							}
							if face.SubnetGroupStatus == nil {
								return nil, nil
							}
							return face.GetSubnetGroupStatus(), nil
						}
						return nil, fmt.Errorf("field SubnetGroupStatus not resolved")
					},
				},
				"Subnets": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLSubnetType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSubnetGroup)
						if ok {
							return obj.Subnets, nil
						}
						inter, ok := p.Source.(DBSubnetGroupGetter)
						if ok {
							face := inter.GetDBSubnetGroup()
							if face == nil {
								return nil, nil
							}
							return face.Subnets, nil
						}
						return nil, fmt.Errorf("field Subnets not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DBSubnetGroup)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(DBSubnetGroupGetter)
						if ok {
							face := inter.GetDBSubnetGroup()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
	GraphQLEndpointType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsEndpoint",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Address": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Endpoint)
						if ok {
							if obj.Address == nil {
								return nil, nil
							}
							return obj.GetAddress(), nil
						}
						inter, ok := p.Source.(EndpointGetter)
						if ok {
							face := inter.GetEndpoint()
							if face == nil {
								return nil, nil
							}
							if face.Address == nil {
								return nil, nil
							}
							return face.GetAddress(), nil
						}
						return nil, fmt.Errorf("field Address not resolved")
					},
				},
				"HostedZoneId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Endpoint)
						if ok {
							if obj.HostedZoneId == nil {
								return nil, nil
							}
							return obj.GetHostedZoneId(), nil
						}
						inter, ok := p.Source.(EndpointGetter)
						if ok {
							face := inter.GetEndpoint()
							if face == nil {
								return nil, nil
							}
							if face.HostedZoneId == nil {
								return nil, nil
							}
							return face.GetHostedZoneId(), nil
						}
						return nil, fmt.Errorf("field HostedZoneId not resolved")
					},
				},
				"Port": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Endpoint)
						if ok {
							if obj.Port == nil {
								return nil, nil
							}
							return obj.GetPort(), nil
						}
						inter, ok := p.Source.(EndpointGetter)
						if ok {
							face := inter.GetEndpoint()
							if face == nil {
								return nil, nil
							}
							if face.Port == nil {
								return nil, nil
							}
							return face.GetPort(), nil
						}
						return nil, fmt.Errorf("field Port not resolved")
					},
				},
			}
		}),
	})
	GraphQLOptionGroupMembershipType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsOptionGroupMembership",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"OptionGroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OptionGroupMembership)
						if ok {
							if obj.OptionGroupName == nil {
								return nil, nil
							}
							return obj.GetOptionGroupName(), nil
						}
						inter, ok := p.Source.(OptionGroupMembershipGetter)
						if ok {
							face := inter.GetOptionGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.OptionGroupName == nil {
								return nil, nil
							}
							return face.GetOptionGroupName(), nil
						}
						return nil, fmt.Errorf("field OptionGroupName not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OptionGroupMembership)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(OptionGroupMembershipGetter)
						if ok {
							face := inter.GetOptionGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
			}
		}),
	})
	GraphQLPendingModifiedValuesType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsPendingModifiedValues",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AllocatedStorage": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.AllocatedStorage == nil {
								return nil, nil
							}
							return obj.GetAllocatedStorage(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.AllocatedStorage == nil {
								return nil, nil
							}
							return face.GetAllocatedStorage(), nil
						}
						return nil, fmt.Errorf("field AllocatedStorage not resolved")
					},
				},
				"BackupRetentionPeriod": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.BackupRetentionPeriod == nil {
								return nil, nil
							}
							return obj.GetBackupRetentionPeriod(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.BackupRetentionPeriod == nil {
								return nil, nil
							}
							return face.GetBackupRetentionPeriod(), nil
						}
						return nil, fmt.Errorf("field BackupRetentionPeriod not resolved")
					},
				},
				"CACertificateIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.CACertificateIdentifier == nil {
								return nil, nil
							}
							return obj.GetCACertificateIdentifier(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.CACertificateIdentifier == nil {
								return nil, nil
							}
							return face.GetCACertificateIdentifier(), nil
						}
						return nil, fmt.Errorf("field CACertificateIdentifier not resolved")
					},
				},
				"DBInstanceClass": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.DBInstanceClass == nil {
								return nil, nil
							}
							return obj.GetDBInstanceClass(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.DBInstanceClass == nil {
								return nil, nil
							}
							return face.GetDBInstanceClass(), nil
						}
						return nil, fmt.Errorf("field DBInstanceClass not resolved")
					},
				},
				"DBInstanceIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.DBInstanceIdentifier == nil {
								return nil, nil
							}
							return obj.GetDBInstanceIdentifier(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.DBInstanceIdentifier == nil {
								return nil, nil
							}
							return face.GetDBInstanceIdentifier(), nil
						}
						return nil, fmt.Errorf("field DBInstanceIdentifier not resolved")
					},
				},
				"EngineVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.EngineVersion == nil {
								return nil, nil
							}
							return obj.GetEngineVersion(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.EngineVersion == nil {
								return nil, nil
							}
							return face.GetEngineVersion(), nil
						}
						return nil, fmt.Errorf("field EngineVersion not resolved")
					},
				},
				"Iops": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.Iops == nil {
								return nil, nil
							}
							return obj.GetIops(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.Iops == nil {
								return nil, nil
							}
							return face.GetIops(), nil
						}
						return nil, fmt.Errorf("field Iops not resolved")
					},
				},
				"MasterUserPassword": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.MasterUserPassword == nil {
								return nil, nil
							}
							return obj.GetMasterUserPassword(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.MasterUserPassword == nil {
								return nil, nil
							}
							return face.GetMasterUserPassword(), nil
						}
						return nil, fmt.Errorf("field MasterUserPassword not resolved")
					},
				},
				"MultiAZ": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.MultiAZ == nil {
								return nil, nil
							}
							return obj.GetMultiAZ(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.MultiAZ == nil {
								return nil, nil
							}
							return face.GetMultiAZ(), nil
						}
						return nil, fmt.Errorf("field MultiAZ not resolved")
					},
				},
				"Port": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.Port == nil {
								return nil, nil
							}
							return obj.GetPort(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.Port == nil {
								return nil, nil
							}
							return face.GetPort(), nil
						}
						return nil, fmt.Errorf("field Port not resolved")
					},
				},
				"StorageType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PendingModifiedValues)
						if ok {
							if obj.StorageType == nil {
								return nil, nil
							}
							return obj.GetStorageType(), nil
						}
						inter, ok := p.Source.(PendingModifiedValuesGetter)
						if ok {
							face := inter.GetPendingModifiedValues()
							if face == nil {
								return nil, nil
							}
							if face.StorageType == nil {
								return nil, nil
							}
							return face.GetStorageType(), nil
						}
						return nil, fmt.Errorf("field StorageType not resolved")
					},
				},
			}
		}),
	})
	GraphQLSubnetType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsSubnet",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"SubnetAvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLAvailabilityZoneType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.SubnetAvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetSubnetAvailabilityZone(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.SubnetAvailabilityZone == nil {
								return nil, nil
							}
							return face.GetSubnetAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field SubnetAvailabilityZone not resolved")
					},
				},
				"SubnetIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.SubnetIdentifier == nil {
								return nil, nil
							}
							return obj.GetSubnetIdentifier(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.SubnetIdentifier == nil {
								return nil, nil
							}
							return face.GetSubnetIdentifier(), nil
						}
						return nil, fmt.Errorf("field SubnetIdentifier not resolved")
					},
				},
				"SubnetStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.SubnetStatus == nil {
								return nil, nil
							}
							return obj.GetSubnetStatus(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.SubnetStatus == nil {
								return nil, nil
							}
							return face.GetSubnetStatus(), nil
						}
						return nil, fmt.Errorf("field SubnetStatus not resolved")
					},
				},
			}
		}),
	})
	GraphQLVpcSecurityGroupMembershipType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "rdsVpcSecurityGroupMembership",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VpcSecurityGroupMembership)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(VpcSecurityGroupMembershipGetter)
						if ok {
							face := inter.GetVpcSecurityGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"VpcSecurityGroupId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VpcSecurityGroupMembership)
						if ok {
							if obj.VpcSecurityGroupId == nil {
								return nil, nil
							}
							return obj.GetVpcSecurityGroupId(), nil
						}
						inter, ok := p.Source.(VpcSecurityGroupMembershipGetter)
						if ok {
							face := inter.GetVpcSecurityGroupMembership()
							if face == nil {
								return nil, nil
							}
							if face.VpcSecurityGroupId == nil {
								return nil, nil
							}
							return face.GetVpcSecurityGroupId(), nil
						}
						return nil, fmt.Errorf("field VpcSecurityGroupId not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedAvailabilityZone(r randyTypes, easy bool) *AvailabilityZone {
	this := &AvailabilityZone{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.Name = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedDBInstance(r randyTypes, easy bool) *DBInstance {
	this := &DBInstance{}
	if r.Intn(10) != 0 {
		v2 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.AllocatedStorage = &v2
	}
	if r.Intn(10) != 0 {
		v3 := bool(bool(r.Intn(2) == 0))
		this.AutoMinorVersionUpgrade = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.AvailabilityZone = &v4
	}
	if r.Intn(10) != 0 {
		v5 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.BackupRetentionPeriod = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.CACertificateIdentifier = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.CharacterSetName = &v7
	}
	if r.Intn(10) != 0 {
		v8 := bool(bool(r.Intn(2) == 0))
		this.CopyTagsToSnapshot = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringTypes(r)
		this.DBClusterIdentifier = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringTypes(r)
		this.DBInstanceClass = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringTypes(r)
		this.DBInstanceIdentifier = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.DBInstanceStatus = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringTypes(r)
		this.DBName = &v13
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.DBParameterGroups = make([]*DBParameterGroupStatus, v14)
		for i := 0; i < v14; i++ {
			this.DBParameterGroups[i] = NewPopulatedDBParameterGroupStatus(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.DBSecurityGroups = make([]*DBSecurityGroupMembership, v15)
		for i := 0; i < v15; i++ {
			this.DBSecurityGroups[i] = NewPopulatedDBSecurityGroupMembership(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.DBSubnetGroup = NewPopulatedDBSubnetGroup(r, easy)
	}
	if r.Intn(10) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.DbInstancePort = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringTypes(r)
		this.DbiResourceId = &v17
	}
	if r.Intn(10) != 0 {
		this.Endpoint = NewPopulatedEndpoint(r, easy)
	}
	if r.Intn(10) != 0 {
		v18 := randStringTypes(r)
		this.Engine = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.EngineVersion = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringTypes(r)
		this.EnhancedMonitoringResourceArn = &v20
	}
	if r.Intn(10) != 0 {
		v21 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.InstanceCreateTime = &v21
	}
	if r.Intn(10) != 0 {
		v22 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		this.Iops = &v22
	}
	if r.Intn(10) != 0 {
		v23 := randStringTypes(r)
		this.KmsKeyId = &v23
	}
	if r.Intn(10) != 0 {
		v24 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		this.LatestRestorableTime = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringTypes(r)
		this.LicenseModel = &v25
	}
	if r.Intn(10) != 0 {
		v26 := randStringTypes(r)
		this.MasterUsername = &v26
	}
	if r.Intn(10) != 0 {
		v27 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		this.MonitoringInterval = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.MonitoringRoleArn = &v28
	}
	if r.Intn(10) != 0 {
		v29 := bool(bool(r.Intn(2) == 0))
		this.MultiAZ = &v29
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(5)
		this.OptionGroupMemberships = make([]*OptionGroupMembership, v30)
		for i := 0; i < v30; i++ {
			this.OptionGroupMemberships[i] = NewPopulatedOptionGroupMembership(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.PendingModifiedValues = NewPopulatedPendingModifiedValues(r, easy)
	}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.PreferredBackupWindow = &v31
	}
	if r.Intn(10) != 0 {
		v32 := randStringTypes(r)
		this.PreferredMaintenanceWindow = &v32
	}
	if r.Intn(10) != 0 {
		v33 := bool(bool(r.Intn(2) == 0))
		this.PubliclyAccessible = &v33
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(10)
		this.ReadReplicaDBInstanceIdentifiers = make([]string, v34)
		for i := 0; i < v34; i++ {
			this.ReadReplicaDBInstanceIdentifiers[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.ReadReplicaSourceDBInstanceIdentifier = &v35
	}
	if r.Intn(10) != 0 {
		v36 := randStringTypes(r)
		this.SecondaryAvailabilityZone = &v36
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(5)
		this.StatusInfos = make([]*DBInstanceStatusInfo, v37)
		for i := 0; i < v37; i++ {
			this.StatusInfos[i] = NewPopulatedDBInstanceStatusInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v38 := bool(bool(r.Intn(2) == 0))
		this.StorageEncrypted = &v38
	}
	if r.Intn(10) != 0 {
		v39 := randStringTypes(r)
		this.StorageType = &v39
	}
	if r.Intn(10) != 0 {
		v40 := randStringTypes(r)
		this.TdeCredentialArn = &v40
	}
	if r.Intn(10) != 0 {
		v41 := r.Intn(5)
		this.VpcSecurityGroups = make([]*VpcSecurityGroupMembership, v41)
		for i := 0; i < v41; i++ {
			this.VpcSecurityGroups[i] = NewPopulatedVpcSecurityGroupMembership(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 45)
	}
	return this
}

func NewPopulatedDBInstanceStatusInfo(r randyTypes, easy bool) *DBInstanceStatusInfo {
	this := &DBInstanceStatusInfo{}
	if r.Intn(10) != 0 {
		v42 := randStringTypes(r)
		this.Message = &v42
	}
	if r.Intn(10) != 0 {
		v43 := bool(bool(r.Intn(2) == 0))
		this.Normal = &v43
	}
	if r.Intn(10) != 0 {
		v44 := randStringTypes(r)
		this.Status = &v44
	}
	if r.Intn(10) != 0 {
		v45 := randStringTypes(r)
		this.StatusType = &v45
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedDBParameterGroupStatus(r randyTypes, easy bool) *DBParameterGroupStatus {
	this := &DBParameterGroupStatus{}
	if r.Intn(10) != 0 {
		v46 := randStringTypes(r)
		this.DBParameterGroupName = &v46
	}
	if r.Intn(10) != 0 {
		v47 := randStringTypes(r)
		this.ParameterApplyStatus = &v47
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDBSecurityGroupMembership(r randyTypes, easy bool) *DBSecurityGroupMembership {
	this := &DBSecurityGroupMembership{}
	if r.Intn(10) != 0 {
		v48 := randStringTypes(r)
		this.DBSecurityGroupName = &v48
	}
	if r.Intn(10) != 0 {
		v49 := randStringTypes(r)
		this.Status = &v49
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDBSubnetGroup(r randyTypes, easy bool) *DBSubnetGroup {
	this := &DBSubnetGroup{}
	if r.Intn(10) != 0 {
		v50 := randStringTypes(r)
		this.DBSubnetGroupDescription = &v50
	}
	if r.Intn(10) != 0 {
		v51 := randStringTypes(r)
		this.DBSubnetGroupName = &v51
	}
	if r.Intn(10) != 0 {
		v52 := randStringTypes(r)
		this.SubnetGroupStatus = &v52
	}
	if r.Intn(10) != 0 {
		v53 := r.Intn(5)
		this.Subnets = make([]*Subnet, v53)
		for i := 0; i < v53; i++ {
			this.Subnets[i] = NewPopulatedSubnet(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v54 := randStringTypes(r)
		this.VpcId = &v54
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedEndpoint(r randyTypes, easy bool) *Endpoint {
	this := &Endpoint{}
	if r.Intn(10) != 0 {
		v55 := randStringTypes(r)
		this.Address = &v55
	}
	if r.Intn(10) != 0 {
		v56 := randStringTypes(r)
		this.HostedZoneId = &v56
	}
	if r.Intn(10) != 0 {
		v57 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v57 *= -1
		}
		this.Port = &v57
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedOptionGroupMembership(r randyTypes, easy bool) *OptionGroupMembership {
	this := &OptionGroupMembership{}
	if r.Intn(10) != 0 {
		v58 := randStringTypes(r)
		this.OptionGroupName = &v58
	}
	if r.Intn(10) != 0 {
		v59 := randStringTypes(r)
		this.Status = &v59
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedPendingModifiedValues(r randyTypes, easy bool) *PendingModifiedValues {
	this := &PendingModifiedValues{}
	if r.Intn(10) != 0 {
		v60 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v60 *= -1
		}
		this.AllocatedStorage = &v60
	}
	if r.Intn(10) != 0 {
		v61 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v61 *= -1
		}
		this.BackupRetentionPeriod = &v61
	}
	if r.Intn(10) != 0 {
		v62 := randStringTypes(r)
		this.CACertificateIdentifier = &v62
	}
	if r.Intn(10) != 0 {
		v63 := randStringTypes(r)
		this.DBInstanceClass = &v63
	}
	if r.Intn(10) != 0 {
		v64 := randStringTypes(r)
		this.DBInstanceIdentifier = &v64
	}
	if r.Intn(10) != 0 {
		v65 := randStringTypes(r)
		this.EngineVersion = &v65
	}
	if r.Intn(10) != 0 {
		v66 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v66 *= -1
		}
		this.Iops = &v66
	}
	if r.Intn(10) != 0 {
		v67 := randStringTypes(r)
		this.MasterUserPassword = &v67
	}
	if r.Intn(10) != 0 {
		v68 := bool(bool(r.Intn(2) == 0))
		this.MultiAZ = &v68
	}
	if r.Intn(10) != 0 {
		v69 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v69 *= -1
		}
		this.Port = &v69
	}
	if r.Intn(10) != 0 {
		v70 := randStringTypes(r)
		this.StorageType = &v70
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 13)
	}
	return this
}

func NewPopulatedSubnet(r randyTypes, easy bool) *Subnet {
	this := &Subnet{}
	if r.Intn(10) != 0 {
		this.SubnetAvailabilityZone = NewPopulatedAvailabilityZone(r, easy)
	}
	if r.Intn(10) != 0 {
		v71 := randStringTypes(r)
		this.SubnetIdentifier = &v71
	}
	if r.Intn(10) != 0 {
		v72 := randStringTypes(r)
		this.SubnetStatus = &v72
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedVpcSecurityGroupMembership(r randyTypes, easy bool) *VpcSecurityGroupMembership {
	this := &VpcSecurityGroupMembership{}
	if r.Intn(10) != 0 {
		v73 := randStringTypes(r)
		this.Status = &v73
	}
	if r.Intn(10) != 0 {
		v74 := randStringTypes(r)
		this.VpcSecurityGroupId = &v74
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v75 := r.Intn(100)
	tmps := make([]rune, v75)
	for i := 0; i < v75; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v76 := r.Int63()
		if r.Intn(2) == 0 {
			v76 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v76))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
