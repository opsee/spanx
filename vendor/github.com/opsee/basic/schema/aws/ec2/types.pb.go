// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package ec2 is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	EbsInstanceBlockDevice
	GroupIdentifier
	IamInstanceProfile
	Instance
	InstanceBlockDeviceMapping
	InstanceNetworkInterface
	InstanceNetworkInterfaceAssociation
	InstanceNetworkInterfaceAttachment
	InstancePrivateIpAddress
	InstanceState
	IpPermission
	IpRange
	Monitoring
	Placement
	PrefixListId
	ProductCode
	SecurityGroup
	StateReason
	Subnet
	Tag
	UserIdGroupPair
	Vpc
*/
package ec2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EbsInstanceBlockDevice struct {
	AttachTime          *int64  `protobuf:"fixed64,2,opt,name=AttachTime" json:"AttachTime,omitempty"`
	DeleteOnTermination *bool   `protobuf:"varint,3,opt,name=DeleteOnTermination" json:"DeleteOnTermination,omitempty"`
	Status              *string `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
	VolumeId            *string `protobuf:"bytes,5,opt,name=VolumeId" json:"VolumeId,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *EbsInstanceBlockDevice) Reset()         { *m = EbsInstanceBlockDevice{} }
func (m *EbsInstanceBlockDevice) String() string { return proto.CompactTextString(m) }
func (*EbsInstanceBlockDevice) ProtoMessage()    {}

func (m *EbsInstanceBlockDevice) GetAttachTime() int64 {
	if m != nil && m.AttachTime != nil {
		return *m.AttachTime
	}
	return 0
}

func (m *EbsInstanceBlockDevice) GetDeleteOnTermination() bool {
	if m != nil && m.DeleteOnTermination != nil {
		return *m.DeleteOnTermination
	}
	return false
}

func (m *EbsInstanceBlockDevice) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *EbsInstanceBlockDevice) GetVolumeId() string {
	if m != nil && m.VolumeId != nil {
		return *m.VolumeId
	}
	return ""
}

type GroupIdentifier struct {
	GroupId          *string `protobuf:"bytes,2,opt,name=GroupId" json:"GroupId,omitempty"`
	GroupName        *string `protobuf:"bytes,3,opt,name=GroupName" json:"GroupName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupIdentifier) Reset()         { *m = GroupIdentifier{} }
func (m *GroupIdentifier) String() string { return proto.CompactTextString(m) }
func (*GroupIdentifier) ProtoMessage()    {}

func (m *GroupIdentifier) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *GroupIdentifier) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

type IamInstanceProfile struct {
	Arn              *string `protobuf:"bytes,2,opt,name=Arn" json:"Arn,omitempty"`
	Id               *string `protobuf:"bytes,3,opt,name=Id" json:"Id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IamInstanceProfile) Reset()         { *m = IamInstanceProfile{} }
func (m *IamInstanceProfile) String() string { return proto.CompactTextString(m) }
func (*IamInstanceProfile) ProtoMessage()    {}

func (m *IamInstanceProfile) GetArn() string {
	if m != nil && m.Arn != nil {
		return *m.Arn
	}
	return ""
}

func (m *IamInstanceProfile) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Instance struct {
	AmiLaunchIndex        *int64                        `protobuf:"zigzag64,2,opt,name=AmiLaunchIndex" json:"AmiLaunchIndex,omitempty"`
	Architecture          *string                       `protobuf:"bytes,3,opt,name=Architecture" json:"Architecture,omitempty"`
	BlockDeviceMappings   []*InstanceBlockDeviceMapping `protobuf:"bytes,4,rep,name=BlockDeviceMappings" json:"BlockDeviceMappings,omitempty"`
	ClientToken           *string                       `protobuf:"bytes,5,opt,name=ClientToken" json:"ClientToken,omitempty"`
	EbsOptimized          *bool                         `protobuf:"varint,6,opt,name=EbsOptimized" json:"EbsOptimized,omitempty"`
	Hypervisor            *string                       `protobuf:"bytes,7,opt,name=Hypervisor" json:"Hypervisor,omitempty"`
	IamInstanceProfile    *IamInstanceProfile           `protobuf:"bytes,8,opt,name=IamInstanceProfile" json:"IamInstanceProfile,omitempty"`
	ImageId               *string                       `protobuf:"bytes,9,opt,name=ImageId" json:"ImageId,omitempty"`
	InstanceId            *string                       `protobuf:"bytes,10,opt,name=InstanceId" json:"InstanceId,omitempty"`
	InstanceLifecycle     *string                       `protobuf:"bytes,11,opt,name=InstanceLifecycle" json:"InstanceLifecycle,omitempty"`
	InstanceType          *string                       `protobuf:"bytes,12,opt,name=InstanceType" json:"InstanceType,omitempty"`
	KernelId              *string                       `protobuf:"bytes,13,opt,name=KernelId" json:"KernelId,omitempty"`
	KeyName               *string                       `protobuf:"bytes,14,opt,name=KeyName" json:"KeyName,omitempty"`
	LaunchTime            *int64                        `protobuf:"fixed64,15,opt,name=LaunchTime" json:"LaunchTime,omitempty"`
	Monitoring            *Monitoring                   `protobuf:"bytes,16,opt,name=Monitoring" json:"Monitoring,omitempty"`
	NetworkInterfaces     []*InstanceNetworkInterface   `protobuf:"bytes,17,rep,name=NetworkInterfaces" json:"NetworkInterfaces,omitempty"`
	Placement             *Placement                    `protobuf:"bytes,18,opt,name=Placement" json:"Placement,omitempty"`
	Platform              *string                       `protobuf:"bytes,19,opt,name=Platform" json:"Platform,omitempty"`
	PrivateDnsName        *string                       `protobuf:"bytes,20,opt,name=PrivateDnsName" json:"PrivateDnsName,omitempty"`
	PrivateIpAddress      *string                       `protobuf:"bytes,21,opt,name=PrivateIpAddress" json:"PrivateIpAddress,omitempty"`
	ProductCodes          []*ProductCode                `protobuf:"bytes,22,rep,name=ProductCodes" json:"ProductCodes,omitempty"`
	PublicDnsName         *string                       `protobuf:"bytes,23,opt,name=PublicDnsName" json:"PublicDnsName,omitempty"`
	PublicIpAddress       *string                       `protobuf:"bytes,24,opt,name=PublicIpAddress" json:"PublicIpAddress,omitempty"`
	RamdiskId             *string                       `protobuf:"bytes,25,opt,name=RamdiskId" json:"RamdiskId,omitempty"`
	RootDeviceName        *string                       `protobuf:"bytes,26,opt,name=RootDeviceName" json:"RootDeviceName,omitempty"`
	RootDeviceType        *string                       `protobuf:"bytes,27,opt,name=RootDeviceType" json:"RootDeviceType,omitempty"`
	SecurityGroups        []*GroupIdentifier            `protobuf:"bytes,28,rep,name=SecurityGroups" json:"SecurityGroups,omitempty"`
	SourceDestCheck       *bool                         `protobuf:"varint,29,opt,name=SourceDestCheck" json:"SourceDestCheck,omitempty"`
	SpotInstanceRequestId *string                       `protobuf:"bytes,30,opt,name=SpotInstanceRequestId" json:"SpotInstanceRequestId,omitempty"`
	SriovNetSupport       *string                       `protobuf:"bytes,31,opt,name=SriovNetSupport" json:"SriovNetSupport,omitempty"`
	State                 *InstanceState                `protobuf:"bytes,32,opt,name=State" json:"State,omitempty"`
	StateReason           *StateReason                  `protobuf:"bytes,33,opt,name=StateReason" json:"StateReason,omitempty"`
	StateTransitionReason *string                       `protobuf:"bytes,34,opt,name=StateTransitionReason" json:"StateTransitionReason,omitempty"`
	SubnetId              *string                       `protobuf:"bytes,35,opt,name=SubnetId" json:"SubnetId,omitempty"`
	Tags                  []*Tag                        `protobuf:"bytes,36,rep,name=Tags" json:"Tags,omitempty"`
	VirtualizationType    *string                       `protobuf:"bytes,37,opt,name=VirtualizationType" json:"VirtualizationType,omitempty"`
	VpcId                 *string                       `protobuf:"bytes,38,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized      []byte                        `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}

func (m *Instance) GetAmiLaunchIndex() int64 {
	if m != nil && m.AmiLaunchIndex != nil {
		return *m.AmiLaunchIndex
	}
	return 0
}

func (m *Instance) GetArchitecture() string {
	if m != nil && m.Architecture != nil {
		return *m.Architecture
	}
	return ""
}

func (m *Instance) GetBlockDeviceMappings() []*InstanceBlockDeviceMapping {
	if m != nil {
		return m.BlockDeviceMappings
	}
	return nil
}

func (m *Instance) GetClientToken() string {
	if m != nil && m.ClientToken != nil {
		return *m.ClientToken
	}
	return ""
}

func (m *Instance) GetEbsOptimized() bool {
	if m != nil && m.EbsOptimized != nil {
		return *m.EbsOptimized
	}
	return false
}

func (m *Instance) GetHypervisor() string {
	if m != nil && m.Hypervisor != nil {
		return *m.Hypervisor
	}
	return ""
}

func (m *Instance) GetIamInstanceProfile() *IamInstanceProfile {
	if m != nil {
		return m.IamInstanceProfile
	}
	return nil
}

func (m *Instance) GetImageId() string {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return ""
}

func (m *Instance) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

func (m *Instance) GetInstanceLifecycle() string {
	if m != nil && m.InstanceLifecycle != nil {
		return *m.InstanceLifecycle
	}
	return ""
}

func (m *Instance) GetInstanceType() string {
	if m != nil && m.InstanceType != nil {
		return *m.InstanceType
	}
	return ""
}

func (m *Instance) GetKernelId() string {
	if m != nil && m.KernelId != nil {
		return *m.KernelId
	}
	return ""
}

func (m *Instance) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *Instance) GetLaunchTime() int64 {
	if m != nil && m.LaunchTime != nil {
		return *m.LaunchTime
	}
	return 0
}

func (m *Instance) GetMonitoring() *Monitoring {
	if m != nil {
		return m.Monitoring
	}
	return nil
}

func (m *Instance) GetNetworkInterfaces() []*InstanceNetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *Instance) GetPlacement() *Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (m *Instance) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Instance) GetPrivateDnsName() string {
	if m != nil && m.PrivateDnsName != nil {
		return *m.PrivateDnsName
	}
	return ""
}

func (m *Instance) GetPrivateIpAddress() string {
	if m != nil && m.PrivateIpAddress != nil {
		return *m.PrivateIpAddress
	}
	return ""
}

func (m *Instance) GetProductCodes() []*ProductCode {
	if m != nil {
		return m.ProductCodes
	}
	return nil
}

func (m *Instance) GetPublicDnsName() string {
	if m != nil && m.PublicDnsName != nil {
		return *m.PublicDnsName
	}
	return ""
}

func (m *Instance) GetPublicIpAddress() string {
	if m != nil && m.PublicIpAddress != nil {
		return *m.PublicIpAddress
	}
	return ""
}

func (m *Instance) GetRamdiskId() string {
	if m != nil && m.RamdiskId != nil {
		return *m.RamdiskId
	}
	return ""
}

func (m *Instance) GetRootDeviceName() string {
	if m != nil && m.RootDeviceName != nil {
		return *m.RootDeviceName
	}
	return ""
}

func (m *Instance) GetRootDeviceType() string {
	if m != nil && m.RootDeviceType != nil {
		return *m.RootDeviceType
	}
	return ""
}

func (m *Instance) GetSecurityGroups() []*GroupIdentifier {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *Instance) GetSourceDestCheck() bool {
	if m != nil && m.SourceDestCheck != nil {
		return *m.SourceDestCheck
	}
	return false
}

func (m *Instance) GetSpotInstanceRequestId() string {
	if m != nil && m.SpotInstanceRequestId != nil {
		return *m.SpotInstanceRequestId
	}
	return ""
}

func (m *Instance) GetSriovNetSupport() string {
	if m != nil && m.SriovNetSupport != nil {
		return *m.SriovNetSupport
	}
	return ""
}

func (m *Instance) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Instance) GetStateReason() *StateReason {
	if m != nil {
		return m.StateReason
	}
	return nil
}

func (m *Instance) GetStateTransitionReason() string {
	if m != nil && m.StateTransitionReason != nil {
		return *m.StateTransitionReason
	}
	return ""
}

func (m *Instance) GetSubnetId() string {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return ""
}

func (m *Instance) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Instance) GetVirtualizationType() string {
	if m != nil && m.VirtualizationType != nil {
		return *m.VirtualizationType
	}
	return ""
}

func (m *Instance) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

type InstanceBlockDeviceMapping struct {
	DeviceName       *string                 `protobuf:"bytes,2,opt,name=DeviceName" json:"DeviceName,omitempty"`
	Ebs              *EbsInstanceBlockDevice `protobuf:"bytes,3,opt,name=Ebs" json:"Ebs,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *InstanceBlockDeviceMapping) Reset()         { *m = InstanceBlockDeviceMapping{} }
func (m *InstanceBlockDeviceMapping) String() string { return proto.CompactTextString(m) }
func (*InstanceBlockDeviceMapping) ProtoMessage()    {}

func (m *InstanceBlockDeviceMapping) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *InstanceBlockDeviceMapping) GetEbs() *EbsInstanceBlockDevice {
	if m != nil {
		return m.Ebs
	}
	return nil
}

type InstanceNetworkInterface struct {
	Association        *InstanceNetworkInterfaceAssociation `protobuf:"bytes,2,opt,name=Association" json:"Association,omitempty"`
	Attachment         *InstanceNetworkInterfaceAttachment  `protobuf:"bytes,3,opt,name=Attachment" json:"Attachment,omitempty"`
	Description        *string                              `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	Groups             []*GroupIdentifier                   `protobuf:"bytes,5,rep,name=Groups" json:"Groups,omitempty"`
	MacAddress         *string                              `protobuf:"bytes,6,opt,name=MacAddress" json:"MacAddress,omitempty"`
	NetworkInterfaceId *string                              `protobuf:"bytes,7,opt,name=NetworkInterfaceId" json:"NetworkInterfaceId,omitempty"`
	OwnerId            *string                              `protobuf:"bytes,8,opt,name=OwnerId" json:"OwnerId,omitempty"`
	PrivateDnsName     *string                              `protobuf:"bytes,9,opt,name=PrivateDnsName" json:"PrivateDnsName,omitempty"`
	PrivateIpAddress   *string                              `protobuf:"bytes,10,opt,name=PrivateIpAddress" json:"PrivateIpAddress,omitempty"`
	PrivateIpAddresses []*InstancePrivateIpAddress          `protobuf:"bytes,11,rep,name=PrivateIpAddresses" json:"PrivateIpAddresses,omitempty"`
	SourceDestCheck    *bool                                `protobuf:"varint,12,opt,name=SourceDestCheck" json:"SourceDestCheck,omitempty"`
	Status             *string                              `protobuf:"bytes,13,opt,name=Status" json:"Status,omitempty"`
	SubnetId           *string                              `protobuf:"bytes,14,opt,name=SubnetId" json:"SubnetId,omitempty"`
	VpcId              *string                              `protobuf:"bytes,15,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized   []byte                               `json:"-"`
}

func (m *InstanceNetworkInterface) Reset()         { *m = InstanceNetworkInterface{} }
func (m *InstanceNetworkInterface) String() string { return proto.CompactTextString(m) }
func (*InstanceNetworkInterface) ProtoMessage()    {}

func (m *InstanceNetworkInterface) GetAssociation() *InstanceNetworkInterfaceAssociation {
	if m != nil {
		return m.Association
	}
	return nil
}

func (m *InstanceNetworkInterface) GetAttachment() *InstanceNetworkInterfaceAttachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *InstanceNetworkInterface) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *InstanceNetworkInterface) GetGroups() []*GroupIdentifier {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *InstanceNetworkInterface) GetMacAddress() string {
	if m != nil && m.MacAddress != nil {
		return *m.MacAddress
	}
	return ""
}

func (m *InstanceNetworkInterface) GetNetworkInterfaceId() string {
	if m != nil && m.NetworkInterfaceId != nil {
		return *m.NetworkInterfaceId
	}
	return ""
}

func (m *InstanceNetworkInterface) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *InstanceNetworkInterface) GetPrivateDnsName() string {
	if m != nil && m.PrivateDnsName != nil {
		return *m.PrivateDnsName
	}
	return ""
}

func (m *InstanceNetworkInterface) GetPrivateIpAddress() string {
	if m != nil && m.PrivateIpAddress != nil {
		return *m.PrivateIpAddress
	}
	return ""
}

func (m *InstanceNetworkInterface) GetPrivateIpAddresses() []*InstancePrivateIpAddress {
	if m != nil {
		return m.PrivateIpAddresses
	}
	return nil
}

func (m *InstanceNetworkInterface) GetSourceDestCheck() bool {
	if m != nil && m.SourceDestCheck != nil {
		return *m.SourceDestCheck
	}
	return false
}

func (m *InstanceNetworkInterface) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *InstanceNetworkInterface) GetSubnetId() string {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return ""
}

func (m *InstanceNetworkInterface) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

type InstanceNetworkInterfaceAssociation struct {
	IpOwnerId        *string `protobuf:"bytes,2,opt,name=IpOwnerId" json:"IpOwnerId,omitempty"`
	PublicDnsName    *string `protobuf:"bytes,3,opt,name=PublicDnsName" json:"PublicDnsName,omitempty"`
	PublicIp         *string `protobuf:"bytes,4,opt,name=PublicIp" json:"PublicIp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InstanceNetworkInterfaceAssociation) Reset()         { *m = InstanceNetworkInterfaceAssociation{} }
func (m *InstanceNetworkInterfaceAssociation) String() string { return proto.CompactTextString(m) }
func (*InstanceNetworkInterfaceAssociation) ProtoMessage()    {}

func (m *InstanceNetworkInterfaceAssociation) GetIpOwnerId() string {
	if m != nil && m.IpOwnerId != nil {
		return *m.IpOwnerId
	}
	return ""
}

func (m *InstanceNetworkInterfaceAssociation) GetPublicDnsName() string {
	if m != nil && m.PublicDnsName != nil {
		return *m.PublicDnsName
	}
	return ""
}

func (m *InstanceNetworkInterfaceAssociation) GetPublicIp() string {
	if m != nil && m.PublicIp != nil {
		return *m.PublicIp
	}
	return ""
}

type InstanceNetworkInterfaceAttachment struct {
	AttachTime          *int64  `protobuf:"fixed64,2,opt,name=AttachTime" json:"AttachTime,omitempty"`
	AttachmentId        *string `protobuf:"bytes,3,opt,name=AttachmentId" json:"AttachmentId,omitempty"`
	DeleteOnTermination *bool   `protobuf:"varint,4,opt,name=DeleteOnTermination" json:"DeleteOnTermination,omitempty"`
	DeviceIndex         *int64  `protobuf:"zigzag64,5,opt,name=DeviceIndex" json:"DeviceIndex,omitempty"`
	Status              *string `protobuf:"bytes,6,opt,name=Status" json:"Status,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *InstanceNetworkInterfaceAttachment) Reset()         { *m = InstanceNetworkInterfaceAttachment{} }
func (m *InstanceNetworkInterfaceAttachment) String() string { return proto.CompactTextString(m) }
func (*InstanceNetworkInterfaceAttachment) ProtoMessage()    {}

func (m *InstanceNetworkInterfaceAttachment) GetAttachTime() int64 {
	if m != nil && m.AttachTime != nil {
		return *m.AttachTime
	}
	return 0
}

func (m *InstanceNetworkInterfaceAttachment) GetAttachmentId() string {
	if m != nil && m.AttachmentId != nil {
		return *m.AttachmentId
	}
	return ""
}

func (m *InstanceNetworkInterfaceAttachment) GetDeleteOnTermination() bool {
	if m != nil && m.DeleteOnTermination != nil {
		return *m.DeleteOnTermination
	}
	return false
}

func (m *InstanceNetworkInterfaceAttachment) GetDeviceIndex() int64 {
	if m != nil && m.DeviceIndex != nil {
		return *m.DeviceIndex
	}
	return 0
}

func (m *InstanceNetworkInterfaceAttachment) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

type InstancePrivateIpAddress struct {
	Association      *InstanceNetworkInterfaceAssociation `protobuf:"bytes,2,opt,name=Association" json:"Association,omitempty"`
	Primary          *bool                                `protobuf:"varint,3,opt,name=Primary" json:"Primary,omitempty"`
	PrivateDnsName   *string                              `protobuf:"bytes,4,opt,name=PrivateDnsName" json:"PrivateDnsName,omitempty"`
	PrivateIpAddress *string                              `protobuf:"bytes,5,opt,name=PrivateIpAddress" json:"PrivateIpAddress,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *InstancePrivateIpAddress) Reset()         { *m = InstancePrivateIpAddress{} }
func (m *InstancePrivateIpAddress) String() string { return proto.CompactTextString(m) }
func (*InstancePrivateIpAddress) ProtoMessage()    {}

func (m *InstancePrivateIpAddress) GetAssociation() *InstanceNetworkInterfaceAssociation {
	if m != nil {
		return m.Association
	}
	return nil
}

func (m *InstancePrivateIpAddress) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

func (m *InstancePrivateIpAddress) GetPrivateDnsName() string {
	if m != nil && m.PrivateDnsName != nil {
		return *m.PrivateDnsName
	}
	return ""
}

func (m *InstancePrivateIpAddress) GetPrivateIpAddress() string {
	if m != nil && m.PrivateIpAddress != nil {
		return *m.PrivateIpAddress
	}
	return ""
}

type InstanceState struct {
	Code             *int64  `protobuf:"zigzag64,2,opt,name=Code" json:"Code,omitempty"`
	Name             *string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}

func (m *InstanceState) GetCode() int64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *InstanceState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type IpPermission struct {
	FromPort         *int64             `protobuf:"zigzag64,2,opt,name=FromPort" json:"FromPort,omitempty"`
	IpProtocol       *string            `protobuf:"bytes,3,opt,name=IpProtocol" json:"IpProtocol,omitempty"`
	IpRanges         []*IpRange         `protobuf:"bytes,4,rep,name=IpRanges" json:"IpRanges,omitempty"`
	PrefixListIds    []*PrefixListId    `protobuf:"bytes,5,rep,name=PrefixListIds" json:"PrefixListIds,omitempty"`
	ToPort           *int64             `protobuf:"zigzag64,6,opt,name=ToPort" json:"ToPort,omitempty"`
	UserIdGroupPairs []*UserIdGroupPair `protobuf:"bytes,7,rep,name=UserIdGroupPairs" json:"UserIdGroupPairs,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *IpPermission) Reset()         { *m = IpPermission{} }
func (m *IpPermission) String() string { return proto.CompactTextString(m) }
func (*IpPermission) ProtoMessage()    {}

func (m *IpPermission) GetFromPort() int64 {
	if m != nil && m.FromPort != nil {
		return *m.FromPort
	}
	return 0
}

func (m *IpPermission) GetIpProtocol() string {
	if m != nil && m.IpProtocol != nil {
		return *m.IpProtocol
	}
	return ""
}

func (m *IpPermission) GetIpRanges() []*IpRange {
	if m != nil {
		return m.IpRanges
	}
	return nil
}

func (m *IpPermission) GetPrefixListIds() []*PrefixListId {
	if m != nil {
		return m.PrefixListIds
	}
	return nil
}

func (m *IpPermission) GetToPort() int64 {
	if m != nil && m.ToPort != nil {
		return *m.ToPort
	}
	return 0
}

func (m *IpPermission) GetUserIdGroupPairs() []*UserIdGroupPair {
	if m != nil {
		return m.UserIdGroupPairs
	}
	return nil
}

type IpRange struct {
	CidrIp           *string `protobuf:"bytes,2,opt,name=CidrIp" json:"CidrIp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpRange) Reset()         { *m = IpRange{} }
func (m *IpRange) String() string { return proto.CompactTextString(m) }
func (*IpRange) ProtoMessage()    {}

func (m *IpRange) GetCidrIp() string {
	if m != nil && m.CidrIp != nil {
		return *m.CidrIp
	}
	return ""
}

type Monitoring struct {
	State            *string `protobuf:"bytes,2,opt,name=State" json:"State,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Monitoring) Reset()         { *m = Monitoring{} }
func (m *Monitoring) String() string { return proto.CompactTextString(m) }
func (*Monitoring) ProtoMessage()    {}

func (m *Monitoring) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

type Placement struct {
	Affinity         *string `protobuf:"bytes,2,opt,name=Affinity" json:"Affinity,omitempty"`
	AvailabilityZone *string `protobuf:"bytes,3,opt,name=AvailabilityZone" json:"AvailabilityZone,omitempty"`
	GroupName        *string `protobuf:"bytes,4,opt,name=GroupName" json:"GroupName,omitempty"`
	HostId           *string `protobuf:"bytes,5,opt,name=HostId" json:"HostId,omitempty"`
	Tenancy          *string `protobuf:"bytes,6,opt,name=Tenancy" json:"Tenancy,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Placement) Reset()         { *m = Placement{} }
func (m *Placement) String() string { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()    {}

func (m *Placement) GetAffinity() string {
	if m != nil && m.Affinity != nil {
		return *m.Affinity
	}
	return ""
}

func (m *Placement) GetAvailabilityZone() string {
	if m != nil && m.AvailabilityZone != nil {
		return *m.AvailabilityZone
	}
	return ""
}

func (m *Placement) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *Placement) GetHostId() string {
	if m != nil && m.HostId != nil {
		return *m.HostId
	}
	return ""
}

func (m *Placement) GetTenancy() string {
	if m != nil && m.Tenancy != nil {
		return *m.Tenancy
	}
	return ""
}

type PrefixListId struct {
	PrefixListId     *string `protobuf:"bytes,2,opt,name=PrefixListId" json:"PrefixListId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PrefixListId) Reset()         { *m = PrefixListId{} }
func (m *PrefixListId) String() string { return proto.CompactTextString(m) }
func (*PrefixListId) ProtoMessage()    {}

func (m *PrefixListId) GetPrefixListId() string {
	if m != nil && m.PrefixListId != nil {
		return *m.PrefixListId
	}
	return ""
}

type ProductCode struct {
	ProductCodeId    *string `protobuf:"bytes,2,opt,name=ProductCodeId" json:"ProductCodeId,omitempty"`
	ProductCodeType  *string `protobuf:"bytes,3,opt,name=ProductCodeType" json:"ProductCodeType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProductCode) Reset()         { *m = ProductCode{} }
func (m *ProductCode) String() string { return proto.CompactTextString(m) }
func (*ProductCode) ProtoMessage()    {}

func (m *ProductCode) GetProductCodeId() string {
	if m != nil && m.ProductCodeId != nil {
		return *m.ProductCodeId
	}
	return ""
}

func (m *ProductCode) GetProductCodeType() string {
	if m != nil && m.ProductCodeType != nil {
		return *m.ProductCodeType
	}
	return ""
}

type SecurityGroup struct {
	Description         *string         `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	GroupId             *string         `protobuf:"bytes,3,opt,name=GroupId" json:"GroupId,omitempty"`
	GroupName           *string         `protobuf:"bytes,4,opt,name=GroupName" json:"GroupName,omitempty"`
	IpPermissions       []*IpPermission `protobuf:"bytes,5,rep,name=IpPermissions" json:"IpPermissions,omitempty"`
	IpPermissionsEgress []*IpPermission `protobuf:"bytes,6,rep,name=IpPermissionsEgress" json:"IpPermissionsEgress,omitempty"`
	OwnerId             *string         `protobuf:"bytes,7,opt,name=OwnerId" json:"OwnerId,omitempty"`
	Tags                []*Tag          `protobuf:"bytes,8,rep,name=Tags" json:"Tags,omitempty"`
	VpcId               *string         `protobuf:"bytes,9,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized    []byte          `json:"-"`
}

func (m *SecurityGroup) Reset()         { *m = SecurityGroup{} }
func (m *SecurityGroup) String() string { return proto.CompactTextString(m) }
func (*SecurityGroup) ProtoMessage()    {}

func (m *SecurityGroup) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *SecurityGroup) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *SecurityGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *SecurityGroup) GetIpPermissions() []*IpPermission {
	if m != nil {
		return m.IpPermissions
	}
	return nil
}

func (m *SecurityGroup) GetIpPermissionsEgress() []*IpPermission {
	if m != nil {
		return m.IpPermissionsEgress
	}
	return nil
}

func (m *SecurityGroup) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *SecurityGroup) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SecurityGroup) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

type StateReason struct {
	Code             *string `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty"`
	Message          *string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StateReason) Reset()         { *m = StateReason{} }
func (m *StateReason) String() string { return proto.CompactTextString(m) }
func (*StateReason) ProtoMessage()    {}

func (m *StateReason) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *StateReason) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Subnet struct {
	AvailabilityZone        *string `protobuf:"bytes,2,opt,name=AvailabilityZone" json:"AvailabilityZone,omitempty"`
	AvailableIpAddressCount *int64  `protobuf:"zigzag64,3,opt,name=AvailableIpAddressCount" json:"AvailableIpAddressCount,omitempty"`
	CidrBlock               *string `protobuf:"bytes,4,opt,name=CidrBlock" json:"CidrBlock,omitempty"`
	DefaultForAz            *bool   `protobuf:"varint,5,opt,name=DefaultForAz" json:"DefaultForAz,omitempty"`
	MapPublicIpOnLaunch     *bool   `protobuf:"varint,6,opt,name=MapPublicIpOnLaunch" json:"MapPublicIpOnLaunch,omitempty"`
	State                   *string `protobuf:"bytes,7,opt,name=State" json:"State,omitempty"`
	SubnetId                *string `protobuf:"bytes,8,opt,name=SubnetId" json:"SubnetId,omitempty"`
	Tags                    []*Tag  `protobuf:"bytes,9,rep,name=Tags" json:"Tags,omitempty"`
	VpcId                   *string `protobuf:"bytes,10,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *Subnet) Reset()         { *m = Subnet{} }
func (m *Subnet) String() string { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()    {}

func (m *Subnet) GetAvailabilityZone() string {
	if m != nil && m.AvailabilityZone != nil {
		return *m.AvailabilityZone
	}
	return ""
}

func (m *Subnet) GetAvailableIpAddressCount() int64 {
	if m != nil && m.AvailableIpAddressCount != nil {
		return *m.AvailableIpAddressCount
	}
	return 0
}

func (m *Subnet) GetCidrBlock() string {
	if m != nil && m.CidrBlock != nil {
		return *m.CidrBlock
	}
	return ""
}

func (m *Subnet) GetDefaultForAz() bool {
	if m != nil && m.DefaultForAz != nil {
		return *m.DefaultForAz
	}
	return false
}

func (m *Subnet) GetMapPublicIpOnLaunch() bool {
	if m != nil && m.MapPublicIpOnLaunch != nil {
		return *m.MapPublicIpOnLaunch
	}
	return false
}

func (m *Subnet) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Subnet) GetSubnetId() string {
	if m != nil && m.SubnetId != nil {
		return *m.SubnetId
	}
	return ""
}

func (m *Subnet) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Subnet) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

type Tag struct {
	Key              *string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}

func (m *Tag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type UserIdGroupPair struct {
	GroupId                *string `protobuf:"bytes,2,opt,name=GroupId" json:"GroupId,omitempty"`
	GroupName              *string `protobuf:"bytes,3,opt,name=GroupName" json:"GroupName,omitempty"`
	PeeringStatus          *string `protobuf:"bytes,4,opt,name=PeeringStatus" json:"PeeringStatus,omitempty"`
	UserId                 *string `protobuf:"bytes,5,opt,name=UserId" json:"UserId,omitempty"`
	VpcId                  *string `protobuf:"bytes,6,opt,name=VpcId" json:"VpcId,omitempty"`
	VpcPeeringConnectionId *string `protobuf:"bytes,7,opt,name=VpcPeeringConnectionId" json:"VpcPeeringConnectionId,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *UserIdGroupPair) Reset()         { *m = UserIdGroupPair{} }
func (m *UserIdGroupPair) String() string { return proto.CompactTextString(m) }
func (*UserIdGroupPair) ProtoMessage()    {}

func (m *UserIdGroupPair) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *UserIdGroupPair) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *UserIdGroupPair) GetPeeringStatus() string {
	if m != nil && m.PeeringStatus != nil {
		return *m.PeeringStatus
	}
	return ""
}

func (m *UserIdGroupPair) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserIdGroupPair) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

func (m *UserIdGroupPair) GetVpcPeeringConnectionId() string {
	if m != nil && m.VpcPeeringConnectionId != nil {
		return *m.VpcPeeringConnectionId
	}
	return ""
}

type Vpc struct {
	CidrBlock        *string `protobuf:"bytes,2,opt,name=CidrBlock" json:"CidrBlock,omitempty"`
	DhcpOptionsId    *string `protobuf:"bytes,3,opt,name=DhcpOptionsId" json:"DhcpOptionsId,omitempty"`
	InstanceTenancy  *string `protobuf:"bytes,4,opt,name=InstanceTenancy" json:"InstanceTenancy,omitempty"`
	IsDefault        *bool   `protobuf:"varint,5,opt,name=IsDefault" json:"IsDefault,omitempty"`
	State            *string `protobuf:"bytes,6,opt,name=State" json:"State,omitempty"`
	Tags             []*Tag  `protobuf:"bytes,7,rep,name=Tags" json:"Tags,omitempty"`
	VpcId            *string `protobuf:"bytes,8,opt,name=VpcId" json:"VpcId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Vpc) Reset()         { *m = Vpc{} }
func (m *Vpc) String() string { return proto.CompactTextString(m) }
func (*Vpc) ProtoMessage()    {}

func (m *Vpc) GetCidrBlock() string {
	if m != nil && m.CidrBlock != nil {
		return *m.CidrBlock
	}
	return ""
}

func (m *Vpc) GetDhcpOptionsId() string {
	if m != nil && m.DhcpOptionsId != nil {
		return *m.DhcpOptionsId
	}
	return ""
}

func (m *Vpc) GetInstanceTenancy() string {
	if m != nil && m.InstanceTenancy != nil {
		return *m.InstanceTenancy
	}
	return ""
}

func (m *Vpc) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *Vpc) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Vpc) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Vpc) GetVpcId() string {
	if m != nil && m.VpcId != nil {
		return *m.VpcId
	}
	return ""
}

func init() {
	proto.RegisterType((*EbsInstanceBlockDevice)(nil), "opsee.aws.ec2.EbsInstanceBlockDevice")
	proto.RegisterType((*GroupIdentifier)(nil), "opsee.aws.ec2.GroupIdentifier")
	proto.RegisterType((*IamInstanceProfile)(nil), "opsee.aws.ec2.IamInstanceProfile")
	proto.RegisterType((*Instance)(nil), "opsee.aws.ec2.Instance")
	proto.RegisterType((*InstanceBlockDeviceMapping)(nil), "opsee.aws.ec2.InstanceBlockDeviceMapping")
	proto.RegisterType((*InstanceNetworkInterface)(nil), "opsee.aws.ec2.InstanceNetworkInterface")
	proto.RegisterType((*InstanceNetworkInterfaceAssociation)(nil), "opsee.aws.ec2.InstanceNetworkInterfaceAssociation")
	proto.RegisterType((*InstanceNetworkInterfaceAttachment)(nil), "opsee.aws.ec2.InstanceNetworkInterfaceAttachment")
	proto.RegisterType((*InstancePrivateIpAddress)(nil), "opsee.aws.ec2.InstancePrivateIpAddress")
	proto.RegisterType((*InstanceState)(nil), "opsee.aws.ec2.InstanceState")
	proto.RegisterType((*IpPermission)(nil), "opsee.aws.ec2.IpPermission")
	proto.RegisterType((*IpRange)(nil), "opsee.aws.ec2.IpRange")
	proto.RegisterType((*Monitoring)(nil), "opsee.aws.ec2.Monitoring")
	proto.RegisterType((*Placement)(nil), "opsee.aws.ec2.Placement")
	proto.RegisterType((*PrefixListId)(nil), "opsee.aws.ec2.PrefixListId")
	proto.RegisterType((*ProductCode)(nil), "opsee.aws.ec2.ProductCode")
	proto.RegisterType((*SecurityGroup)(nil), "opsee.aws.ec2.SecurityGroup")
	proto.RegisterType((*StateReason)(nil), "opsee.aws.ec2.StateReason")
	proto.RegisterType((*Subnet)(nil), "opsee.aws.ec2.Subnet")
	proto.RegisterType((*Tag)(nil), "opsee.aws.ec2.Tag")
	proto.RegisterType((*UserIdGroupPair)(nil), "opsee.aws.ec2.UserIdGroupPair")
	proto.RegisterType((*Vpc)(nil), "opsee.aws.ec2.Vpc")
}
func (this *EbsInstanceBlockDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EbsInstanceBlockDevice)
	if !ok {
		that2, ok := that.(EbsInstanceBlockDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AttachTime != nil && that1.AttachTime != nil {
		if *this.AttachTime != *that1.AttachTime {
			return false
		}
	} else if this.AttachTime != nil {
		return false
	} else if that1.AttachTime != nil {
		return false
	}
	if this.DeleteOnTermination != nil && that1.DeleteOnTermination != nil {
		if *this.DeleteOnTermination != *that1.DeleteOnTermination {
			return false
		}
	} else if this.DeleteOnTermination != nil {
		return false
	} else if that1.DeleteOnTermination != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.VolumeId != nil && that1.VolumeId != nil {
		if *this.VolumeId != *that1.VolumeId {
			return false
		}
	} else if this.VolumeId != nil {
		return false
	} else if that1.VolumeId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GroupIdentifier) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GroupIdentifier)
	if !ok {
		that2, ok := that.(GroupIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != nil && that1.GroupId != nil {
		if *this.GroupId != *that1.GroupId {
			return false
		}
	} else if this.GroupId != nil {
		return false
	} else if that1.GroupId != nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IamInstanceProfile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IamInstanceProfile)
	if !ok {
		that2, ok := that.(IamInstanceProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Arn != nil && that1.Arn != nil {
		if *this.Arn != *that1.Arn {
			return false
		}
	} else if this.Arn != nil {
		return false
	} else if that1.Arn != nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Instance)
	if !ok {
		that2, ok := that.(Instance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AmiLaunchIndex != nil && that1.AmiLaunchIndex != nil {
		if *this.AmiLaunchIndex != *that1.AmiLaunchIndex {
			return false
		}
	} else if this.AmiLaunchIndex != nil {
		return false
	} else if that1.AmiLaunchIndex != nil {
		return false
	}
	if this.Architecture != nil && that1.Architecture != nil {
		if *this.Architecture != *that1.Architecture {
			return false
		}
	} else if this.Architecture != nil {
		return false
	} else if that1.Architecture != nil {
		return false
	}
	if len(this.BlockDeviceMappings) != len(that1.BlockDeviceMappings) {
		return false
	}
	for i := range this.BlockDeviceMappings {
		if !this.BlockDeviceMappings[i].Equal(that1.BlockDeviceMappings[i]) {
			return false
		}
	}
	if this.ClientToken != nil && that1.ClientToken != nil {
		if *this.ClientToken != *that1.ClientToken {
			return false
		}
	} else if this.ClientToken != nil {
		return false
	} else if that1.ClientToken != nil {
		return false
	}
	if this.EbsOptimized != nil && that1.EbsOptimized != nil {
		if *this.EbsOptimized != *that1.EbsOptimized {
			return false
		}
	} else if this.EbsOptimized != nil {
		return false
	} else if that1.EbsOptimized != nil {
		return false
	}
	if this.Hypervisor != nil && that1.Hypervisor != nil {
		if *this.Hypervisor != *that1.Hypervisor {
			return false
		}
	} else if this.Hypervisor != nil {
		return false
	} else if that1.Hypervisor != nil {
		return false
	}
	if !this.IamInstanceProfile.Equal(that1.IamInstanceProfile) {
		return false
	}
	if this.ImageId != nil && that1.ImageId != nil {
		if *this.ImageId != *that1.ImageId {
			return false
		}
	} else if this.ImageId != nil {
		return false
	} else if that1.ImageId != nil {
		return false
	}
	if this.InstanceId != nil && that1.InstanceId != nil {
		if *this.InstanceId != *that1.InstanceId {
			return false
		}
	} else if this.InstanceId != nil {
		return false
	} else if that1.InstanceId != nil {
		return false
	}
	if this.InstanceLifecycle != nil && that1.InstanceLifecycle != nil {
		if *this.InstanceLifecycle != *that1.InstanceLifecycle {
			return false
		}
	} else if this.InstanceLifecycle != nil {
		return false
	} else if that1.InstanceLifecycle != nil {
		return false
	}
	if this.InstanceType != nil && that1.InstanceType != nil {
		if *this.InstanceType != *that1.InstanceType {
			return false
		}
	} else if this.InstanceType != nil {
		return false
	} else if that1.InstanceType != nil {
		return false
	}
	if this.KernelId != nil && that1.KernelId != nil {
		if *this.KernelId != *that1.KernelId {
			return false
		}
	} else if this.KernelId != nil {
		return false
	} else if that1.KernelId != nil {
		return false
	}
	if this.KeyName != nil && that1.KeyName != nil {
		if *this.KeyName != *that1.KeyName {
			return false
		}
	} else if this.KeyName != nil {
		return false
	} else if that1.KeyName != nil {
		return false
	}
	if this.LaunchTime != nil && that1.LaunchTime != nil {
		if *this.LaunchTime != *that1.LaunchTime {
			return false
		}
	} else if this.LaunchTime != nil {
		return false
	} else if that1.LaunchTime != nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	if len(this.NetworkInterfaces) != len(that1.NetworkInterfaces) {
		return false
	}
	for i := range this.NetworkInterfaces {
		if !this.NetworkInterfaces[i].Equal(that1.NetworkInterfaces[i]) {
			return false
		}
	}
	if !this.Placement.Equal(that1.Placement) {
		return false
	}
	if this.Platform != nil && that1.Platform != nil {
		if *this.Platform != *that1.Platform {
			return false
		}
	} else if this.Platform != nil {
		return false
	} else if that1.Platform != nil {
		return false
	}
	if this.PrivateDnsName != nil && that1.PrivateDnsName != nil {
		if *this.PrivateDnsName != *that1.PrivateDnsName {
			return false
		}
	} else if this.PrivateDnsName != nil {
		return false
	} else if that1.PrivateDnsName != nil {
		return false
	}
	if this.PrivateIpAddress != nil && that1.PrivateIpAddress != nil {
		if *this.PrivateIpAddress != *that1.PrivateIpAddress {
			return false
		}
	} else if this.PrivateIpAddress != nil {
		return false
	} else if that1.PrivateIpAddress != nil {
		return false
	}
	if len(this.ProductCodes) != len(that1.ProductCodes) {
		return false
	}
	for i := range this.ProductCodes {
		if !this.ProductCodes[i].Equal(that1.ProductCodes[i]) {
			return false
		}
	}
	if this.PublicDnsName != nil && that1.PublicDnsName != nil {
		if *this.PublicDnsName != *that1.PublicDnsName {
			return false
		}
	} else if this.PublicDnsName != nil {
		return false
	} else if that1.PublicDnsName != nil {
		return false
	}
	if this.PublicIpAddress != nil && that1.PublicIpAddress != nil {
		if *this.PublicIpAddress != *that1.PublicIpAddress {
			return false
		}
	} else if this.PublicIpAddress != nil {
		return false
	} else if that1.PublicIpAddress != nil {
		return false
	}
	if this.RamdiskId != nil && that1.RamdiskId != nil {
		if *this.RamdiskId != *that1.RamdiskId {
			return false
		}
	} else if this.RamdiskId != nil {
		return false
	} else if that1.RamdiskId != nil {
		return false
	}
	if this.RootDeviceName != nil && that1.RootDeviceName != nil {
		if *this.RootDeviceName != *that1.RootDeviceName {
			return false
		}
	} else if this.RootDeviceName != nil {
		return false
	} else if that1.RootDeviceName != nil {
		return false
	}
	if this.RootDeviceType != nil && that1.RootDeviceType != nil {
		if *this.RootDeviceType != *that1.RootDeviceType {
			return false
		}
	} else if this.RootDeviceType != nil {
		return false
	} else if that1.RootDeviceType != nil {
		return false
	}
	if len(this.SecurityGroups) != len(that1.SecurityGroups) {
		return false
	}
	for i := range this.SecurityGroups {
		if !this.SecurityGroups[i].Equal(that1.SecurityGroups[i]) {
			return false
		}
	}
	if this.SourceDestCheck != nil && that1.SourceDestCheck != nil {
		if *this.SourceDestCheck != *that1.SourceDestCheck {
			return false
		}
	} else if this.SourceDestCheck != nil {
		return false
	} else if that1.SourceDestCheck != nil {
		return false
	}
	if this.SpotInstanceRequestId != nil && that1.SpotInstanceRequestId != nil {
		if *this.SpotInstanceRequestId != *that1.SpotInstanceRequestId {
			return false
		}
	} else if this.SpotInstanceRequestId != nil {
		return false
	} else if that1.SpotInstanceRequestId != nil {
		return false
	}
	if this.SriovNetSupport != nil && that1.SriovNetSupport != nil {
		if *this.SriovNetSupport != *that1.SriovNetSupport {
			return false
		}
	} else if this.SriovNetSupport != nil {
		return false
	} else if that1.SriovNetSupport != nil {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	if !this.StateReason.Equal(that1.StateReason) {
		return false
	}
	if this.StateTransitionReason != nil && that1.StateTransitionReason != nil {
		if *this.StateTransitionReason != *that1.StateTransitionReason {
			return false
		}
	} else if this.StateTransitionReason != nil {
		return false
	} else if that1.StateTransitionReason != nil {
		return false
	}
	if this.SubnetId != nil && that1.SubnetId != nil {
		if *this.SubnetId != *that1.SubnetId {
			return false
		}
	} else if this.SubnetId != nil {
		return false
	} else if that1.SubnetId != nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.VirtualizationType != nil && that1.VirtualizationType != nil {
		if *this.VirtualizationType != *that1.VirtualizationType {
			return false
		}
	} else if this.VirtualizationType != nil {
		return false
	} else if that1.VirtualizationType != nil {
		return false
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstanceBlockDeviceMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceBlockDeviceMapping)
	if !ok {
		that2, ok := that.(InstanceBlockDeviceMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceName != nil && that1.DeviceName != nil {
		if *this.DeviceName != *that1.DeviceName {
			return false
		}
	} else if this.DeviceName != nil {
		return false
	} else if that1.DeviceName != nil {
		return false
	}
	if !this.Ebs.Equal(that1.Ebs) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstanceNetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceNetworkInterface)
	if !ok {
		that2, ok := that.(InstanceNetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Association.Equal(that1.Association) {
		return false
	}
	if !this.Attachment.Equal(that1.Attachment) {
		return false
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return false
		}
	} else if this.Description != nil {
		return false
	} else if that1.Description != nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if this.MacAddress != nil && that1.MacAddress != nil {
		if *this.MacAddress != *that1.MacAddress {
			return false
		}
	} else if this.MacAddress != nil {
		return false
	} else if that1.MacAddress != nil {
		return false
	}
	if this.NetworkInterfaceId != nil && that1.NetworkInterfaceId != nil {
		if *this.NetworkInterfaceId != *that1.NetworkInterfaceId {
			return false
		}
	} else if this.NetworkInterfaceId != nil {
		return false
	} else if that1.NetworkInterfaceId != nil {
		return false
	}
	if this.OwnerId != nil && that1.OwnerId != nil {
		if *this.OwnerId != *that1.OwnerId {
			return false
		}
	} else if this.OwnerId != nil {
		return false
	} else if that1.OwnerId != nil {
		return false
	}
	if this.PrivateDnsName != nil && that1.PrivateDnsName != nil {
		if *this.PrivateDnsName != *that1.PrivateDnsName {
			return false
		}
	} else if this.PrivateDnsName != nil {
		return false
	} else if that1.PrivateDnsName != nil {
		return false
	}
	if this.PrivateIpAddress != nil && that1.PrivateIpAddress != nil {
		if *this.PrivateIpAddress != *that1.PrivateIpAddress {
			return false
		}
	} else if this.PrivateIpAddress != nil {
		return false
	} else if that1.PrivateIpAddress != nil {
		return false
	}
	if len(this.PrivateIpAddresses) != len(that1.PrivateIpAddresses) {
		return false
	}
	for i := range this.PrivateIpAddresses {
		if !this.PrivateIpAddresses[i].Equal(that1.PrivateIpAddresses[i]) {
			return false
		}
	}
	if this.SourceDestCheck != nil && that1.SourceDestCheck != nil {
		if *this.SourceDestCheck != *that1.SourceDestCheck {
			return false
		}
	} else if this.SourceDestCheck != nil {
		return false
	} else if that1.SourceDestCheck != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.SubnetId != nil && that1.SubnetId != nil {
		if *this.SubnetId != *that1.SubnetId {
			return false
		}
	} else if this.SubnetId != nil {
		return false
	} else if that1.SubnetId != nil {
		return false
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstanceNetworkInterfaceAssociation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceNetworkInterfaceAssociation)
	if !ok {
		that2, ok := that.(InstanceNetworkInterfaceAssociation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.IpOwnerId != nil && that1.IpOwnerId != nil {
		if *this.IpOwnerId != *that1.IpOwnerId {
			return false
		}
	} else if this.IpOwnerId != nil {
		return false
	} else if that1.IpOwnerId != nil {
		return false
	}
	if this.PublicDnsName != nil && that1.PublicDnsName != nil {
		if *this.PublicDnsName != *that1.PublicDnsName {
			return false
		}
	} else if this.PublicDnsName != nil {
		return false
	} else if that1.PublicDnsName != nil {
		return false
	}
	if this.PublicIp != nil && that1.PublicIp != nil {
		if *this.PublicIp != *that1.PublicIp {
			return false
		}
	} else if this.PublicIp != nil {
		return false
	} else if that1.PublicIp != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstanceNetworkInterfaceAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceNetworkInterfaceAttachment)
	if !ok {
		that2, ok := that.(InstanceNetworkInterfaceAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AttachTime != nil && that1.AttachTime != nil {
		if *this.AttachTime != *that1.AttachTime {
			return false
		}
	} else if this.AttachTime != nil {
		return false
	} else if that1.AttachTime != nil {
		return false
	}
	if this.AttachmentId != nil && that1.AttachmentId != nil {
		if *this.AttachmentId != *that1.AttachmentId {
			return false
		}
	} else if this.AttachmentId != nil {
		return false
	} else if that1.AttachmentId != nil {
		return false
	}
	if this.DeleteOnTermination != nil && that1.DeleteOnTermination != nil {
		if *this.DeleteOnTermination != *that1.DeleteOnTermination {
			return false
		}
	} else if this.DeleteOnTermination != nil {
		return false
	} else if that1.DeleteOnTermination != nil {
		return false
	}
	if this.DeviceIndex != nil && that1.DeviceIndex != nil {
		if *this.DeviceIndex != *that1.DeviceIndex {
			return false
		}
	} else if this.DeviceIndex != nil {
		return false
	} else if that1.DeviceIndex != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstancePrivateIpAddress) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstancePrivateIpAddress)
	if !ok {
		that2, ok := that.(InstancePrivateIpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Association.Equal(that1.Association) {
		return false
	}
	if this.Primary != nil && that1.Primary != nil {
		if *this.Primary != *that1.Primary {
			return false
		}
	} else if this.Primary != nil {
		return false
	} else if that1.Primary != nil {
		return false
	}
	if this.PrivateDnsName != nil && that1.PrivateDnsName != nil {
		if *this.PrivateDnsName != *that1.PrivateDnsName {
			return false
		}
	} else if this.PrivateDnsName != nil {
		return false
	} else if that1.PrivateDnsName != nil {
		return false
	}
	if this.PrivateIpAddress != nil && that1.PrivateIpAddress != nil {
		if *this.PrivateIpAddress != *that1.PrivateIpAddress {
			return false
		}
	} else if this.PrivateIpAddress != nil {
		return false
	} else if that1.PrivateIpAddress != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstanceState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceState)
	if !ok {
		that2, ok := that.(InstanceState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IpPermission) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IpPermission)
	if !ok {
		that2, ok := that.(IpPermission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FromPort != nil && that1.FromPort != nil {
		if *this.FromPort != *that1.FromPort {
			return false
		}
	} else if this.FromPort != nil {
		return false
	} else if that1.FromPort != nil {
		return false
	}
	if this.IpProtocol != nil && that1.IpProtocol != nil {
		if *this.IpProtocol != *that1.IpProtocol {
			return false
		}
	} else if this.IpProtocol != nil {
		return false
	} else if that1.IpProtocol != nil {
		return false
	}
	if len(this.IpRanges) != len(that1.IpRanges) {
		return false
	}
	for i := range this.IpRanges {
		if !this.IpRanges[i].Equal(that1.IpRanges[i]) {
			return false
		}
	}
	if len(this.PrefixListIds) != len(that1.PrefixListIds) {
		return false
	}
	for i := range this.PrefixListIds {
		if !this.PrefixListIds[i].Equal(that1.PrefixListIds[i]) {
			return false
		}
	}
	if this.ToPort != nil && that1.ToPort != nil {
		if *this.ToPort != *that1.ToPort {
			return false
		}
	} else if this.ToPort != nil {
		return false
	} else if that1.ToPort != nil {
		return false
	}
	if len(this.UserIdGroupPairs) != len(that1.UserIdGroupPairs) {
		return false
	}
	for i := range this.UserIdGroupPairs {
		if !this.UserIdGroupPairs[i].Equal(that1.UserIdGroupPairs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IpRange) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IpRange)
	if !ok {
		that2, ok := that.(IpRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CidrIp != nil && that1.CidrIp != nil {
		if *this.CidrIp != *that1.CidrIp {
			return false
		}
	} else if this.CidrIp != nil {
		return false
	} else if that1.CidrIp != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Monitoring) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Monitoring)
	if !ok {
		that2, ok := that.(Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Placement) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Placement)
	if !ok {
		that2, ok := that.(Placement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Affinity != nil && that1.Affinity != nil {
		if *this.Affinity != *that1.Affinity {
			return false
		}
	} else if this.Affinity != nil {
		return false
	} else if that1.Affinity != nil {
		return false
	}
	if this.AvailabilityZone != nil && that1.AvailabilityZone != nil {
		if *this.AvailabilityZone != *that1.AvailabilityZone {
			return false
		}
	} else if this.AvailabilityZone != nil {
		return false
	} else if that1.AvailabilityZone != nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if this.HostId != nil && that1.HostId != nil {
		if *this.HostId != *that1.HostId {
			return false
		}
	} else if this.HostId != nil {
		return false
	} else if that1.HostId != nil {
		return false
	}
	if this.Tenancy != nil && that1.Tenancy != nil {
		if *this.Tenancy != *that1.Tenancy {
			return false
		}
	} else if this.Tenancy != nil {
		return false
	} else if that1.Tenancy != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PrefixListId) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PrefixListId)
	if !ok {
		that2, ok := that.(PrefixListId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PrefixListId != nil && that1.PrefixListId != nil {
		if *this.PrefixListId != *that1.PrefixListId {
			return false
		}
	} else if this.PrefixListId != nil {
		return false
	} else if that1.PrefixListId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProductCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProductCode)
	if !ok {
		that2, ok := that.(ProductCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProductCodeId != nil && that1.ProductCodeId != nil {
		if *this.ProductCodeId != *that1.ProductCodeId {
			return false
		}
	} else if this.ProductCodeId != nil {
		return false
	} else if that1.ProductCodeId != nil {
		return false
	}
	if this.ProductCodeType != nil && that1.ProductCodeType != nil {
		if *this.ProductCodeType != *that1.ProductCodeType {
			return false
		}
	} else if this.ProductCodeType != nil {
		return false
	} else if that1.ProductCodeType != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SecurityGroup)
	if !ok {
		that2, ok := that.(SecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return false
		}
	} else if this.Description != nil {
		return false
	} else if that1.Description != nil {
		return false
	}
	if this.GroupId != nil && that1.GroupId != nil {
		if *this.GroupId != *that1.GroupId {
			return false
		}
	} else if this.GroupId != nil {
		return false
	} else if that1.GroupId != nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if len(this.IpPermissions) != len(that1.IpPermissions) {
		return false
	}
	for i := range this.IpPermissions {
		if !this.IpPermissions[i].Equal(that1.IpPermissions[i]) {
			return false
		}
	}
	if len(this.IpPermissionsEgress) != len(that1.IpPermissionsEgress) {
		return false
	}
	for i := range this.IpPermissionsEgress {
		if !this.IpPermissionsEgress[i].Equal(that1.IpPermissionsEgress[i]) {
			return false
		}
	}
	if this.OwnerId != nil && that1.OwnerId != nil {
		if *this.OwnerId != *that1.OwnerId {
			return false
		}
	} else if this.OwnerId != nil {
		return false
	} else if that1.OwnerId != nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StateReason) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StateReason)
	if !ok {
		that2, ok := that.(StateReason)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subnet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subnet)
	if !ok {
		that2, ok := that.(Subnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AvailabilityZone != nil && that1.AvailabilityZone != nil {
		if *this.AvailabilityZone != *that1.AvailabilityZone {
			return false
		}
	} else if this.AvailabilityZone != nil {
		return false
	} else if that1.AvailabilityZone != nil {
		return false
	}
	if this.AvailableIpAddressCount != nil && that1.AvailableIpAddressCount != nil {
		if *this.AvailableIpAddressCount != *that1.AvailableIpAddressCount {
			return false
		}
	} else if this.AvailableIpAddressCount != nil {
		return false
	} else if that1.AvailableIpAddressCount != nil {
		return false
	}
	if this.CidrBlock != nil && that1.CidrBlock != nil {
		if *this.CidrBlock != *that1.CidrBlock {
			return false
		}
	} else if this.CidrBlock != nil {
		return false
	} else if that1.CidrBlock != nil {
		return false
	}
	if this.DefaultForAz != nil && that1.DefaultForAz != nil {
		if *this.DefaultForAz != *that1.DefaultForAz {
			return false
		}
	} else if this.DefaultForAz != nil {
		return false
	} else if that1.DefaultForAz != nil {
		return false
	}
	if this.MapPublicIpOnLaunch != nil && that1.MapPublicIpOnLaunch != nil {
		if *this.MapPublicIpOnLaunch != *that1.MapPublicIpOnLaunch {
			return false
		}
	} else if this.MapPublicIpOnLaunch != nil {
		return false
	} else if that1.MapPublicIpOnLaunch != nil {
		return false
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if this.SubnetId != nil && that1.SubnetId != nil {
		if *this.SubnetId != *that1.SubnetId {
			return false
		}
	} else if this.SubnetId != nil {
		return false
	} else if that1.SubnetId != nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != nil && that1.Key != nil {
		if *this.Key != *that1.Key {
			return false
		}
	} else if this.Key != nil {
		return false
	} else if that1.Key != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserIdGroupPair) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserIdGroupPair)
	if !ok {
		that2, ok := that.(UserIdGroupPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != nil && that1.GroupId != nil {
		if *this.GroupId != *that1.GroupId {
			return false
		}
	} else if this.GroupId != nil {
		return false
	} else if that1.GroupId != nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if this.PeeringStatus != nil && that1.PeeringStatus != nil {
		if *this.PeeringStatus != *that1.PeeringStatus {
			return false
		}
	} else if this.PeeringStatus != nil {
		return false
	} else if that1.PeeringStatus != nil {
		return false
	}
	if this.UserId != nil && that1.UserId != nil {
		if *this.UserId != *that1.UserId {
			return false
		}
	} else if this.UserId != nil {
		return false
	} else if that1.UserId != nil {
		return false
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if this.VpcPeeringConnectionId != nil && that1.VpcPeeringConnectionId != nil {
		if *this.VpcPeeringConnectionId != *that1.VpcPeeringConnectionId {
			return false
		}
	} else if this.VpcPeeringConnectionId != nil {
		return false
	} else if that1.VpcPeeringConnectionId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Vpc) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Vpc)
	if !ok {
		that2, ok := that.(Vpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CidrBlock != nil && that1.CidrBlock != nil {
		if *this.CidrBlock != *that1.CidrBlock {
			return false
		}
	} else if this.CidrBlock != nil {
		return false
	} else if that1.CidrBlock != nil {
		return false
	}
	if this.DhcpOptionsId != nil && that1.DhcpOptionsId != nil {
		if *this.DhcpOptionsId != *that1.DhcpOptionsId {
			return false
		}
	} else if this.DhcpOptionsId != nil {
		return false
	} else if that1.DhcpOptionsId != nil {
		return false
	}
	if this.InstanceTenancy != nil && that1.InstanceTenancy != nil {
		if *this.InstanceTenancy != *that1.InstanceTenancy {
			return false
		}
	} else if this.InstanceTenancy != nil {
		return false
	} else if that1.InstanceTenancy != nil {
		return false
	}
	if this.IsDefault != nil && that1.IsDefault != nil {
		if *this.IsDefault != *that1.IsDefault {
			return false
		}
	} else if this.IsDefault != nil {
		return false
	} else if that1.IsDefault != nil {
		return false
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.VpcId != nil && that1.VpcId != nil {
		if *this.VpcId != *that1.VpcId {
			return false
		}
	} else if this.VpcId != nil {
		return false
	} else if that1.VpcId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type EbsInstanceBlockDeviceGetter interface {
	GetEbsInstanceBlockDevice() *EbsInstanceBlockDevice
}

var GraphQLEbsInstanceBlockDeviceType *github_com_graphql_go_graphql.Object

type GroupIdentifierGetter interface {
	GetGroupIdentifier() *GroupIdentifier
}

var GraphQLGroupIdentifierType *github_com_graphql_go_graphql.Object

type IamInstanceProfileGetter interface {
	GetIamInstanceProfile() *IamInstanceProfile
}

var GraphQLIamInstanceProfileType *github_com_graphql_go_graphql.Object

type InstanceGetter interface {
	GetInstance() *Instance
}

var GraphQLInstanceType *github_com_graphql_go_graphql.Object

type InstanceBlockDeviceMappingGetter interface {
	GetInstanceBlockDeviceMapping() *InstanceBlockDeviceMapping
}

var GraphQLInstanceBlockDeviceMappingType *github_com_graphql_go_graphql.Object

type InstanceNetworkInterfaceGetter interface {
	GetInstanceNetworkInterface() *InstanceNetworkInterface
}

var GraphQLInstanceNetworkInterfaceType *github_com_graphql_go_graphql.Object

type InstanceNetworkInterfaceAssociationGetter interface {
	GetInstanceNetworkInterfaceAssociation() *InstanceNetworkInterfaceAssociation
}

var GraphQLInstanceNetworkInterfaceAssociationType *github_com_graphql_go_graphql.Object

type InstanceNetworkInterfaceAttachmentGetter interface {
	GetInstanceNetworkInterfaceAttachment() *InstanceNetworkInterfaceAttachment
}

var GraphQLInstanceNetworkInterfaceAttachmentType *github_com_graphql_go_graphql.Object

type InstancePrivateIpAddressGetter interface {
	GetInstancePrivateIpAddress() *InstancePrivateIpAddress
}

var GraphQLInstancePrivateIpAddressType *github_com_graphql_go_graphql.Object

type InstanceStateGetter interface {
	GetInstanceState() *InstanceState
}

var GraphQLInstanceStateType *github_com_graphql_go_graphql.Object

type IpPermissionGetter interface {
	GetIpPermission() *IpPermission
}

var GraphQLIpPermissionType *github_com_graphql_go_graphql.Object

type IpRangeGetter interface {
	GetIpRange() *IpRange
}

var GraphQLIpRangeType *github_com_graphql_go_graphql.Object

type MonitoringGetter interface {
	GetMonitoring() *Monitoring
}

var GraphQLMonitoringType *github_com_graphql_go_graphql.Object

type PlacementGetter interface {
	GetPlacement() *Placement
}

var GraphQLPlacementType *github_com_graphql_go_graphql.Object

type PrefixListIdGetter interface {
	GetPrefixListId() *PrefixListId
}

var GraphQLPrefixListIdType *github_com_graphql_go_graphql.Object

type ProductCodeGetter interface {
	GetProductCode() *ProductCode
}

var GraphQLProductCodeType *github_com_graphql_go_graphql.Object

type SecurityGroupGetter interface {
	GetSecurityGroup() *SecurityGroup
}

var GraphQLSecurityGroupType *github_com_graphql_go_graphql.Object

type StateReasonGetter interface {
	GetStateReason() *StateReason
}

var GraphQLStateReasonType *github_com_graphql_go_graphql.Object

type SubnetGetter interface {
	GetSubnet() *Subnet
}

var GraphQLSubnetType *github_com_graphql_go_graphql.Object

type TagGetter interface {
	GetTag() *Tag
}

var GraphQLTagType *github_com_graphql_go_graphql.Object

type UserIdGroupPairGetter interface {
	GetUserIdGroupPair() *UserIdGroupPair
}

var GraphQLUserIdGroupPairType *github_com_graphql_go_graphql.Object

type VpcGetter interface {
	GetVpc() *Vpc
}

var GraphQLVpcType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLEbsInstanceBlockDeviceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2EbsInstanceBlockDevice",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AttachTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EbsInstanceBlockDevice)
						if ok {
							if obj.AttachTime == nil {
								return nil, nil
							}
							return obj.GetAttachTime(), nil
						}
						inter, ok := p.Source.(EbsInstanceBlockDeviceGetter)
						if ok {
							face := inter.GetEbsInstanceBlockDevice()
							if face == nil {
								return nil, nil
							}
							if face.AttachTime == nil {
								return nil, nil
							}
							return face.GetAttachTime(), nil
						}
						return nil, fmt.Errorf("field AttachTime not resolved")
					},
				},
				"DeleteOnTermination": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EbsInstanceBlockDevice)
						if ok {
							if obj.DeleteOnTermination == nil {
								return nil, nil
							}
							return obj.GetDeleteOnTermination(), nil
						}
						inter, ok := p.Source.(EbsInstanceBlockDeviceGetter)
						if ok {
							face := inter.GetEbsInstanceBlockDevice()
							if face == nil {
								return nil, nil
							}
							if face.DeleteOnTermination == nil {
								return nil, nil
							}
							return face.GetDeleteOnTermination(), nil
						}
						return nil, fmt.Errorf("field DeleteOnTermination not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EbsInstanceBlockDevice)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(EbsInstanceBlockDeviceGetter)
						if ok {
							face := inter.GetEbsInstanceBlockDevice()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"VolumeId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EbsInstanceBlockDevice)
						if ok {
							if obj.VolumeId == nil {
								return nil, nil
							}
							return obj.GetVolumeId(), nil
						}
						inter, ok := p.Source.(EbsInstanceBlockDeviceGetter)
						if ok {
							face := inter.GetEbsInstanceBlockDevice()
							if face == nil {
								return nil, nil
							}
							if face.VolumeId == nil {
								return nil, nil
							}
							return face.GetVolumeId(), nil
						}
						return nil, fmt.Errorf("field VolumeId not resolved")
					},
				},
			}
		}),
	})
	GraphQLGroupIdentifierType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2GroupIdentifier",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"GroupId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GroupIdentifier)
						if ok {
							if obj.GroupId == nil {
								return nil, nil
							}
							return obj.GetGroupId(), nil
						}
						inter, ok := p.Source.(GroupIdentifierGetter)
						if ok {
							face := inter.GetGroupIdentifier()
							if face == nil {
								return nil, nil
							}
							if face.GroupId == nil {
								return nil, nil
							}
							return face.GetGroupId(), nil
						}
						return nil, fmt.Errorf("field GroupId not resolved")
					},
				},
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GroupIdentifier)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(GroupIdentifierGetter)
						if ok {
							face := inter.GetGroupIdentifier()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
			}
		}),
	})
	GraphQLIamInstanceProfileType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2IamInstanceProfile",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Arn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IamInstanceProfile)
						if ok {
							if obj.Arn == nil {
								return nil, nil
							}
							return obj.GetArn(), nil
						}
						inter, ok := p.Source.(IamInstanceProfileGetter)
						if ok {
							face := inter.GetIamInstanceProfile()
							if face == nil {
								return nil, nil
							}
							if face.Arn == nil {
								return nil, nil
							}
							return face.GetArn(), nil
						}
						return nil, fmt.Errorf("field Arn not resolved")
					},
				},
				"Id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IamInstanceProfile)
						if ok {
							if obj.Id == nil {
								return nil, nil
							}
							return obj.GetId(), nil
						}
						inter, ok := p.Source.(IamInstanceProfileGetter)
						if ok {
							face := inter.GetIamInstanceProfile()
							if face == nil {
								return nil, nil
							}
							if face.Id == nil {
								return nil, nil
							}
							return face.GetId(), nil
						}
						return nil, fmt.Errorf("field Id not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Instance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AmiLaunchIndex": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.AmiLaunchIndex == nil {
								return nil, nil
							}
							return obj.GetAmiLaunchIndex(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.AmiLaunchIndex == nil {
								return nil, nil
							}
							return face.GetAmiLaunchIndex(), nil
						}
						return nil, fmt.Errorf("field AmiLaunchIndex not resolved")
					},
				},
				"Architecture": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.Architecture == nil {
								return nil, nil
							}
							return obj.GetArchitecture(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.Architecture == nil {
								return nil, nil
							}
							return face.GetArchitecture(), nil
						}
						return nil, fmt.Errorf("field Architecture not resolved")
					},
				},
				"BlockDeviceMappings": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstanceBlockDeviceMappingType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							return obj.BlockDeviceMappings, nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							return face.BlockDeviceMappings, nil
						}
						return nil, fmt.Errorf("field BlockDeviceMappings not resolved")
					},
				},
				"ClientToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.ClientToken == nil {
								return nil, nil
							}
							return obj.GetClientToken(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.ClientToken == nil {
								return nil, nil
							}
							return face.GetClientToken(), nil
						}
						return nil, fmt.Errorf("field ClientToken not resolved")
					},
				},
				"EbsOptimized": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.EbsOptimized == nil {
								return nil, nil
							}
							return obj.GetEbsOptimized(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.EbsOptimized == nil {
								return nil, nil
							}
							return face.GetEbsOptimized(), nil
						}
						return nil, fmt.Errorf("field EbsOptimized not resolved")
					},
				},
				"Hypervisor": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.Hypervisor == nil {
								return nil, nil
							}
							return obj.GetHypervisor(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.Hypervisor == nil {
								return nil, nil
							}
							return face.GetHypervisor(), nil
						}
						return nil, fmt.Errorf("field Hypervisor not resolved")
					},
				},
				"IamInstanceProfile": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLIamInstanceProfileType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.IamInstanceProfile == nil {
								return nil, nil
							}
							return obj.GetIamInstanceProfile(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.IamInstanceProfile == nil {
								return nil, nil
							}
							return face.GetIamInstanceProfile(), nil
						}
						return nil, fmt.Errorf("field IamInstanceProfile not resolved")
					},
				},
				"ImageId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.ImageId == nil {
								return nil, nil
							}
							return obj.GetImageId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.ImageId == nil {
								return nil, nil
							}
							return face.GetImageId(), nil
						}
						return nil, fmt.Errorf("field ImageId not resolved")
					},
				},
				"InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceId == nil {
								return nil, nil
							}
							return obj.GetInstanceId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceId == nil {
								return nil, nil
							}
							return face.GetInstanceId(), nil
						}
						return nil, fmt.Errorf("field InstanceId not resolved")
					},
				},
				"InstanceLifecycle": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceLifecycle == nil {
								return nil, nil
							}
							return obj.GetInstanceLifecycle(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceLifecycle == nil {
								return nil, nil
							}
							return face.GetInstanceLifecycle(), nil
						}
						return nil, fmt.Errorf("field InstanceLifecycle not resolved")
					},
				},
				"InstanceType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceType == nil {
								return nil, nil
							}
							return obj.GetInstanceType(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceType == nil {
								return nil, nil
							}
							return face.GetInstanceType(), nil
						}
						return nil, fmt.Errorf("field InstanceType not resolved")
					},
				},
				"KernelId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.KernelId == nil {
								return nil, nil
							}
							return obj.GetKernelId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.KernelId == nil {
								return nil, nil
							}
							return face.GetKernelId(), nil
						}
						return nil, fmt.Errorf("field KernelId not resolved")
					},
				},
				"KeyName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.KeyName == nil {
								return nil, nil
							}
							return obj.GetKeyName(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.KeyName == nil {
								return nil, nil
							}
							return face.GetKeyName(), nil
						}
						return nil, fmt.Errorf("field KeyName not resolved")
					},
				},
				"LaunchTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.LaunchTime == nil {
								return nil, nil
							}
							return obj.GetLaunchTime(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.LaunchTime == nil {
								return nil, nil
							}
							return face.GetLaunchTime(), nil
						}
						return nil, fmt.Errorf("field LaunchTime not resolved")
					},
				},
				"Monitoring": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLMonitoringType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.Monitoring == nil {
								return nil, nil
							}
							return obj.GetMonitoring(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.Monitoring == nil {
								return nil, nil
							}
							return face.GetMonitoring(), nil
						}
						return nil, fmt.Errorf("field Monitoring not resolved")
					},
				},
				"NetworkInterfaces": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstanceNetworkInterfaceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							return obj.NetworkInterfaces, nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							return face.NetworkInterfaces, nil
						}
						return nil, fmt.Errorf("field NetworkInterfaces not resolved")
					},
				},
				"Placement": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLPlacementType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.Placement == nil {
								return nil, nil
							}
							return obj.GetPlacement(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.Placement == nil {
								return nil, nil
							}
							return face.GetPlacement(), nil
						}
						return nil, fmt.Errorf("field Placement not resolved")
					},
				},
				"Platform": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.Platform == nil {
								return nil, nil
							}
							return obj.GetPlatform(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.Platform == nil {
								return nil, nil
							}
							return face.GetPlatform(), nil
						}
						return nil, fmt.Errorf("field Platform not resolved")
					},
				},
				"PrivateDnsName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.PrivateDnsName == nil {
								return nil, nil
							}
							return obj.GetPrivateDnsName(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.PrivateDnsName == nil {
								return nil, nil
							}
							return face.GetPrivateDnsName(), nil
						}
						return nil, fmt.Errorf("field PrivateDnsName not resolved")
					},
				},
				"PrivateIpAddress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.PrivateIpAddress == nil {
								return nil, nil
							}
							return obj.GetPrivateIpAddress(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.PrivateIpAddress == nil {
								return nil, nil
							}
							return face.GetPrivateIpAddress(), nil
						}
						return nil, fmt.Errorf("field PrivateIpAddress not resolved")
					},
				},
				"ProductCodes": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLProductCodeType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							return obj.ProductCodes, nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							return face.ProductCodes, nil
						}
						return nil, fmt.Errorf("field ProductCodes not resolved")
					},
				},
				"PublicDnsName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.PublicDnsName == nil {
								return nil, nil
							}
							return obj.GetPublicDnsName(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.PublicDnsName == nil {
								return nil, nil
							}
							return face.GetPublicDnsName(), nil
						}
						return nil, fmt.Errorf("field PublicDnsName not resolved")
					},
				},
				"PublicIpAddress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.PublicIpAddress == nil {
								return nil, nil
							}
							return obj.GetPublicIpAddress(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.PublicIpAddress == nil {
								return nil, nil
							}
							return face.GetPublicIpAddress(), nil
						}
						return nil, fmt.Errorf("field PublicIpAddress not resolved")
					},
				},
				"RamdiskId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.RamdiskId == nil {
								return nil, nil
							}
							return obj.GetRamdiskId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.RamdiskId == nil {
								return nil, nil
							}
							return face.GetRamdiskId(), nil
						}
						return nil, fmt.Errorf("field RamdiskId not resolved")
					},
				},
				"RootDeviceName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.RootDeviceName == nil {
								return nil, nil
							}
							return obj.GetRootDeviceName(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.RootDeviceName == nil {
								return nil, nil
							}
							return face.GetRootDeviceName(), nil
						}
						return nil, fmt.Errorf("field RootDeviceName not resolved")
					},
				},
				"RootDeviceType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.RootDeviceType == nil {
								return nil, nil
							}
							return obj.GetRootDeviceType(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.RootDeviceType == nil {
								return nil, nil
							}
							return face.GetRootDeviceType(), nil
						}
						return nil, fmt.Errorf("field RootDeviceType not resolved")
					},
				},
				"SecurityGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLGroupIdentifierType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							return obj.SecurityGroups, nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							return face.SecurityGroups, nil
						}
						return nil, fmt.Errorf("field SecurityGroups not resolved")
					},
				},
				"SourceDestCheck": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.SourceDestCheck == nil {
								return nil, nil
							}
							return obj.GetSourceDestCheck(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.SourceDestCheck == nil {
								return nil, nil
							}
							return face.GetSourceDestCheck(), nil
						}
						return nil, fmt.Errorf("field SourceDestCheck not resolved")
					},
				},
				"SpotInstanceRequestId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.SpotInstanceRequestId == nil {
								return nil, nil
							}
							return obj.GetSpotInstanceRequestId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.SpotInstanceRequestId == nil {
								return nil, nil
							}
							return face.GetSpotInstanceRequestId(), nil
						}
						return nil, fmt.Errorf("field SpotInstanceRequestId not resolved")
					},
				},
				"SriovNetSupport": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.SriovNetSupport == nil {
								return nil, nil
							}
							return obj.GetSriovNetSupport(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.SriovNetSupport == nil {
								return nil, nil
							}
							return face.GetSriovNetSupport(), nil
						}
						return nil, fmt.Errorf("field SriovNetSupport not resolved")
					},
				},
				"State": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLInstanceStateType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.State == nil {
								return nil, nil
							}
							return obj.GetState(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.State == nil {
								return nil, nil
							}
							return face.GetState(), nil
						}
						return nil, fmt.Errorf("field State not resolved")
					},
				},
				"StateReason": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLStateReasonType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.StateReason == nil {
								return nil, nil
							}
							return obj.GetStateReason(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.StateReason == nil {
								return nil, nil
							}
							return face.GetStateReason(), nil
						}
						return nil, fmt.Errorf("field StateReason not resolved")
					},
				},
				"StateTransitionReason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.StateTransitionReason == nil {
								return nil, nil
							}
							return obj.GetStateTransitionReason(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.StateTransitionReason == nil {
								return nil, nil
							}
							return face.GetStateTransitionReason(), nil
						}
						return nil, fmt.Errorf("field StateTransitionReason not resolved")
					},
				},
				"SubnetId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.SubnetId == nil {
								return nil, nil
							}
							return obj.GetSubnetId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.SubnetId == nil {
								return nil, nil
							}
							return face.GetSubnetId(), nil
						}
						return nil, fmt.Errorf("field SubnetId not resolved")
					},
				},
				"Tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field Tags not resolved")
					},
				},
				"VirtualizationType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.VirtualizationType == nil {
								return nil, nil
							}
							return obj.GetVirtualizationType(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.VirtualizationType == nil {
								return nil, nil
							}
							return face.GetVirtualizationType(), nil
						}
						return nil, fmt.Errorf("field VirtualizationType not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceBlockDeviceMappingType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstanceBlockDeviceMapping",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DeviceName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceBlockDeviceMapping)
						if ok {
							if obj.DeviceName == nil {
								return nil, nil
							}
							return obj.GetDeviceName(), nil
						}
						inter, ok := p.Source.(InstanceBlockDeviceMappingGetter)
						if ok {
							face := inter.GetInstanceBlockDeviceMapping()
							if face == nil {
								return nil, nil
							}
							if face.DeviceName == nil {
								return nil, nil
							}
							return face.GetDeviceName(), nil
						}
						return nil, fmt.Errorf("field DeviceName not resolved")
					},
				},
				"Ebs": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEbsInstanceBlockDeviceType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceBlockDeviceMapping)
						if ok {
							if obj.Ebs == nil {
								return nil, nil
							}
							return obj.GetEbs(), nil
						}
						inter, ok := p.Source.(InstanceBlockDeviceMappingGetter)
						if ok {
							face := inter.GetInstanceBlockDeviceMapping()
							if face == nil {
								return nil, nil
							}
							if face.Ebs == nil {
								return nil, nil
							}
							return face.GetEbs(), nil
						}
						return nil, fmt.Errorf("field Ebs not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceNetworkInterfaceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstanceNetworkInterface",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Association": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLInstanceNetworkInterfaceAssociationType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.Association == nil {
								return nil, nil
							}
							return obj.GetAssociation(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.Association == nil {
								return nil, nil
							}
							return face.GetAssociation(), nil
						}
						return nil, fmt.Errorf("field Association not resolved")
					},
				},
				"Attachment": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLInstanceNetworkInterfaceAttachmentType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.Attachment == nil {
								return nil, nil
							}
							return obj.GetAttachment(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.Attachment == nil {
								return nil, nil
							}
							return face.GetAttachment(), nil
						}
						return nil, fmt.Errorf("field Attachment not resolved")
					},
				},
				"Description": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.Description == nil {
								return nil, nil
							}
							return obj.GetDescription(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.Description == nil {
								return nil, nil
							}
							return face.GetDescription(), nil
						}
						return nil, fmt.Errorf("field Description not resolved")
					},
				},
				"Groups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLGroupIdentifierType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							return obj.Groups, nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							return face.Groups, nil
						}
						return nil, fmt.Errorf("field Groups not resolved")
					},
				},
				"MacAddress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.MacAddress == nil {
								return nil, nil
							}
							return obj.GetMacAddress(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.MacAddress == nil {
								return nil, nil
							}
							return face.GetMacAddress(), nil
						}
						return nil, fmt.Errorf("field MacAddress not resolved")
					},
				},
				"NetworkInterfaceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.NetworkInterfaceId == nil {
								return nil, nil
							}
							return obj.GetNetworkInterfaceId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.NetworkInterfaceId == nil {
								return nil, nil
							}
							return face.GetNetworkInterfaceId(), nil
						}
						return nil, fmt.Errorf("field NetworkInterfaceId not resolved")
					},
				},
				"OwnerId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.OwnerId == nil {
								return nil, nil
							}
							return obj.GetOwnerId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.OwnerId == nil {
								return nil, nil
							}
							return face.GetOwnerId(), nil
						}
						return nil, fmt.Errorf("field OwnerId not resolved")
					},
				},
				"PrivateDnsName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.PrivateDnsName == nil {
								return nil, nil
							}
							return obj.GetPrivateDnsName(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.PrivateDnsName == nil {
								return nil, nil
							}
							return face.GetPrivateDnsName(), nil
						}
						return nil, fmt.Errorf("field PrivateDnsName not resolved")
					},
				},
				"PrivateIpAddress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.PrivateIpAddress == nil {
								return nil, nil
							}
							return obj.GetPrivateIpAddress(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.PrivateIpAddress == nil {
								return nil, nil
							}
							return face.GetPrivateIpAddress(), nil
						}
						return nil, fmt.Errorf("field PrivateIpAddress not resolved")
					},
				},
				"PrivateIpAddresses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstancePrivateIpAddressType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							return obj.PrivateIpAddresses, nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							return face.PrivateIpAddresses, nil
						}
						return nil, fmt.Errorf("field PrivateIpAddresses not resolved")
					},
				},
				"SourceDestCheck": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.SourceDestCheck == nil {
								return nil, nil
							}
							return obj.GetSourceDestCheck(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.SourceDestCheck == nil {
								return nil, nil
							}
							return face.GetSourceDestCheck(), nil
						}
						return nil, fmt.Errorf("field SourceDestCheck not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"SubnetId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.SubnetId == nil {
								return nil, nil
							}
							return obj.GetSubnetId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.SubnetId == nil {
								return nil, nil
							}
							return face.GetSubnetId(), nil
						}
						return nil, fmt.Errorf("field SubnetId not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterface)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceGetter)
						if ok {
							face := inter.GetInstanceNetworkInterface()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceNetworkInterfaceAssociationType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstanceNetworkInterfaceAssociation",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"IpOwnerId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAssociation)
						if ok {
							if obj.IpOwnerId == nil {
								return nil, nil
							}
							return obj.GetIpOwnerId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAssociationGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAssociation()
							if face == nil {
								return nil, nil
							}
							if face.IpOwnerId == nil {
								return nil, nil
							}
							return face.GetIpOwnerId(), nil
						}
						return nil, fmt.Errorf("field IpOwnerId not resolved")
					},
				},
				"PublicDnsName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAssociation)
						if ok {
							if obj.PublicDnsName == nil {
								return nil, nil
							}
							return obj.GetPublicDnsName(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAssociationGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAssociation()
							if face == nil {
								return nil, nil
							}
							if face.PublicDnsName == nil {
								return nil, nil
							}
							return face.GetPublicDnsName(), nil
						}
						return nil, fmt.Errorf("field PublicDnsName not resolved")
					},
				},
				"PublicIp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAssociation)
						if ok {
							if obj.PublicIp == nil {
								return nil, nil
							}
							return obj.GetPublicIp(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAssociationGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAssociation()
							if face == nil {
								return nil, nil
							}
							if face.PublicIp == nil {
								return nil, nil
							}
							return face.GetPublicIp(), nil
						}
						return nil, fmt.Errorf("field PublicIp not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceNetworkInterfaceAttachmentType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstanceNetworkInterfaceAttachment",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AttachTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAttachment)
						if ok {
							if obj.AttachTime == nil {
								return nil, nil
							}
							return obj.GetAttachTime(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAttachmentGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAttachment()
							if face == nil {
								return nil, nil
							}
							if face.AttachTime == nil {
								return nil, nil
							}
							return face.GetAttachTime(), nil
						}
						return nil, fmt.Errorf("field AttachTime not resolved")
					},
				},
				"AttachmentId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAttachment)
						if ok {
							if obj.AttachmentId == nil {
								return nil, nil
							}
							return obj.GetAttachmentId(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAttachmentGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAttachment()
							if face == nil {
								return nil, nil
							}
							if face.AttachmentId == nil {
								return nil, nil
							}
							return face.GetAttachmentId(), nil
						}
						return nil, fmt.Errorf("field AttachmentId not resolved")
					},
				},
				"DeleteOnTermination": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAttachment)
						if ok {
							if obj.DeleteOnTermination == nil {
								return nil, nil
							}
							return obj.GetDeleteOnTermination(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAttachmentGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAttachment()
							if face == nil {
								return nil, nil
							}
							if face.DeleteOnTermination == nil {
								return nil, nil
							}
							return face.GetDeleteOnTermination(), nil
						}
						return nil, fmt.Errorf("field DeleteOnTermination not resolved")
					},
				},
				"DeviceIndex": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAttachment)
						if ok {
							if obj.DeviceIndex == nil {
								return nil, nil
							}
							return obj.GetDeviceIndex(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAttachmentGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAttachment()
							if face == nil {
								return nil, nil
							}
							if face.DeviceIndex == nil {
								return nil, nil
							}
							return face.GetDeviceIndex(), nil
						}
						return nil, fmt.Errorf("field DeviceIndex not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceNetworkInterfaceAttachment)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(InstanceNetworkInterfaceAttachmentGetter)
						if ok {
							face := inter.GetInstanceNetworkInterfaceAttachment()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstancePrivateIpAddressType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstancePrivateIpAddress",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Association": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLInstanceNetworkInterfaceAssociationType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstancePrivateIpAddress)
						if ok {
							if obj.Association == nil {
								return nil, nil
							}
							return obj.GetAssociation(), nil
						}
						inter, ok := p.Source.(InstancePrivateIpAddressGetter)
						if ok {
							face := inter.GetInstancePrivateIpAddress()
							if face == nil {
								return nil, nil
							}
							if face.Association == nil {
								return nil, nil
							}
							return face.GetAssociation(), nil
						}
						return nil, fmt.Errorf("field Association not resolved")
					},
				},
				"Primary": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstancePrivateIpAddress)
						if ok {
							if obj.Primary == nil {
								return nil, nil
							}
							return obj.GetPrimary(), nil
						}
						inter, ok := p.Source.(InstancePrivateIpAddressGetter)
						if ok {
							face := inter.GetInstancePrivateIpAddress()
							if face == nil {
								return nil, nil
							}
							if face.Primary == nil {
								return nil, nil
							}
							return face.GetPrimary(), nil
						}
						return nil, fmt.Errorf("field Primary not resolved")
					},
				},
				"PrivateDnsName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstancePrivateIpAddress)
						if ok {
							if obj.PrivateDnsName == nil {
								return nil, nil
							}
							return obj.GetPrivateDnsName(), nil
						}
						inter, ok := p.Source.(InstancePrivateIpAddressGetter)
						if ok {
							face := inter.GetInstancePrivateIpAddress()
							if face == nil {
								return nil, nil
							}
							if face.PrivateDnsName == nil {
								return nil, nil
							}
							return face.GetPrivateDnsName(), nil
						}
						return nil, fmt.Errorf("field PrivateDnsName not resolved")
					},
				},
				"PrivateIpAddress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstancePrivateIpAddress)
						if ok {
							if obj.PrivateIpAddress == nil {
								return nil, nil
							}
							return obj.GetPrivateIpAddress(), nil
						}
						inter, ok := p.Source.(InstancePrivateIpAddressGetter)
						if ok {
							face := inter.GetInstancePrivateIpAddress()
							if face == nil {
								return nil, nil
							}
							if face.PrivateIpAddress == nil {
								return nil, nil
							}
							return face.GetPrivateIpAddress(), nil
						}
						return nil, fmt.Errorf("field PrivateIpAddress not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceStateType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2InstanceState",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Code": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceState)
						if ok {
							if obj.Code == nil {
								return nil, nil
							}
							return obj.GetCode(), nil
						}
						inter, ok := p.Source.(InstanceStateGetter)
						if ok {
							face := inter.GetInstanceState()
							if face == nil {
								return nil, nil
							}
							if face.Code == nil {
								return nil, nil
							}
							return face.GetCode(), nil
						}
						return nil, fmt.Errorf("field Code not resolved")
					},
				},
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InstanceState)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(InstanceStateGetter)
						if ok {
							face := inter.GetInstanceState()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
			}
		}),
	})
	GraphQLIpPermissionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2IpPermission",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"FromPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							if obj.FromPort == nil {
								return nil, nil
							}
							return obj.GetFromPort(), nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							if face.FromPort == nil {
								return nil, nil
							}
							return face.GetFromPort(), nil
						}
						return nil, fmt.Errorf("field FromPort not resolved")
					},
				},
				"IpProtocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							if obj.IpProtocol == nil {
								return nil, nil
							}
							return obj.GetIpProtocol(), nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							if face.IpProtocol == nil {
								return nil, nil
							}
							return face.GetIpProtocol(), nil
						}
						return nil, fmt.Errorf("field IpProtocol not resolved")
					},
				},
				"IpRanges": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLIpRangeType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							return obj.IpRanges, nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							return face.IpRanges, nil
						}
						return nil, fmt.Errorf("field IpRanges not resolved")
					},
				},
				"PrefixListIds": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLPrefixListIdType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							return obj.PrefixListIds, nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							return face.PrefixListIds, nil
						}
						return nil, fmt.Errorf("field PrefixListIds not resolved")
					},
				},
				"ToPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							if obj.ToPort == nil {
								return nil, nil
							}
							return obj.GetToPort(), nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							if face.ToPort == nil {
								return nil, nil
							}
							return face.GetToPort(), nil
						}
						return nil, fmt.Errorf("field ToPort not resolved")
					},
				},
				"UserIdGroupPairs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLUserIdGroupPairType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpPermission)
						if ok {
							return obj.UserIdGroupPairs, nil
						}
						inter, ok := p.Source.(IpPermissionGetter)
						if ok {
							face := inter.GetIpPermission()
							if face == nil {
								return nil, nil
							}
							return face.UserIdGroupPairs, nil
						}
						return nil, fmt.Errorf("field UserIdGroupPairs not resolved")
					},
				},
			}
		}),
	})
	GraphQLIpRangeType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2IpRange",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CidrIp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IpRange)
						if ok {
							if obj.CidrIp == nil {
								return nil, nil
							}
							return obj.GetCidrIp(), nil
						}
						inter, ok := p.Source.(IpRangeGetter)
						if ok {
							face := inter.GetIpRange()
							if face == nil {
								return nil, nil
							}
							if face.CidrIp == nil {
								return nil, nil
							}
							return face.GetCidrIp(), nil
						}
						return nil, fmt.Errorf("field CidrIp not resolved")
					},
				},
			}
		}),
	})
	GraphQLMonitoringType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Monitoring",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"State": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Monitoring)
						if ok {
							if obj.State == nil {
								return nil, nil
							}
							return obj.GetState(), nil
						}
						inter, ok := p.Source.(MonitoringGetter)
						if ok {
							face := inter.GetMonitoring()
							if face == nil {
								return nil, nil
							}
							if face.State == nil {
								return nil, nil
							}
							return face.GetState(), nil
						}
						return nil, fmt.Errorf("field State not resolved")
					},
				},
			}
		}),
	})
	GraphQLPlacementType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Placement",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Affinity": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Placement)
						if ok {
							if obj.Affinity == nil {
								return nil, nil
							}
							return obj.GetAffinity(), nil
						}
						inter, ok := p.Source.(PlacementGetter)
						if ok {
							face := inter.GetPlacement()
							if face == nil {
								return nil, nil
							}
							if face.Affinity == nil {
								return nil, nil
							}
							return face.GetAffinity(), nil
						}
						return nil, fmt.Errorf("field Affinity not resolved")
					},
				},
				"AvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Placement)
						if ok {
							if obj.AvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetAvailabilityZone(), nil
						}
						inter, ok := p.Source.(PlacementGetter)
						if ok {
							face := inter.GetPlacement()
							if face == nil {
								return nil, nil
							}
							if face.AvailabilityZone == nil {
								return nil, nil
							}
							return face.GetAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field AvailabilityZone not resolved")
					},
				},
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Placement)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(PlacementGetter)
						if ok {
							face := inter.GetPlacement()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
				"HostId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Placement)
						if ok {
							if obj.HostId == nil {
								return nil, nil
							}
							return obj.GetHostId(), nil
						}
						inter, ok := p.Source.(PlacementGetter)
						if ok {
							face := inter.GetPlacement()
							if face == nil {
								return nil, nil
							}
							if face.HostId == nil {
								return nil, nil
							}
							return face.GetHostId(), nil
						}
						return nil, fmt.Errorf("field HostId not resolved")
					},
				},
				"Tenancy": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Placement)
						if ok {
							if obj.Tenancy == nil {
								return nil, nil
							}
							return obj.GetTenancy(), nil
						}
						inter, ok := p.Source.(PlacementGetter)
						if ok {
							face := inter.GetPlacement()
							if face == nil {
								return nil, nil
							}
							if face.Tenancy == nil {
								return nil, nil
							}
							return face.GetTenancy(), nil
						}
						return nil, fmt.Errorf("field Tenancy not resolved")
					},
				},
			}
		}),
	})
	GraphQLPrefixListIdType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2PrefixListId",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"PrefixListId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*PrefixListId)
						if ok {
							if obj.PrefixListId == nil {
								return nil, nil
							}
							return obj.GetPrefixListId(), nil
						}
						inter, ok := p.Source.(PrefixListIdGetter)
						if ok {
							face := inter.GetPrefixListId()
							if face == nil {
								return nil, nil
							}
							if face.PrefixListId == nil {
								return nil, nil
							}
							return face.GetPrefixListId(), nil
						}
						return nil, fmt.Errorf("field PrefixListId not resolved")
					},
				},
			}
		}),
	})
	GraphQLProductCodeType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2ProductCode",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ProductCodeId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ProductCode)
						if ok {
							if obj.ProductCodeId == nil {
								return nil, nil
							}
							return obj.GetProductCodeId(), nil
						}
						inter, ok := p.Source.(ProductCodeGetter)
						if ok {
							face := inter.GetProductCode()
							if face == nil {
								return nil, nil
							}
							if face.ProductCodeId == nil {
								return nil, nil
							}
							return face.GetProductCodeId(), nil
						}
						return nil, fmt.Errorf("field ProductCodeId not resolved")
					},
				},
				"ProductCodeType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ProductCode)
						if ok {
							if obj.ProductCodeType == nil {
								return nil, nil
							}
							return obj.GetProductCodeType(), nil
						}
						inter, ok := p.Source.(ProductCodeGetter)
						if ok {
							face := inter.GetProductCode()
							if face == nil {
								return nil, nil
							}
							if face.ProductCodeType == nil {
								return nil, nil
							}
							return face.GetProductCodeType(), nil
						}
						return nil, fmt.Errorf("field ProductCodeType not resolved")
					},
				},
			}
		}),
	})
	GraphQLSecurityGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2SecurityGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Description": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							if obj.Description == nil {
								return nil, nil
							}
							return obj.GetDescription(), nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.Description == nil {
								return nil, nil
							}
							return face.GetDescription(), nil
						}
						return nil, fmt.Errorf("field Description not resolved")
					},
				},
				"GroupId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							if obj.GroupId == nil {
								return nil, nil
							}
							return obj.GetGroupId(), nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.GroupId == nil {
								return nil, nil
							}
							return face.GetGroupId(), nil
						}
						return nil, fmt.Errorf("field GroupId not resolved")
					},
				},
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
				"IpPermissions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLIpPermissionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							return obj.IpPermissions, nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							return face.IpPermissions, nil
						}
						return nil, fmt.Errorf("field IpPermissions not resolved")
					},
				},
				"IpPermissionsEgress": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLIpPermissionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							return obj.IpPermissionsEgress, nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							return face.IpPermissionsEgress, nil
						}
						return nil, fmt.Errorf("field IpPermissionsEgress not resolved")
					},
				},
				"OwnerId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							if obj.OwnerId == nil {
								return nil, nil
							}
							return obj.GetOwnerId(), nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.OwnerId == nil {
								return nil, nil
							}
							return face.GetOwnerId(), nil
						}
						return nil, fmt.Errorf("field OwnerId not resolved")
					},
				},
				"Tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field Tags not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SecurityGroup)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(SecurityGroupGetter)
						if ok {
							face := inter.GetSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
	GraphQLStateReasonType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2StateReason",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Code": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*StateReason)
						if ok {
							if obj.Code == nil {
								return nil, nil
							}
							return obj.GetCode(), nil
						}
						inter, ok := p.Source.(StateReasonGetter)
						if ok {
							face := inter.GetStateReason()
							if face == nil {
								return nil, nil
							}
							if face.Code == nil {
								return nil, nil
							}
							return face.GetCode(), nil
						}
						return nil, fmt.Errorf("field Code not resolved")
					},
				},
				"Message": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*StateReason)
						if ok {
							if obj.Message == nil {
								return nil, nil
							}
							return obj.GetMessage(), nil
						}
						inter, ok := p.Source.(StateReasonGetter)
						if ok {
							face := inter.GetStateReason()
							if face == nil {
								return nil, nil
							}
							if face.Message == nil {
								return nil, nil
							}
							return face.GetMessage(), nil
						}
						return nil, fmt.Errorf("field Message not resolved")
					},
				},
			}
		}),
	})
	GraphQLSubnetType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Subnet",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.AvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetAvailabilityZone(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.AvailabilityZone == nil {
								return nil, nil
							}
							return face.GetAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field AvailabilityZone not resolved")
					},
				},
				"AvailableIpAddressCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.AvailableIpAddressCount == nil {
								return nil, nil
							}
							return obj.GetAvailableIpAddressCount(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.AvailableIpAddressCount == nil {
								return nil, nil
							}
							return face.GetAvailableIpAddressCount(), nil
						}
						return nil, fmt.Errorf("field AvailableIpAddressCount not resolved")
					},
				},
				"CidrBlock": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.CidrBlock == nil {
								return nil, nil
							}
							return obj.GetCidrBlock(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.CidrBlock == nil {
								return nil, nil
							}
							return face.GetCidrBlock(), nil
						}
						return nil, fmt.Errorf("field CidrBlock not resolved")
					},
				},
				"DefaultForAz": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.DefaultForAz == nil {
								return nil, nil
							}
							return obj.GetDefaultForAz(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.DefaultForAz == nil {
								return nil, nil
							}
							return face.GetDefaultForAz(), nil
						}
						return nil, fmt.Errorf("field DefaultForAz not resolved")
					},
				},
				"MapPublicIpOnLaunch": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.MapPublicIpOnLaunch == nil {
								return nil, nil
							}
							return obj.GetMapPublicIpOnLaunch(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.MapPublicIpOnLaunch == nil {
								return nil, nil
							}
							return face.GetMapPublicIpOnLaunch(), nil
						}
						return nil, fmt.Errorf("field MapPublicIpOnLaunch not resolved")
					},
				},
				"State": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.State == nil {
								return nil, nil
							}
							return obj.GetState(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.State == nil {
								return nil, nil
							}
							return face.GetState(), nil
						}
						return nil, fmt.Errorf("field State not resolved")
					},
				},
				"SubnetId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.SubnetId == nil {
								return nil, nil
							}
							return obj.GetSubnetId(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.SubnetId == nil {
								return nil, nil
							}
							return face.GetSubnetId(), nil
						}
						return nil, fmt.Errorf("field SubnetId not resolved")
					},
				},
				"Tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field Tags not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
	GraphQLTagType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Tag",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Tag)
						if ok {
							if obj.Key == nil {
								return nil, nil
							}
							return obj.GetKey(), nil
						}
						inter, ok := p.Source.(TagGetter)
						if ok {
							face := inter.GetTag()
							if face == nil {
								return nil, nil
							}
							if face.Key == nil {
								return nil, nil
							}
							return face.GetKey(), nil
						}
						return nil, fmt.Errorf("field Key not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Tag)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(TagGetter)
						if ok {
							face := inter.GetTag()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLUserIdGroupPairType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2UserIdGroupPair",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"GroupId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.GroupId == nil {
								return nil, nil
							}
							return obj.GetGroupId(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.GroupId == nil {
								return nil, nil
							}
							return face.GetGroupId(), nil
						}
						return nil, fmt.Errorf("field GroupId not resolved")
					},
				},
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
				"PeeringStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.PeeringStatus == nil {
								return nil, nil
							}
							return obj.GetPeeringStatus(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.PeeringStatus == nil {
								return nil, nil
							}
							return face.GetPeeringStatus(), nil
						}
						return nil, fmt.Errorf("field PeeringStatus not resolved")
					},
				},
				"UserId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.UserId == nil {
								return nil, nil
							}
							return obj.GetUserId(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.UserId == nil {
								return nil, nil
							}
							return face.GetUserId(), nil
						}
						return nil, fmt.Errorf("field UserId not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
				"VpcPeeringConnectionId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserIdGroupPair)
						if ok {
							if obj.VpcPeeringConnectionId == nil {
								return nil, nil
							}
							return obj.GetVpcPeeringConnectionId(), nil
						}
						inter, ok := p.Source.(UserIdGroupPairGetter)
						if ok {
							face := inter.GetUserIdGroupPair()
							if face == nil {
								return nil, nil
							}
							if face.VpcPeeringConnectionId == nil {
								return nil, nil
							}
							return face.GetVpcPeeringConnectionId(), nil
						}
						return nil, fmt.Errorf("field VpcPeeringConnectionId not resolved")
					},
				},
			}
		}),
	})
	GraphQLVpcType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ec2Vpc",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CidrBlock": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.CidrBlock == nil {
								return nil, nil
							}
							return obj.GetCidrBlock(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.CidrBlock == nil {
								return nil, nil
							}
							return face.GetCidrBlock(), nil
						}
						return nil, fmt.Errorf("field CidrBlock not resolved")
					},
				},
				"DhcpOptionsId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.DhcpOptionsId == nil {
								return nil, nil
							}
							return obj.GetDhcpOptionsId(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.DhcpOptionsId == nil {
								return nil, nil
							}
							return face.GetDhcpOptionsId(), nil
						}
						return nil, fmt.Errorf("field DhcpOptionsId not resolved")
					},
				},
				"InstanceTenancy": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.InstanceTenancy == nil {
								return nil, nil
							}
							return obj.GetInstanceTenancy(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.InstanceTenancy == nil {
								return nil, nil
							}
							return face.GetInstanceTenancy(), nil
						}
						return nil, fmt.Errorf("field InstanceTenancy not resolved")
					},
				},
				"IsDefault": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.IsDefault == nil {
								return nil, nil
							}
							return obj.GetIsDefault(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.IsDefault == nil {
								return nil, nil
							}
							return face.GetIsDefault(), nil
						}
						return nil, fmt.Errorf("field IsDefault not resolved")
					},
				},
				"State": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.State == nil {
								return nil, nil
							}
							return obj.GetState(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.State == nil {
								return nil, nil
							}
							return face.GetState(), nil
						}
						return nil, fmt.Errorf("field State not resolved")
					},
				},
				"Tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field Tags not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							if obj.VpcId == nil {
								return nil, nil
							}
							return obj.GetVpcId(), nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							if face.VpcId == nil {
								return nil, nil
							}
							return face.GetVpcId(), nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedEbsInstanceBlockDevice(r randyTypes, easy bool) *EbsInstanceBlockDevice {
	this := &EbsInstanceBlockDevice{}
	if r.Intn(10) != 0 {
		v1 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.AttachTime = &v1
	}
	if r.Intn(10) != 0 {
		v2 := bool(bool(r.Intn(2) == 0))
		this.DeleteOnTermination = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringTypes(r)
		this.Status = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.VolumeId = &v4
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedGroupIdentifier(r randyTypes, easy bool) *GroupIdentifier {
	this := &GroupIdentifier{}
	if r.Intn(10) != 0 {
		v5 := randStringTypes(r)
		this.GroupId = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.GroupName = &v6
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedIamInstanceProfile(r randyTypes, easy bool) *IamInstanceProfile {
	this := &IamInstanceProfile{}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.Arn = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringTypes(r)
		this.Id = &v8
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedInstance(r randyTypes, easy bool) *Instance {
	this := &Instance{}
	if r.Intn(10) != 0 {
		v9 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.AmiLaunchIndex = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringTypes(r)
		this.Architecture = &v10
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.BlockDeviceMappings = make([]*InstanceBlockDeviceMapping, v11)
		for i := 0; i < v11; i++ {
			this.BlockDeviceMappings[i] = NewPopulatedInstanceBlockDeviceMapping(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.ClientToken = &v12
	}
	if r.Intn(10) != 0 {
		v13 := bool(bool(r.Intn(2) == 0))
		this.EbsOptimized = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringTypes(r)
		this.Hypervisor = &v14
	}
	if r.Intn(10) != 0 {
		this.IamInstanceProfile = NewPopulatedIamInstanceProfile(r, easy)
	}
	if r.Intn(10) != 0 {
		v15 := randStringTypes(r)
		this.ImageId = &v15
	}
	if r.Intn(10) != 0 {
		v16 := randStringTypes(r)
		this.InstanceId = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringTypes(r)
		this.InstanceLifecycle = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringTypes(r)
		this.InstanceType = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.KernelId = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringTypes(r)
		this.KeyName = &v20
	}
	if r.Intn(10) != 0 {
		v21 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.LaunchTime = &v21
	}
	if r.Intn(10) != 0 {
		this.Monitoring = NewPopulatedMonitoring(r, easy)
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(5)
		this.NetworkInterfaces = make([]*InstanceNetworkInterface, v22)
		for i := 0; i < v22; i++ {
			this.NetworkInterfaces[i] = NewPopulatedInstanceNetworkInterface(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Placement = NewPopulatedPlacement(r, easy)
	}
	if r.Intn(10) != 0 {
		v23 := randStringTypes(r)
		this.Platform = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.PrivateDnsName = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringTypes(r)
		this.PrivateIpAddress = &v25
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.ProductCodes = make([]*ProductCode, v26)
		for i := 0; i < v26; i++ {
			this.ProductCodes[i] = NewPopulatedProductCode(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.PublicDnsName = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.PublicIpAddress = &v28
	}
	if r.Intn(10) != 0 {
		v29 := randStringTypes(r)
		this.RamdiskId = &v29
	}
	if r.Intn(10) != 0 {
		v30 := randStringTypes(r)
		this.RootDeviceName = &v30
	}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.RootDeviceType = &v31
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(5)
		this.SecurityGroups = make([]*GroupIdentifier, v32)
		for i := 0; i < v32; i++ {
			this.SecurityGroups[i] = NewPopulatedGroupIdentifier(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v33 := bool(bool(r.Intn(2) == 0))
		this.SourceDestCheck = &v33
	}
	if r.Intn(10) != 0 {
		v34 := randStringTypes(r)
		this.SpotInstanceRequestId = &v34
	}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.SriovNetSupport = &v35
	}
	if r.Intn(10) != 0 {
		this.State = NewPopulatedInstanceState(r, easy)
	}
	if r.Intn(10) != 0 {
		this.StateReason = NewPopulatedStateReason(r, easy)
	}
	if r.Intn(10) != 0 {
		v36 := randStringTypes(r)
		this.StateTransitionReason = &v36
	}
	if r.Intn(10) != 0 {
		v37 := randStringTypes(r)
		this.SubnetId = &v37
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(5)
		this.Tags = make([]*Tag, v38)
		for i := 0; i < v38; i++ {
			this.Tags[i] = NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v39 := randStringTypes(r)
		this.VirtualizationType = &v39
	}
	if r.Intn(10) != 0 {
		v40 := randStringTypes(r)
		this.VpcId = &v40
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 39)
	}
	return this
}

func NewPopulatedInstanceBlockDeviceMapping(r randyTypes, easy bool) *InstanceBlockDeviceMapping {
	this := &InstanceBlockDeviceMapping{}
	if r.Intn(10) != 0 {
		v41 := randStringTypes(r)
		this.DeviceName = &v41
	}
	if r.Intn(10) != 0 {
		this.Ebs = NewPopulatedEbsInstanceBlockDevice(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedInstanceNetworkInterface(r randyTypes, easy bool) *InstanceNetworkInterface {
	this := &InstanceNetworkInterface{}
	if r.Intn(10) != 0 {
		this.Association = NewPopulatedInstanceNetworkInterfaceAssociation(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Attachment = NewPopulatedInstanceNetworkInterfaceAttachment(r, easy)
	}
	if r.Intn(10) != 0 {
		v42 := randStringTypes(r)
		this.Description = &v42
	}
	if r.Intn(10) != 0 {
		v43 := r.Intn(5)
		this.Groups = make([]*GroupIdentifier, v43)
		for i := 0; i < v43; i++ {
			this.Groups[i] = NewPopulatedGroupIdentifier(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v44 := randStringTypes(r)
		this.MacAddress = &v44
	}
	if r.Intn(10) != 0 {
		v45 := randStringTypes(r)
		this.NetworkInterfaceId = &v45
	}
	if r.Intn(10) != 0 {
		v46 := randStringTypes(r)
		this.OwnerId = &v46
	}
	if r.Intn(10) != 0 {
		v47 := randStringTypes(r)
		this.PrivateDnsName = &v47
	}
	if r.Intn(10) != 0 {
		v48 := randStringTypes(r)
		this.PrivateIpAddress = &v48
	}
	if r.Intn(10) != 0 {
		v49 := r.Intn(5)
		this.PrivateIpAddresses = make([]*InstancePrivateIpAddress, v49)
		for i := 0; i < v49; i++ {
			this.PrivateIpAddresses[i] = NewPopulatedInstancePrivateIpAddress(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v50 := bool(bool(r.Intn(2) == 0))
		this.SourceDestCheck = &v50
	}
	if r.Intn(10) != 0 {
		v51 := randStringTypes(r)
		this.Status = &v51
	}
	if r.Intn(10) != 0 {
		v52 := randStringTypes(r)
		this.SubnetId = &v52
	}
	if r.Intn(10) != 0 {
		v53 := randStringTypes(r)
		this.VpcId = &v53
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 16)
	}
	return this
}

func NewPopulatedInstanceNetworkInterfaceAssociation(r randyTypes, easy bool) *InstanceNetworkInterfaceAssociation {
	this := &InstanceNetworkInterfaceAssociation{}
	if r.Intn(10) != 0 {
		v54 := randStringTypes(r)
		this.IpOwnerId = &v54
	}
	if r.Intn(10) != 0 {
		v55 := randStringTypes(r)
		this.PublicDnsName = &v55
	}
	if r.Intn(10) != 0 {
		v56 := randStringTypes(r)
		this.PublicIp = &v56
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedInstanceNetworkInterfaceAttachment(r randyTypes, easy bool) *InstanceNetworkInterfaceAttachment {
	this := &InstanceNetworkInterfaceAttachment{}
	if r.Intn(10) != 0 {
		v57 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v57 *= -1
		}
		this.AttachTime = &v57
	}
	if r.Intn(10) != 0 {
		v58 := randStringTypes(r)
		this.AttachmentId = &v58
	}
	if r.Intn(10) != 0 {
		v59 := bool(bool(r.Intn(2) == 0))
		this.DeleteOnTermination = &v59
	}
	if r.Intn(10) != 0 {
		v60 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v60 *= -1
		}
		this.DeviceIndex = &v60
	}
	if r.Intn(10) != 0 {
		v61 := randStringTypes(r)
		this.Status = &v61
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedInstancePrivateIpAddress(r randyTypes, easy bool) *InstancePrivateIpAddress {
	this := &InstancePrivateIpAddress{}
	if r.Intn(10) != 0 {
		this.Association = NewPopulatedInstanceNetworkInterfaceAssociation(r, easy)
	}
	if r.Intn(10) != 0 {
		v62 := bool(bool(r.Intn(2) == 0))
		this.Primary = &v62
	}
	if r.Intn(10) != 0 {
		v63 := randStringTypes(r)
		this.PrivateDnsName = &v63
	}
	if r.Intn(10) != 0 {
		v64 := randStringTypes(r)
		this.PrivateIpAddress = &v64
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedInstanceState(r randyTypes, easy bool) *InstanceState {
	this := &InstanceState{}
	if r.Intn(10) != 0 {
		v65 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v65 *= -1
		}
		this.Code = &v65
	}
	if r.Intn(10) != 0 {
		v66 := randStringTypes(r)
		this.Name = &v66
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedIpPermission(r randyTypes, easy bool) *IpPermission {
	this := &IpPermission{}
	if r.Intn(10) != 0 {
		v67 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v67 *= -1
		}
		this.FromPort = &v67
	}
	if r.Intn(10) != 0 {
		v68 := randStringTypes(r)
		this.IpProtocol = &v68
	}
	if r.Intn(10) != 0 {
		v69 := r.Intn(5)
		this.IpRanges = make([]*IpRange, v69)
		for i := 0; i < v69; i++ {
			this.IpRanges[i] = NewPopulatedIpRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v70 := r.Intn(5)
		this.PrefixListIds = make([]*PrefixListId, v70)
		for i := 0; i < v70; i++ {
			this.PrefixListIds[i] = NewPopulatedPrefixListId(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v71 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v71 *= -1
		}
		this.ToPort = &v71
	}
	if r.Intn(10) != 0 {
		v72 := r.Intn(5)
		this.UserIdGroupPairs = make([]*UserIdGroupPair, v72)
		for i := 0; i < v72; i++ {
			this.UserIdGroupPairs[i] = NewPopulatedUserIdGroupPair(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 8)
	}
	return this
}

func NewPopulatedIpRange(r randyTypes, easy bool) *IpRange {
	this := &IpRange{}
	if r.Intn(10) != 0 {
		v73 := randStringTypes(r)
		this.CidrIp = &v73
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedMonitoring(r randyTypes, easy bool) *Monitoring {
	this := &Monitoring{}
	if r.Intn(10) != 0 {
		v74 := randStringTypes(r)
		this.State = &v74
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedPlacement(r randyTypes, easy bool) *Placement {
	this := &Placement{}
	if r.Intn(10) != 0 {
		v75 := randStringTypes(r)
		this.Affinity = &v75
	}
	if r.Intn(10) != 0 {
		v76 := randStringTypes(r)
		this.AvailabilityZone = &v76
	}
	if r.Intn(10) != 0 {
		v77 := randStringTypes(r)
		this.GroupName = &v77
	}
	if r.Intn(10) != 0 {
		v78 := randStringTypes(r)
		this.HostId = &v78
	}
	if r.Intn(10) != 0 {
		v79 := randStringTypes(r)
		this.Tenancy = &v79
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedPrefixListId(r randyTypes, easy bool) *PrefixListId {
	this := &PrefixListId{}
	if r.Intn(10) != 0 {
		v80 := randStringTypes(r)
		this.PrefixListId = &v80
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedProductCode(r randyTypes, easy bool) *ProductCode {
	this := &ProductCode{}
	if r.Intn(10) != 0 {
		v81 := randStringTypes(r)
		this.ProductCodeId = &v81
	}
	if r.Intn(10) != 0 {
		v82 := randStringTypes(r)
		this.ProductCodeType = &v82
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedSecurityGroup(r randyTypes, easy bool) *SecurityGroup {
	this := &SecurityGroup{}
	if r.Intn(10) != 0 {
		v83 := randStringTypes(r)
		this.Description = &v83
	}
	if r.Intn(10) != 0 {
		v84 := randStringTypes(r)
		this.GroupId = &v84
	}
	if r.Intn(10) != 0 {
		v85 := randStringTypes(r)
		this.GroupName = &v85
	}
	if r.Intn(10) != 0 {
		v86 := r.Intn(5)
		this.IpPermissions = make([]*IpPermission, v86)
		for i := 0; i < v86; i++ {
			this.IpPermissions[i] = NewPopulatedIpPermission(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v87 := r.Intn(5)
		this.IpPermissionsEgress = make([]*IpPermission, v87)
		for i := 0; i < v87; i++ {
			this.IpPermissionsEgress[i] = NewPopulatedIpPermission(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v88 := randStringTypes(r)
		this.OwnerId = &v88
	}
	if r.Intn(10) != 0 {
		v89 := r.Intn(5)
		this.Tags = make([]*Tag, v89)
		for i := 0; i < v89; i++ {
			this.Tags[i] = NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v90 := randStringTypes(r)
		this.VpcId = &v90
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedStateReason(r randyTypes, easy bool) *StateReason {
	this := &StateReason{}
	if r.Intn(10) != 0 {
		v91 := randStringTypes(r)
		this.Code = &v91
	}
	if r.Intn(10) != 0 {
		v92 := randStringTypes(r)
		this.Message = &v92
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedSubnet(r randyTypes, easy bool) *Subnet {
	this := &Subnet{}
	if r.Intn(10) != 0 {
		v93 := randStringTypes(r)
		this.AvailabilityZone = &v93
	}
	if r.Intn(10) != 0 {
		v94 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v94 *= -1
		}
		this.AvailableIpAddressCount = &v94
	}
	if r.Intn(10) != 0 {
		v95 := randStringTypes(r)
		this.CidrBlock = &v95
	}
	if r.Intn(10) != 0 {
		v96 := bool(bool(r.Intn(2) == 0))
		this.DefaultForAz = &v96
	}
	if r.Intn(10) != 0 {
		v97 := bool(bool(r.Intn(2) == 0))
		this.MapPublicIpOnLaunch = &v97
	}
	if r.Intn(10) != 0 {
		v98 := randStringTypes(r)
		this.State = &v98
	}
	if r.Intn(10) != 0 {
		v99 := randStringTypes(r)
		this.SubnetId = &v99
	}
	if r.Intn(10) != 0 {
		v100 := r.Intn(5)
		this.Tags = make([]*Tag, v100)
		for i := 0; i < v100; i++ {
			this.Tags[i] = NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v101 := randStringTypes(r)
		this.VpcId = &v101
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 11)
	}
	return this
}

func NewPopulatedTag(r randyTypes, easy bool) *Tag {
	this := &Tag{}
	if r.Intn(10) != 0 {
		v102 := randStringTypes(r)
		this.Key = &v102
	}
	if r.Intn(10) != 0 {
		v103 := randStringTypes(r)
		this.Value = &v103
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedUserIdGroupPair(r randyTypes, easy bool) *UserIdGroupPair {
	this := &UserIdGroupPair{}
	if r.Intn(10) != 0 {
		v104 := randStringTypes(r)
		this.GroupId = &v104
	}
	if r.Intn(10) != 0 {
		v105 := randStringTypes(r)
		this.GroupName = &v105
	}
	if r.Intn(10) != 0 {
		v106 := randStringTypes(r)
		this.PeeringStatus = &v106
	}
	if r.Intn(10) != 0 {
		v107 := randStringTypes(r)
		this.UserId = &v107
	}
	if r.Intn(10) != 0 {
		v108 := randStringTypes(r)
		this.VpcId = &v108
	}
	if r.Intn(10) != 0 {
		v109 := randStringTypes(r)
		this.VpcPeeringConnectionId = &v109
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 8)
	}
	return this
}

func NewPopulatedVpc(r randyTypes, easy bool) *Vpc {
	this := &Vpc{}
	if r.Intn(10) != 0 {
		v110 := randStringTypes(r)
		this.CidrBlock = &v110
	}
	if r.Intn(10) != 0 {
		v111 := randStringTypes(r)
		this.DhcpOptionsId = &v111
	}
	if r.Intn(10) != 0 {
		v112 := randStringTypes(r)
		this.InstanceTenancy = &v112
	}
	if r.Intn(10) != 0 {
		v113 := bool(bool(r.Intn(2) == 0))
		this.IsDefault = &v113
	}
	if r.Intn(10) != 0 {
		v114 := randStringTypes(r)
		this.State = &v114
	}
	if r.Intn(10) != 0 {
		v115 := r.Intn(5)
		this.Tags = make([]*Tag, v115)
		for i := 0; i < v115; i++ {
			this.Tags[i] = NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v116 := randStringTypes(r)
		this.VpcId = &v116
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 9)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v117 := r.Intn(100)
	tmps := make([]rune, v117)
	for i := 0; i < v117; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v118 := r.Int63()
		if r.Intn(2) == 0 {
			v118 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v118))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
