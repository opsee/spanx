// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package credentials is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Value
*/
package credentials

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Value struct {
	AccessKeyID      *string `protobuf:"bytes,1,opt,name=AccessKeyID" json:"AccessKeyID,omitempty"`
	SecretAccessKey  *string `protobuf:"bytes,2,opt,name=SecretAccessKey" json:"SecretAccessKey,omitempty"`
	SessionToken     *string `protobuf:"bytes,3,opt,name=SessionToken" json:"SessionToken,omitempty"`
	ProviderName     *string `protobuf:"bytes,4,opt,name=ProviderName" json:"ProviderName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}

func (m *Value) GetAccessKeyID() string {
	if m != nil && m.AccessKeyID != nil {
		return *m.AccessKeyID
	}
	return ""
}

func (m *Value) GetSecretAccessKey() string {
	if m != nil && m.SecretAccessKey != nil {
		return *m.SecretAccessKey
	}
	return ""
}

func (m *Value) GetSessionToken() string {
	if m != nil && m.SessionToken != nil {
		return *m.SessionToken
	}
	return ""
}

func (m *Value) GetProviderName() string {
	if m != nil && m.ProviderName != nil {
		return *m.ProviderName
	}
	return ""
}

func init() {
	proto.RegisterType((*Value)(nil), "opsee.aws.credentials.Value")
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessKeyID != nil && that1.AccessKeyID != nil {
		if *this.AccessKeyID != *that1.AccessKeyID {
			return false
		}
	} else if this.AccessKeyID != nil {
		return false
	} else if that1.AccessKeyID != nil {
		return false
	}
	if this.SecretAccessKey != nil && that1.SecretAccessKey != nil {
		if *this.SecretAccessKey != *that1.SecretAccessKey {
			return false
		}
	} else if this.SecretAccessKey != nil {
		return false
	} else if that1.SecretAccessKey != nil {
		return false
	}
	if this.SessionToken != nil && that1.SessionToken != nil {
		if *this.SessionToken != *that1.SessionToken {
			return false
		}
	} else if this.SessionToken != nil {
		return false
	} else if that1.SessionToken != nil {
		return false
	}
	if this.ProviderName != nil && that1.ProviderName != nil {
		if *this.ProviderName != *that1.ProviderName {
			return false
		}
	} else if this.ProviderName != nil {
		return false
	} else if that1.ProviderName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type ValueGetter interface {
	GetValue() *Value
}

var GraphQLValueType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLValueType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "credentialsValue",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AccessKeyID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.AccessKeyID == nil {
								return nil, nil
							}
							return obj.GetAccessKeyID(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.AccessKeyID == nil {
								return nil, nil
							}
							return face.GetAccessKeyID(), nil
						}
						return nil, fmt.Errorf("field AccessKeyID not resolved")
					},
				},
				"SecretAccessKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.SecretAccessKey == nil {
								return nil, nil
							}
							return obj.GetSecretAccessKey(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.SecretAccessKey == nil {
								return nil, nil
							}
							return face.GetSecretAccessKey(), nil
						}
						return nil, fmt.Errorf("field SecretAccessKey not resolved")
					},
				},
				"SessionToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.SessionToken == nil {
								return nil, nil
							}
							return obj.GetSessionToken(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.SessionToken == nil {
								return nil, nil
							}
							return face.GetSessionToken(), nil
						}
						return nil, fmt.Errorf("field SessionToken not resolved")
					},
				},
				"ProviderName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.ProviderName == nil {
								return nil, nil
							}
							return obj.GetProviderName(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.ProviderName == nil {
								return nil, nil
							}
							return face.GetProviderName(), nil
						}
						return nil, fmt.Errorf("field ProviderName not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedValue(r randyTypes, easy bool) *Value {
	this := &Value{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.AccessKeyID = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.SecretAccessKey = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringTypes(r)
		this.SessionToken = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.ProviderName = &v4
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
