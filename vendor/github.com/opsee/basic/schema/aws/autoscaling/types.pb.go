// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package autoscaling is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	EnabledMetric
	Group
	Instance
	SuspendedProcess
	TagDescription
*/
package autoscaling

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnabledMetric struct {
	Granularity      *string `protobuf:"bytes,2,opt,name=Granularity" json:"Granularity,omitempty"`
	Metric           *string `protobuf:"bytes,3,opt,name=Metric" json:"Metric,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EnabledMetric) Reset()         { *m = EnabledMetric{} }
func (m *EnabledMetric) String() string { return proto.CompactTextString(m) }
func (*EnabledMetric) ProtoMessage()    {}

func (m *EnabledMetric) GetGranularity() string {
	if m != nil && m.Granularity != nil {
		return *m.Granularity
	}
	return ""
}

func (m *EnabledMetric) GetMetric() string {
	if m != nil && m.Metric != nil {
		return *m.Metric
	}
	return ""
}

type Group struct {
	AutoScalingGroupARN              *string             `protobuf:"bytes,2,opt,name=AutoScalingGroupARN" json:"AutoScalingGroupARN,omitempty"`
	AutoScalingGroupName             *string             `protobuf:"bytes,3,opt,name=AutoScalingGroupName" json:"AutoScalingGroupName,omitempty"`
	AvailabilityZones                []string            `protobuf:"bytes,4,rep,name=AvailabilityZones" json:"AvailabilityZones,omitempty"`
	CreatedTime                      *int64              `protobuf:"fixed64,5,opt,name=CreatedTime" json:"CreatedTime,omitempty"`
	DefaultCooldown                  *int64              `protobuf:"zigzag64,6,opt,name=DefaultCooldown" json:"DefaultCooldown,omitempty"`
	DesiredCapacity                  *int64              `protobuf:"zigzag64,7,opt,name=DesiredCapacity" json:"DesiredCapacity,omitempty"`
	EnabledMetrics                   []*EnabledMetric    `protobuf:"bytes,8,rep,name=EnabledMetrics" json:"EnabledMetrics,omitempty"`
	HealthCheckGracePeriod           *int64              `protobuf:"zigzag64,9,opt,name=HealthCheckGracePeriod" json:"HealthCheckGracePeriod,omitempty"`
	HealthCheckType                  *string             `protobuf:"bytes,10,opt,name=HealthCheckType" json:"HealthCheckType,omitempty"`
	Instances                        []*Instance         `protobuf:"bytes,11,rep,name=Instances" json:"Instances,omitempty"`
	LaunchConfigurationName          *string             `protobuf:"bytes,12,opt,name=LaunchConfigurationName" json:"LaunchConfigurationName,omitempty"`
	LoadBalancerNames                []string            `protobuf:"bytes,13,rep,name=LoadBalancerNames" json:"LoadBalancerNames,omitempty"`
	MaxSize                          *int64              `protobuf:"zigzag64,14,opt,name=MaxSize" json:"MaxSize,omitempty"`
	MinSize                          *int64              `protobuf:"zigzag64,15,opt,name=MinSize" json:"MinSize,omitempty"`
	NewInstancesProtectedFromScaleIn *bool               `protobuf:"varint,16,opt,name=NewInstancesProtectedFromScaleIn" json:"NewInstancesProtectedFromScaleIn,omitempty"`
	PlacementGroup                   *string             `protobuf:"bytes,17,opt,name=PlacementGroup" json:"PlacementGroup,omitempty"`
	Status                           *string             `protobuf:"bytes,18,opt,name=Status" json:"Status,omitempty"`
	SuspendedProcesses               []*SuspendedProcess `protobuf:"bytes,19,rep,name=SuspendedProcesses" json:"SuspendedProcesses,omitempty"`
	Tags                             []*TagDescription   `protobuf:"bytes,20,rep,name=Tags" json:"Tags,omitempty"`
	TerminationPolicies              []string            `protobuf:"bytes,21,rep,name=TerminationPolicies" json:"TerminationPolicies,omitempty"`
	VPCZoneIdentifier                *string             `protobuf:"bytes,22,opt,name=VPCZoneIdentifier" json:"VPCZoneIdentifier,omitempty"`
	XXX_unrecognized                 []byte              `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}

func (m *Group) GetAutoScalingGroupARN() string {
	if m != nil && m.AutoScalingGroupARN != nil {
		return *m.AutoScalingGroupARN
	}
	return ""
}

func (m *Group) GetAutoScalingGroupName() string {
	if m != nil && m.AutoScalingGroupName != nil {
		return *m.AutoScalingGroupName
	}
	return ""
}

func (m *Group) GetAvailabilityZones() []string {
	if m != nil {
		return m.AvailabilityZones
	}
	return nil
}

func (m *Group) GetCreatedTime() int64 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *Group) GetDefaultCooldown() int64 {
	if m != nil && m.DefaultCooldown != nil {
		return *m.DefaultCooldown
	}
	return 0
}

func (m *Group) GetDesiredCapacity() int64 {
	if m != nil && m.DesiredCapacity != nil {
		return *m.DesiredCapacity
	}
	return 0
}

func (m *Group) GetEnabledMetrics() []*EnabledMetric {
	if m != nil {
		return m.EnabledMetrics
	}
	return nil
}

func (m *Group) GetHealthCheckGracePeriod() int64 {
	if m != nil && m.HealthCheckGracePeriod != nil {
		return *m.HealthCheckGracePeriod
	}
	return 0
}

func (m *Group) GetHealthCheckType() string {
	if m != nil && m.HealthCheckType != nil {
		return *m.HealthCheckType
	}
	return ""
}

func (m *Group) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *Group) GetLaunchConfigurationName() string {
	if m != nil && m.LaunchConfigurationName != nil {
		return *m.LaunchConfigurationName
	}
	return ""
}

func (m *Group) GetLoadBalancerNames() []string {
	if m != nil {
		return m.LoadBalancerNames
	}
	return nil
}

func (m *Group) GetMaxSize() int64 {
	if m != nil && m.MaxSize != nil {
		return *m.MaxSize
	}
	return 0
}

func (m *Group) GetMinSize() int64 {
	if m != nil && m.MinSize != nil {
		return *m.MinSize
	}
	return 0
}

func (m *Group) GetNewInstancesProtectedFromScaleIn() bool {
	if m != nil && m.NewInstancesProtectedFromScaleIn != nil {
		return *m.NewInstancesProtectedFromScaleIn
	}
	return false
}

func (m *Group) GetPlacementGroup() string {
	if m != nil && m.PlacementGroup != nil {
		return *m.PlacementGroup
	}
	return ""
}

func (m *Group) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Group) GetSuspendedProcesses() []*SuspendedProcess {
	if m != nil {
		return m.SuspendedProcesses
	}
	return nil
}

func (m *Group) GetTags() []*TagDescription {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Group) GetTerminationPolicies() []string {
	if m != nil {
		return m.TerminationPolicies
	}
	return nil
}

func (m *Group) GetVPCZoneIdentifier() string {
	if m != nil && m.VPCZoneIdentifier != nil {
		return *m.VPCZoneIdentifier
	}
	return ""
}

type Instance struct {
	AvailabilityZone        *string `protobuf:"bytes,2,opt,name=AvailabilityZone" json:"AvailabilityZone,omitempty"`
	HealthStatus            *string `protobuf:"bytes,3,opt,name=HealthStatus" json:"HealthStatus,omitempty"`
	InstanceId              *string `protobuf:"bytes,4,opt,name=InstanceId" json:"InstanceId,omitempty"`
	LaunchConfigurationName *string `protobuf:"bytes,5,opt,name=LaunchConfigurationName" json:"LaunchConfigurationName,omitempty"`
	LifecycleState          *string `protobuf:"bytes,6,opt,name=LifecycleState" json:"LifecycleState,omitempty"`
	ProtectedFromScaleIn    *bool   `protobuf:"varint,7,opt,name=ProtectedFromScaleIn" json:"ProtectedFromScaleIn,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}

func (m *Instance) GetAvailabilityZone() string {
	if m != nil && m.AvailabilityZone != nil {
		return *m.AvailabilityZone
	}
	return ""
}

func (m *Instance) GetHealthStatus() string {
	if m != nil && m.HealthStatus != nil {
		return *m.HealthStatus
	}
	return ""
}

func (m *Instance) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

func (m *Instance) GetLaunchConfigurationName() string {
	if m != nil && m.LaunchConfigurationName != nil {
		return *m.LaunchConfigurationName
	}
	return ""
}

func (m *Instance) GetLifecycleState() string {
	if m != nil && m.LifecycleState != nil {
		return *m.LifecycleState
	}
	return ""
}

func (m *Instance) GetProtectedFromScaleIn() bool {
	if m != nil && m.ProtectedFromScaleIn != nil {
		return *m.ProtectedFromScaleIn
	}
	return false
}

type SuspendedProcess struct {
	ProcessName      *string `protobuf:"bytes,2,opt,name=ProcessName" json:"ProcessName,omitempty"`
	SuspensionReason *string `protobuf:"bytes,3,opt,name=SuspensionReason" json:"SuspensionReason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SuspendedProcess) Reset()         { *m = SuspendedProcess{} }
func (m *SuspendedProcess) String() string { return proto.CompactTextString(m) }
func (*SuspendedProcess) ProtoMessage()    {}

func (m *SuspendedProcess) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *SuspendedProcess) GetSuspensionReason() string {
	if m != nil && m.SuspensionReason != nil {
		return *m.SuspensionReason
	}
	return ""
}

type TagDescription struct {
	Key               *string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	PropagateAtLaunch *bool   `protobuf:"varint,3,opt,name=PropagateAtLaunch" json:"PropagateAtLaunch,omitempty"`
	ResourceId        *string `protobuf:"bytes,4,opt,name=ResourceId" json:"ResourceId,omitempty"`
	ResourceType      *string `protobuf:"bytes,5,opt,name=ResourceType" json:"ResourceType,omitempty"`
	Value             *string `protobuf:"bytes,6,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *TagDescription) Reset()         { *m = TagDescription{} }
func (m *TagDescription) String() string { return proto.CompactTextString(m) }
func (*TagDescription) ProtoMessage()    {}

func (m *TagDescription) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *TagDescription) GetPropagateAtLaunch() bool {
	if m != nil && m.PropagateAtLaunch != nil {
		return *m.PropagateAtLaunch
	}
	return false
}

func (m *TagDescription) GetResourceId() string {
	if m != nil && m.ResourceId != nil {
		return *m.ResourceId
	}
	return ""
}

func (m *TagDescription) GetResourceType() string {
	if m != nil && m.ResourceType != nil {
		return *m.ResourceType
	}
	return ""
}

func (m *TagDescription) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*EnabledMetric)(nil), "opsee.aws.autoscaling.EnabledMetric")
	proto.RegisterType((*Group)(nil), "opsee.aws.autoscaling.Group")
	proto.RegisterType((*Instance)(nil), "opsee.aws.autoscaling.Instance")
	proto.RegisterType((*SuspendedProcess)(nil), "opsee.aws.autoscaling.SuspendedProcess")
	proto.RegisterType((*TagDescription)(nil), "opsee.aws.autoscaling.TagDescription")
}
func (this *EnabledMetric) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnabledMetric)
	if !ok {
		that2, ok := that.(EnabledMetric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Granularity != nil && that1.Granularity != nil {
		if *this.Granularity != *that1.Granularity {
			return false
		}
	} else if this.Granularity != nil {
		return false
	} else if that1.Granularity != nil {
		return false
	}
	if this.Metric != nil && that1.Metric != nil {
		if *this.Metric != *that1.Metric {
			return false
		}
	} else if this.Metric != nil {
		return false
	} else if that1.Metric != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Group) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Group)
	if !ok {
		that2, ok := that.(Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AutoScalingGroupARN != nil && that1.AutoScalingGroupARN != nil {
		if *this.AutoScalingGroupARN != *that1.AutoScalingGroupARN {
			return false
		}
	} else if this.AutoScalingGroupARN != nil {
		return false
	} else if that1.AutoScalingGroupARN != nil {
		return false
	}
	if this.AutoScalingGroupName != nil && that1.AutoScalingGroupName != nil {
		if *this.AutoScalingGroupName != *that1.AutoScalingGroupName {
			return false
		}
	} else if this.AutoScalingGroupName != nil {
		return false
	} else if that1.AutoScalingGroupName != nil {
		return false
	}
	if len(this.AvailabilityZones) != len(that1.AvailabilityZones) {
		return false
	}
	for i := range this.AvailabilityZones {
		if this.AvailabilityZones[i] != that1.AvailabilityZones[i] {
			return false
		}
	}
	if this.CreatedTime != nil && that1.CreatedTime != nil {
		if *this.CreatedTime != *that1.CreatedTime {
			return false
		}
	} else if this.CreatedTime != nil {
		return false
	} else if that1.CreatedTime != nil {
		return false
	}
	if this.DefaultCooldown != nil && that1.DefaultCooldown != nil {
		if *this.DefaultCooldown != *that1.DefaultCooldown {
			return false
		}
	} else if this.DefaultCooldown != nil {
		return false
	} else if that1.DefaultCooldown != nil {
		return false
	}
	if this.DesiredCapacity != nil && that1.DesiredCapacity != nil {
		if *this.DesiredCapacity != *that1.DesiredCapacity {
			return false
		}
	} else if this.DesiredCapacity != nil {
		return false
	} else if that1.DesiredCapacity != nil {
		return false
	}
	if len(this.EnabledMetrics) != len(that1.EnabledMetrics) {
		return false
	}
	for i := range this.EnabledMetrics {
		if !this.EnabledMetrics[i].Equal(that1.EnabledMetrics[i]) {
			return false
		}
	}
	if this.HealthCheckGracePeriod != nil && that1.HealthCheckGracePeriod != nil {
		if *this.HealthCheckGracePeriod != *that1.HealthCheckGracePeriod {
			return false
		}
	} else if this.HealthCheckGracePeriod != nil {
		return false
	} else if that1.HealthCheckGracePeriod != nil {
		return false
	}
	if this.HealthCheckType != nil && that1.HealthCheckType != nil {
		if *this.HealthCheckType != *that1.HealthCheckType {
			return false
		}
	} else if this.HealthCheckType != nil {
		return false
	} else if that1.HealthCheckType != nil {
		return false
	}
	if len(this.Instances) != len(that1.Instances) {
		return false
	}
	for i := range this.Instances {
		if !this.Instances[i].Equal(that1.Instances[i]) {
			return false
		}
	}
	if this.LaunchConfigurationName != nil && that1.LaunchConfigurationName != nil {
		if *this.LaunchConfigurationName != *that1.LaunchConfigurationName {
			return false
		}
	} else if this.LaunchConfigurationName != nil {
		return false
	} else if that1.LaunchConfigurationName != nil {
		return false
	}
	if len(this.LoadBalancerNames) != len(that1.LoadBalancerNames) {
		return false
	}
	for i := range this.LoadBalancerNames {
		if this.LoadBalancerNames[i] != that1.LoadBalancerNames[i] {
			return false
		}
	}
	if this.MaxSize != nil && that1.MaxSize != nil {
		if *this.MaxSize != *that1.MaxSize {
			return false
		}
	} else if this.MaxSize != nil {
		return false
	} else if that1.MaxSize != nil {
		return false
	}
	if this.MinSize != nil && that1.MinSize != nil {
		if *this.MinSize != *that1.MinSize {
			return false
		}
	} else if this.MinSize != nil {
		return false
	} else if that1.MinSize != nil {
		return false
	}
	if this.NewInstancesProtectedFromScaleIn != nil && that1.NewInstancesProtectedFromScaleIn != nil {
		if *this.NewInstancesProtectedFromScaleIn != *that1.NewInstancesProtectedFromScaleIn {
			return false
		}
	} else if this.NewInstancesProtectedFromScaleIn != nil {
		return false
	} else if that1.NewInstancesProtectedFromScaleIn != nil {
		return false
	}
	if this.PlacementGroup != nil && that1.PlacementGroup != nil {
		if *this.PlacementGroup != *that1.PlacementGroup {
			return false
		}
	} else if this.PlacementGroup != nil {
		return false
	} else if that1.PlacementGroup != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if len(this.SuspendedProcesses) != len(that1.SuspendedProcesses) {
		return false
	}
	for i := range this.SuspendedProcesses {
		if !this.SuspendedProcesses[i].Equal(that1.SuspendedProcesses[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if len(this.TerminationPolicies) != len(that1.TerminationPolicies) {
		return false
	}
	for i := range this.TerminationPolicies {
		if this.TerminationPolicies[i] != that1.TerminationPolicies[i] {
			return false
		}
	}
	if this.VPCZoneIdentifier != nil && that1.VPCZoneIdentifier != nil {
		if *this.VPCZoneIdentifier != *that1.VPCZoneIdentifier {
			return false
		}
	} else if this.VPCZoneIdentifier != nil {
		return false
	} else if that1.VPCZoneIdentifier != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Instance)
	if !ok {
		that2, ok := that.(Instance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AvailabilityZone != nil && that1.AvailabilityZone != nil {
		if *this.AvailabilityZone != *that1.AvailabilityZone {
			return false
		}
	} else if this.AvailabilityZone != nil {
		return false
	} else if that1.AvailabilityZone != nil {
		return false
	}
	if this.HealthStatus != nil && that1.HealthStatus != nil {
		if *this.HealthStatus != *that1.HealthStatus {
			return false
		}
	} else if this.HealthStatus != nil {
		return false
	} else if that1.HealthStatus != nil {
		return false
	}
	if this.InstanceId != nil && that1.InstanceId != nil {
		if *this.InstanceId != *that1.InstanceId {
			return false
		}
	} else if this.InstanceId != nil {
		return false
	} else if that1.InstanceId != nil {
		return false
	}
	if this.LaunchConfigurationName != nil && that1.LaunchConfigurationName != nil {
		if *this.LaunchConfigurationName != *that1.LaunchConfigurationName {
			return false
		}
	} else if this.LaunchConfigurationName != nil {
		return false
	} else if that1.LaunchConfigurationName != nil {
		return false
	}
	if this.LifecycleState != nil && that1.LifecycleState != nil {
		if *this.LifecycleState != *that1.LifecycleState {
			return false
		}
	} else if this.LifecycleState != nil {
		return false
	} else if that1.LifecycleState != nil {
		return false
	}
	if this.ProtectedFromScaleIn != nil && that1.ProtectedFromScaleIn != nil {
		if *this.ProtectedFromScaleIn != *that1.ProtectedFromScaleIn {
			return false
		}
	} else if this.ProtectedFromScaleIn != nil {
		return false
	} else if that1.ProtectedFromScaleIn != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SuspendedProcess) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SuspendedProcess)
	if !ok {
		that2, ok := that.(SuspendedProcess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessName != nil && that1.ProcessName != nil {
		if *this.ProcessName != *that1.ProcessName {
			return false
		}
	} else if this.ProcessName != nil {
		return false
	} else if that1.ProcessName != nil {
		return false
	}
	if this.SuspensionReason != nil && that1.SuspensionReason != nil {
		if *this.SuspensionReason != *that1.SuspensionReason {
			return false
		}
	} else if this.SuspensionReason != nil {
		return false
	} else if that1.SuspensionReason != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TagDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TagDescription)
	if !ok {
		that2, ok := that.(TagDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != nil && that1.Key != nil {
		if *this.Key != *that1.Key {
			return false
		}
	} else if this.Key != nil {
		return false
	} else if that1.Key != nil {
		return false
	}
	if this.PropagateAtLaunch != nil && that1.PropagateAtLaunch != nil {
		if *this.PropagateAtLaunch != *that1.PropagateAtLaunch {
			return false
		}
	} else if this.PropagateAtLaunch != nil {
		return false
	} else if that1.PropagateAtLaunch != nil {
		return false
	}
	if this.ResourceId != nil && that1.ResourceId != nil {
		if *this.ResourceId != *that1.ResourceId {
			return false
		}
	} else if this.ResourceId != nil {
		return false
	} else if that1.ResourceId != nil {
		return false
	}
	if this.ResourceType != nil && that1.ResourceType != nil {
		if *this.ResourceType != *that1.ResourceType {
			return false
		}
	} else if this.ResourceType != nil {
		return false
	} else if that1.ResourceType != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type EnabledMetricGetter interface {
	GetEnabledMetric() *EnabledMetric
}

var GraphQLEnabledMetricType *github_com_graphql_go_graphql.Object

type GroupGetter interface {
	GetGroup() *Group
}

var GraphQLGroupType *github_com_graphql_go_graphql.Object

type InstanceGetter interface {
	GetInstance() *Instance
}

var GraphQLInstanceType *github_com_graphql_go_graphql.Object

type SuspendedProcessGetter interface {
	GetSuspendedProcess() *SuspendedProcess
}

var GraphQLSuspendedProcessType *github_com_graphql_go_graphql.Object

type TagDescriptionGetter interface {
	GetTagDescription() *TagDescription
}

var GraphQLTagDescriptionType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLEnabledMetricType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "autoscalingEnabledMetric",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Granularity": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EnabledMetric)
						if ok {
							if obj.Granularity == nil {
								return nil, nil
							}
							return obj.GetGranularity(), nil
						}
						inter, ok := p.Source.(EnabledMetricGetter)
						if ok {
							face := inter.GetEnabledMetric()
							if face == nil {
								return nil, nil
							}
							if face.Granularity == nil {
								return nil, nil
							}
							return face.GetGranularity(), nil
						}
						return nil, fmt.Errorf("field Granularity not resolved")
					},
				},
				"Metric": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EnabledMetric)
						if ok {
							if obj.Metric == nil {
								return nil, nil
							}
							return obj.GetMetric(), nil
						}
						inter, ok := p.Source.(EnabledMetricGetter)
						if ok {
							face := inter.GetEnabledMetric()
							if face == nil {
								return nil, nil
							}
							if face.Metric == nil {
								return nil, nil
							}
							return face.GetMetric(), nil
						}
						return nil, fmt.Errorf("field Metric not resolved")
					},
				},
			}
		}),
	})
	GraphQLGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "autoscalingGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AutoScalingGroupARN": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.AutoScalingGroupARN == nil {
								return nil, nil
							}
							return obj.GetAutoScalingGroupARN(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.AutoScalingGroupARN == nil {
								return nil, nil
							}
							return face.GetAutoScalingGroupARN(), nil
						}
						return nil, fmt.Errorf("field AutoScalingGroupARN not resolved")
					},
				},
				"AutoScalingGroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.AutoScalingGroupName == nil {
								return nil, nil
							}
							return obj.GetAutoScalingGroupName(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.AutoScalingGroupName == nil {
								return nil, nil
							}
							return face.GetAutoScalingGroupName(), nil
						}
						return nil, fmt.Errorf("field AutoScalingGroupName not resolved")
					},
				},
				"AvailabilityZones": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.AvailabilityZones, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.AvailabilityZones, nil
						}
						return nil, fmt.Errorf("field AvailabilityZones not resolved")
					},
				},
				"CreatedTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.CreatedTime == nil {
								return nil, nil
							}
							return obj.GetCreatedTime(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.CreatedTime == nil {
								return nil, nil
							}
							return face.GetCreatedTime(), nil
						}
						return nil, fmt.Errorf("field CreatedTime not resolved")
					},
				},
				"DefaultCooldown": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.DefaultCooldown == nil {
								return nil, nil
							}
							return obj.GetDefaultCooldown(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.DefaultCooldown == nil {
								return nil, nil
							}
							return face.GetDefaultCooldown(), nil
						}
						return nil, fmt.Errorf("field DefaultCooldown not resolved")
					},
				},
				"DesiredCapacity": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.DesiredCapacity == nil {
								return nil, nil
							}
							return obj.GetDesiredCapacity(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.DesiredCapacity == nil {
								return nil, nil
							}
							return face.GetDesiredCapacity(), nil
						}
						return nil, fmt.Errorf("field DesiredCapacity not resolved")
					},
				},
				"EnabledMetrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLEnabledMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.EnabledMetrics, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.EnabledMetrics, nil
						}
						return nil, fmt.Errorf("field EnabledMetrics not resolved")
					},
				},
				"HealthCheckGracePeriod": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.HealthCheckGracePeriod == nil {
								return nil, nil
							}
							return obj.GetHealthCheckGracePeriod(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.HealthCheckGracePeriod == nil {
								return nil, nil
							}
							return face.GetHealthCheckGracePeriod(), nil
						}
						return nil, fmt.Errorf("field HealthCheckGracePeriod not resolved")
					},
				},
				"HealthCheckType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.HealthCheckType == nil {
								return nil, nil
							}
							return obj.GetHealthCheckType(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.HealthCheckType == nil {
								return nil, nil
							}
							return face.GetHealthCheckType(), nil
						}
						return nil, fmt.Errorf("field HealthCheckType not resolved")
					},
				},
				"Instances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstanceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.Instances, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.Instances, nil
						}
						return nil, fmt.Errorf("field Instances not resolved")
					},
				},
				"LaunchConfigurationName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.LaunchConfigurationName == nil {
								return nil, nil
							}
							return obj.GetLaunchConfigurationName(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.LaunchConfigurationName == nil {
								return nil, nil
							}
							return face.GetLaunchConfigurationName(), nil
						}
						return nil, fmt.Errorf("field LaunchConfigurationName not resolved")
					},
				},
				"LoadBalancerNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.LoadBalancerNames, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.LoadBalancerNames, nil
						}
						return nil, fmt.Errorf("field LoadBalancerNames not resolved")
					},
				},
				"MaxSize": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.MaxSize == nil {
								return nil, nil
							}
							return obj.GetMaxSize(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.MaxSize == nil {
								return nil, nil
							}
							return face.GetMaxSize(), nil
						}
						return nil, fmt.Errorf("field MaxSize not resolved")
					},
				},
				"MinSize": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.MinSize == nil {
								return nil, nil
							}
							return obj.GetMinSize(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.MinSize == nil {
								return nil, nil
							}
							return face.GetMinSize(), nil
						}
						return nil, fmt.Errorf("field MinSize not resolved")
					},
				},
				"NewInstancesProtectedFromScaleIn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.NewInstancesProtectedFromScaleIn == nil {
								return nil, nil
							}
							return obj.GetNewInstancesProtectedFromScaleIn(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.NewInstancesProtectedFromScaleIn == nil {
								return nil, nil
							}
							return face.GetNewInstancesProtectedFromScaleIn(), nil
						}
						return nil, fmt.Errorf("field NewInstancesProtectedFromScaleIn not resolved")
					},
				},
				"PlacementGroup": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.PlacementGroup == nil {
								return nil, nil
							}
							return obj.GetPlacementGroup(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.PlacementGroup == nil {
								return nil, nil
							}
							return face.GetPlacementGroup(), nil
						}
						return nil, fmt.Errorf("field PlacementGroup not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"SuspendedProcesses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLSuspendedProcessType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.SuspendedProcesses, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.SuspendedProcesses, nil
						}
						return nil, fmt.Errorf("field SuspendedProcesses not resolved")
					},
				},
				"Tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTagDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field Tags not resolved")
					},
				},
				"TerminationPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.TerminationPolicies, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.TerminationPolicies, nil
						}
						return nil, fmt.Errorf("field TerminationPolicies not resolved")
					},
				},
				"VPCZoneIdentifier": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							if obj.VPCZoneIdentifier == nil {
								return nil, nil
							}
							return obj.GetVPCZoneIdentifier(), nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							if face.VPCZoneIdentifier == nil {
								return nil, nil
							}
							return face.GetVPCZoneIdentifier(), nil
						}
						return nil, fmt.Errorf("field VPCZoneIdentifier not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "autoscalingInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AvailabilityZone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.AvailabilityZone == nil {
								return nil, nil
							}
							return obj.GetAvailabilityZone(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.AvailabilityZone == nil {
								return nil, nil
							}
							return face.GetAvailabilityZone(), nil
						}
						return nil, fmt.Errorf("field AvailabilityZone not resolved")
					},
				},
				"HealthStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.HealthStatus == nil {
								return nil, nil
							}
							return obj.GetHealthStatus(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.HealthStatus == nil {
								return nil, nil
							}
							return face.GetHealthStatus(), nil
						}
						return nil, fmt.Errorf("field HealthStatus not resolved")
					},
				},
				"InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceId == nil {
								return nil, nil
							}
							return obj.GetInstanceId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceId == nil {
								return nil, nil
							}
							return face.GetInstanceId(), nil
						}
						return nil, fmt.Errorf("field InstanceId not resolved")
					},
				},
				"LaunchConfigurationName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.LaunchConfigurationName == nil {
								return nil, nil
							}
							return obj.GetLaunchConfigurationName(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.LaunchConfigurationName == nil {
								return nil, nil
							}
							return face.GetLaunchConfigurationName(), nil
						}
						return nil, fmt.Errorf("field LaunchConfigurationName not resolved")
					},
				},
				"LifecycleState": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.LifecycleState == nil {
								return nil, nil
							}
							return obj.GetLifecycleState(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.LifecycleState == nil {
								return nil, nil
							}
							return face.GetLifecycleState(), nil
						}
						return nil, fmt.Errorf("field LifecycleState not resolved")
					},
				},
				"ProtectedFromScaleIn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.ProtectedFromScaleIn == nil {
								return nil, nil
							}
							return obj.GetProtectedFromScaleIn(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.ProtectedFromScaleIn == nil {
								return nil, nil
							}
							return face.GetProtectedFromScaleIn(), nil
						}
						return nil, fmt.Errorf("field ProtectedFromScaleIn not resolved")
					},
				},
			}
		}),
	})
	GraphQLSuspendedProcessType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "autoscalingSuspendedProcess",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ProcessName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SuspendedProcess)
						if ok {
							if obj.ProcessName == nil {
								return nil, nil
							}
							return obj.GetProcessName(), nil
						}
						inter, ok := p.Source.(SuspendedProcessGetter)
						if ok {
							face := inter.GetSuspendedProcess()
							if face == nil {
								return nil, nil
							}
							if face.ProcessName == nil {
								return nil, nil
							}
							return face.GetProcessName(), nil
						}
						return nil, fmt.Errorf("field ProcessName not resolved")
					},
				},
				"SuspensionReason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SuspendedProcess)
						if ok {
							if obj.SuspensionReason == nil {
								return nil, nil
							}
							return obj.GetSuspensionReason(), nil
						}
						inter, ok := p.Source.(SuspendedProcessGetter)
						if ok {
							face := inter.GetSuspendedProcess()
							if face == nil {
								return nil, nil
							}
							if face.SuspensionReason == nil {
								return nil, nil
							}
							return face.GetSuspensionReason(), nil
						}
						return nil, fmt.Errorf("field SuspensionReason not resolved")
					},
				},
			}
		}),
	})
	GraphQLTagDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "autoscalingTagDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TagDescription)
						if ok {
							if obj.Key == nil {
								return nil, nil
							}
							return obj.GetKey(), nil
						}
						inter, ok := p.Source.(TagDescriptionGetter)
						if ok {
							face := inter.GetTagDescription()
							if face == nil {
								return nil, nil
							}
							if face.Key == nil {
								return nil, nil
							}
							return face.GetKey(), nil
						}
						return nil, fmt.Errorf("field Key not resolved")
					},
				},
				"PropagateAtLaunch": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TagDescription)
						if ok {
							if obj.PropagateAtLaunch == nil {
								return nil, nil
							}
							return obj.GetPropagateAtLaunch(), nil
						}
						inter, ok := p.Source.(TagDescriptionGetter)
						if ok {
							face := inter.GetTagDescription()
							if face == nil {
								return nil, nil
							}
							if face.PropagateAtLaunch == nil {
								return nil, nil
							}
							return face.GetPropagateAtLaunch(), nil
						}
						return nil, fmt.Errorf("field PropagateAtLaunch not resolved")
					},
				},
				"ResourceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TagDescription)
						if ok {
							if obj.ResourceId == nil {
								return nil, nil
							}
							return obj.GetResourceId(), nil
						}
						inter, ok := p.Source.(TagDescriptionGetter)
						if ok {
							face := inter.GetTagDescription()
							if face == nil {
								return nil, nil
							}
							if face.ResourceId == nil {
								return nil, nil
							}
							return face.GetResourceId(), nil
						}
						return nil, fmt.Errorf("field ResourceId not resolved")
					},
				},
				"ResourceType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TagDescription)
						if ok {
							if obj.ResourceType == nil {
								return nil, nil
							}
							return obj.GetResourceType(), nil
						}
						inter, ok := p.Source.(TagDescriptionGetter)
						if ok {
							face := inter.GetTagDescription()
							if face == nil {
								return nil, nil
							}
							if face.ResourceType == nil {
								return nil, nil
							}
							return face.GetResourceType(), nil
						}
						return nil, fmt.Errorf("field ResourceType not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TagDescription)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(TagDescriptionGetter)
						if ok {
							face := inter.GetTagDescription()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedEnabledMetric(r randyTypes, easy bool) *EnabledMetric {
	this := &EnabledMetric{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.Granularity = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.Metric = &v2
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedGroup(r randyTypes, easy bool) *Group {
	this := &Group{}
	if r.Intn(10) != 0 {
		v3 := randStringTypes(r)
		this.AutoScalingGroupARN = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.AutoScalingGroupName = &v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.AvailabilityZones = make([]string, v5)
		for i := 0; i < v5; i++ {
			this.AvailabilityZones[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.CreatedTime = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.DefaultCooldown = &v7
	}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.DesiredCapacity = &v8
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.EnabledMetrics = make([]*EnabledMetric, v9)
		for i := 0; i < v9; i++ {
			this.EnabledMetrics[i] = NewPopulatedEnabledMetric(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.HealthCheckGracePeriod = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringTypes(r)
		this.HealthCheckType = &v11
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Instances = make([]*Instance, v12)
		for i := 0; i < v12; i++ {
			this.Instances[i] = NewPopulatedInstance(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := randStringTypes(r)
		this.LaunchConfigurationName = &v13
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.LoadBalancerNames = make([]string, v14)
		for i := 0; i < v14; i++ {
			this.LoadBalancerNames[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v15 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.MaxSize = &v15
	}
	if r.Intn(10) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.MinSize = &v16
	}
	if r.Intn(10) != 0 {
		v17 := bool(bool(r.Intn(2) == 0))
		this.NewInstancesProtectedFromScaleIn = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringTypes(r)
		this.PlacementGroup = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.Status = &v19
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.SuspendedProcesses = make([]*SuspendedProcess, v20)
		for i := 0; i < v20; i++ {
			this.SuspendedProcesses[i] = NewPopulatedSuspendedProcess(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(5)
		this.Tags = make([]*TagDescription, v21)
		for i := 0; i < v21; i++ {
			this.Tags[i] = NewPopulatedTagDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.TerminationPolicies = make([]string, v22)
		for i := 0; i < v22; i++ {
			this.TerminationPolicies[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v23 := randStringTypes(r)
		this.VPCZoneIdentifier = &v23
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 23)
	}
	return this
}

func NewPopulatedInstance(r randyTypes, easy bool) *Instance {
	this := &Instance{}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.AvailabilityZone = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringTypes(r)
		this.HealthStatus = &v25
	}
	if r.Intn(10) != 0 {
		v26 := randStringTypes(r)
		this.InstanceId = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.LaunchConfigurationName = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.LifecycleState = &v28
	}
	if r.Intn(10) != 0 {
		v29 := bool(bool(r.Intn(2) == 0))
		this.ProtectedFromScaleIn = &v29
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 8)
	}
	return this
}

func NewPopulatedSuspendedProcess(r randyTypes, easy bool) *SuspendedProcess {
	this := &SuspendedProcess{}
	if r.Intn(10) != 0 {
		v30 := randStringTypes(r)
		this.ProcessName = &v30
	}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.SuspensionReason = &v31
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedTagDescription(r randyTypes, easy bool) *TagDescription {
	this := &TagDescription{}
	if r.Intn(10) != 0 {
		v32 := randStringTypes(r)
		this.Key = &v32
	}
	if r.Intn(10) != 0 {
		v33 := bool(bool(r.Intn(2) == 0))
		this.PropagateAtLaunch = &v33
	}
	if r.Intn(10) != 0 {
		v34 := randStringTypes(r)
		this.ResourceId = &v34
	}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.ResourceType = &v35
	}
	if r.Intn(10) != 0 {
		v36 := randStringTypes(r)
		this.Value = &v36
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v37 := r.Intn(100)
	tmps := make([]rune, v37)
	for i := 0; i < v37; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v38 := r.Int63()
		if r.Intn(2) == 0 {
			v38 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v38))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
